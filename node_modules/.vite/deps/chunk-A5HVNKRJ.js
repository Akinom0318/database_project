import {
  is_function,
  noop,
  run_all,
  safe_not_equal,
  subscribe
<<<<<<< HEAD:node_modules/.vite/deps/chunk-A5HVNKRJ.js
} from "./chunk-4QQBBFMR.js";
=======
<<<<<<<< HEAD:node_modules/.vite/deps/chunk-4YT3TDVC.js
} from "./chunk-5S4ALRLA.js";
========
} from "./chunk-GJ3NJHGJ.js";
>>>>>>>> 7688a9a1f5e6a30bee6114b32a2f9c488102e971:node_modules/.vite/deps/chunk-YVTAVUKM.js
>>>>>>> b26dc14ffb1677efbb7947a200cace34f9996078:node_modules/.vite/deps/chunk-YVTAVUKM.js

// node_modules/svelte/src/runtime/store/index.js
var subscriber_queue = [];
function readable(value, start) {
  return {
    subscribe: writable(value, start).subscribe
  };
}
function writable(value, start = noop) {
  let stop;
  const subscribers = /* @__PURE__ */ new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update(fn) {
    set(fn(value));
  }
  function subscribe2(run, invalidate = noop) {
    const subscriber = [run, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set, update) || noop;
    }
    run(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0 && stop) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update, subscribe: subscribe2 };
}
function derived(stores, fn, initial_value) {
  const single = !Array.isArray(stores);
  const stores_array = single ? [stores] : stores;
  if (!stores_array.every(Boolean)) {
    throw new Error("derived() expects stores as input, got a falsy value");
  }
  const auto = fn.length < 2;
  return readable(initial_value, (set, update) => {
    let started = false;
    const values = [];
    let pending = 0;
    let cleanup = noop;
    const sync = () => {
      if (pending) {
        return;
      }
      cleanup();
      const result = fn(single ? values[0] : values, set, update);
      if (auto) {
        set(result);
      } else {
        cleanup = is_function(result) ? result : noop;
      }
    };
    const unsubscribers = stores_array.map(
      (store, i) => subscribe(
        store,
        (value) => {
          values[i] = value;
          pending &= ~(1 << i);
          if (started) {
            sync();
          }
        },
        () => {
          pending |= 1 << i;
        }
      )
    );
    started = true;
    sync();
    return function stop() {
      run_all(unsubscribers);
      cleanup();
      started = false;
    };
  });
}
function readonly(store) {
  return {
    subscribe: store.subscribe.bind(store)
  };
}

export {
  readable,
  writable,
  derived,
  readonly
};
<<<<<<< HEAD:node_modules/.vite/deps/chunk-A5HVNKRJ.js
//# sourceMappingURL=chunk-A5HVNKRJ.js.map
=======
<<<<<<<< HEAD:node_modules/.vite/deps/chunk-4YT3TDVC.js
//# sourceMappingURL=chunk-4YT3TDVC.js.map
========
//# sourceMappingURL=chunk-YVTAVUKM.js.map
>>>>>>>> 7688a9a1f5e6a30bee6114b32a2f9c488102e971:node_modules/.vite/deps/chunk-YVTAVUKM.js
>>>>>>> b26dc14ffb1677efbb7947a200cace34f9996078:node_modules/.vite/deps/chunk-YVTAVUKM.js
