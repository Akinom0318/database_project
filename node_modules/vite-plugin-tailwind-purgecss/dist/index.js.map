{"version":3,"sources":["../src/index.ts","../src/tailwind.ts","../src/logger.ts","../src/purgecss-options.ts"],"sourcesContent":["import fs from 'node:fs';\nimport path from 'node:path';\nimport fg from 'fast-glob';\nimport color from 'chalk';\nimport * as css from 'css-tree';\nimport htmlExtractor from 'purgecss-from-html';\nimport { normalizePath, type ResolvedConfig, type Plugin } from 'vite';\nimport { PurgeCSS, mergeExtractorSelectors, standardizeSafelist } from 'purgecss';\nimport {\n\tresolveTailwindConfig,\n\tdefaultExtractor,\n\tgetContentPaths,\n\tgetTailwindClasses,\n\tstandardizeTWSafelist,\n} from './tailwind.js';\nimport { createLogger, type Logger } from './logger.js';\nimport { getDefaultPurgeOptions } from './purgecss-options.js';\nimport type { ExtractorResultDetailed } from 'purgecss';\nimport type { PurgeOptions } from './types.js';\n\nconst EXT_CSS = /\\.(css)$/;\n// cache\nconst contentFiles = new Set<string>();\nconst htmlFiles: string[] = [];\n\nexport function purgeCss(purgeOptions?: PurgeOptions): Plugin {\n\tconst DEBUG = purgeOptions?.debug ?? false;\n\tconst LEGACY = purgeOptions?.legacy ?? false;\n\n\tlet log: Logger;\n\tlet viteConfig: ResolvedConfig;\n\n\tconst tailwindConfig = resolveTailwindConfig(purgeOptions?.tailwindConfigPath);\n\tconst tw = getTailwindClasses(tailwindConfig);\n\tconst extractor = purgeOptions?.purgecss?.defaultExtractor ?? defaultExtractor(tailwindConfig);\n\n\t// safelist from the tailwind config\n\tconst twSafelist = standardizeTWSafelist(tailwindConfig);\n\tconst safelist = {\n\t\t...purgeOptions?.safelist,\n\t\tstandard: [\n\t\t\t// fix for pseudo-class functions that begin with `:` getting purged (e.g. `:is`)\n\t\t\t// see: https://github.com/FullHuman/purgecss/issues/978\n\t\t\t/^\\:[-a-z]+$/,\n\t\t\t...(purgeOptions?.safelist?.standard ?? []),\n\t\t\t...twSafelist,\n\t\t],\n\t};\n\n\tconst moduleIds = new Set<string>();\n\n\treturn {\n\t\tname: 'vite-plugin-tailwind-purgecss',\n\t\tapply: 'build',\n\t\tenforce: 'post',\n\n\t\tconfigResolved(config) {\n\t\t\tviteConfig = config;\n\t\t\tlog = createLogger(viteConfig);\n\n\t\t\t// if the content files haven't been cached\n\t\t\tif (contentFiles.size === 0) {\n\t\t\t\tconst contentGlobs = getContentPaths(tailwindConfig.content).map((p) => normalizePath(p));\n\t\t\t\tfor (const file of fg.globSync(contentGlobs, { cwd: viteConfig.root, absolute: true })) {\n\t\t\t\t\tif (file.endsWith('.html')) htmlFiles.push(file);\n\t\t\t\t\tcontentFiles.add(file);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tload(id) {\n\t\t\tif (!contentFiles.has(id)) return;\n\t\t\t// module is included in tailwind's `content` field\n\t\t\tmoduleIds.add(id);\n\t\t},\n\n\t\tasync generateBundle(options, bundle) {\n\t\t\ttype ChunkOrAsset = (typeof bundle)[string];\n\t\t\ttype Asset = Extract<ChunkOrAsset, { type: 'asset' }>;\n\t\t\tconst includedModules: Array<{ raw: string; extension: string }> = [];\n\t\t\tconst includedAssets: Array<{ raw: string; name: string }> = [];\n\t\t\tconst extensions = new Set<string>();\n\n\t\t\tconst savedTWClasses = new Set<string>();\n\t\t\tconst generatedTWClasses = new Set<string>();\n\n\t\t\tlog.clear();\n\t\t\tif (DEBUG) log.info(`${color.greenBright('DEBUG mode activated')}.`);\n\t\t\tif (LEGACY) {\n\t\t\t\tlog.info(`${color.yellowBright('LEGACY mode activated')}. Purging all unused CSS...`);\n\t\t\t} else {\n\t\t\t\tlog.info('Purging unused tailwindcss styles...');\n\t\t\t}\n\n\t\t\tconst purgecss = new PurgeCSS();\n\t\t\tpurgecss.options = {\n\t\t\t\t...getDefaultPurgeOptions(),\n\t\t\t\tdefaultExtractor: extractor,\n\t\t\t\tsafelist: standardizeSafelist(safelist),\n\t\t\t\trejected: DEBUG,\n\t\t\t\trejectedCss: DEBUG,\n\t\t\t};\n\n\t\t\t// a list of selectors found in the original stylesheets\n\t\t\tconst baseSelectors: ExtractorResultDetailed = {\n\t\t\t\tattributes: { names: [], values: [] },\n\t\t\t\tclasses: [],\n\t\t\t\tids: [],\n\t\t\t\ttags: [],\n\t\t\t\tundetermined: [],\n\t\t\t};\n\t\t\t// extracts all selectors from the stylesheet\n\t\t\tfor (const [filename, chunkOrAsset] of Object.entries(bundle)) {\n\t\t\t\tif (chunkOrAsset.type === 'asset' && EXT_CSS.test(filename)) {\n\t\t\t\t\tconst source = String(chunkOrAsset.source);\n\t\t\t\t\tincludedAssets.push({ raw: source, name: filename });\n\n\t\t\t\t\t// skip CSS parsing if we're in legacy mode\n\t\t\t\t\tif (LEGACY) continue;\n\n\t\t\t\t\tconst ast = css.parse(source);\n\t\t\t\t\tcss.walk(ast, {\n\t\t\t\t\t\tenter(node: css.CssNode) {\n\t\t\t\t\t\t\t// e.g. `[name=\"value\"] { }`\n\t\t\t\t\t\t\tif (node.type === 'AttributeSelector') {\n\t\t\t\t\t\t\t\t// attributes always have a name\n\t\t\t\t\t\t\t\tbaseSelectors.attributes.names.push(node.name.name);\n\n\t\t\t\t\t\t\t\tif (node.value === null) return;\n\t\t\t\t\t\t\t\tif (node.value.type === 'Identifier') {\n\t\t\t\t\t\t\t\t\tbaseSelectors.attributes.values.push(node.value.name);\n\t\t\t\t\t\t\t\t} else if (node.value.type === 'String') {\n\t\t\t\t\t\t\t\t\tbaseSelectors.attributes.values.push(node.value.value);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// e.g. `#name { }`\n\t\t\t\t\t\t\tif (node.type === 'IdSelector') {\n\t\t\t\t\t\t\t\tbaseSelectors.ids.push(node.name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// e.g. `body { }`\n\t\t\t\t\t\t\tif (node.type === 'TypeSelector') {\n\t\t\t\t\t\t\t\tbaseSelectors.tags.push(node.name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// e.g. `.name { }`\n\t\t\t\t\t\t\tif (node.type === 'ClassSelector') {\n\t\t\t\t\t\t\t\tconst escapedCN = unescapeCSS(node.name);\n\t\t\t\t\t\t\t\tbaseSelectors.classes.push(escapedCN);\n\t\t\t\t\t\t\t\tif (tw.isClass(escapedCN)) {\n\t\t\t\t\t\t\t\t\tgeneratedTWClasses.add(escapedCN);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const id of moduleIds) {\n\t\t\t\t// check if the module is included in the bundle\n\t\t\t\tconst info = this.getModuleInfo(id);\n\t\t\t\tif (info?.isIncluded !== true || info.code === null) continue;\n\n\t\t\t\t// compiled JS code\n\t\t\t\tconst source = fs.readFileSync(id, { encoding: 'utf8' });\n\t\t\t\tincludedModules.push({ raw: source, extension: 'tw' }, { raw: info.code, extension: 'tw' });\n\n\t\t\t\tif (LEGACY) {\n\t\t\t\t\t// plucks out the `.` (e.g. `.html` -> `html`)\n\t\t\t\t\tconst extension = path.parse(id).ext.slice(1);\n\t\t\t\t\textensions.add(extension);\n\t\t\t\t\t// source code\n\t\t\t\t\tincludedModules.push({ raw: source, extension });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// not TW classes, but are possibly a selector (used for legacy mode)\n\t\t\tconst possibleSelectors = new Set<string>();\n\t\t\tfor (const mod of includedModules) {\n\t\t\t\tif (mod.extension !== 'tw') continue;\n\n\t\t\t\tfor (const selector of extractor(mod.raw)) {\n\t\t\t\t\tif (generatedTWClasses.delete(selector)) {\n\t\t\t\t\t\tsavedTWClasses.add(selector);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpossibleSelectors.add(selector);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst htmlSelectors = await purgecss.extractSelectorsFromFiles(htmlFiles, [\n\t\t\t\t// @ts-expect-error extractor types aren't matching for some reason\n\t\t\t\t{ extractor: htmlExtractor, extensions: ['html'] },\n\t\t\t]);\n\n\t\t\t// @ts-expect-error `classes` is private, but we need it\n\t\t\thtmlSelectors.classes.forEach((cn) => generatedTWClasses.delete(cn));\n\n\t\t\t// the remaining classes in `generatedTWClasses` are _unused_,\n\t\t\t// so we'll add it to the blocklist to forcefully purge them\n\t\t\tpurgecss.options.blocklist.push(...generatedTWClasses, ...(tailwindConfig.blocklist ?? []));\n\t\t\tif (LEGACY) purgecss.options.safelist.standard.push(...possibleSelectors);\n\n\t\t\t// excludes `js` files as they are handled separately above\n\t\t\textensions.delete('tw');\n\t\t\tconst moduleSelectors = await purgecss.extractSelectorsFromString(includedModules, [\n\t\t\t\t{ extractor, extensions: Array.from(extensions) },\n\t\t\t\t...(purgeOptions?.purgecss?.extractors ?? []),\n\t\t\t]);\n\n\t\t\tconst mergedSelectors = mergeExtractorSelectors(\n\t\t\t\thtmlSelectors,\n\t\t\t\tmoduleSelectors,\n\t\t\t\tbaseSelectors\n\t\t\t);\n\n\t\t\t// purge the stylesheets\n\t\t\tconst purgeResults = await purgecss.getPurgedCSS(includedAssets, mergedSelectors);\n\n\t\t\tif (DEBUG) {\n\t\t\t\tconsole.dir(\n\t\t\t\t\t{\n\t\t\t\t\t\tpossible_selectors: mergedSelectors,\n\t\t\t\t\t\ttailwind_classes_to_remove: generatedTWClasses,\n\t\t\t\t\t\ttailwind_classes_to_keep: savedTWClasses,\n\t\t\t\t\t\tpurgecss_results: purgeResults,\n\t\t\t\t\t},\n\t\t\t\t\t{ maxArrayLength: Infinity, maxStringLength: Infinity, depth: Infinity }\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst stats = [];\n\t\t\tfor (const result of purgeResults) {\n\t\t\t\tconst filename = result.file!;\n\t\t\t\tconst asset = bundle[filename] as Asset;\n\n\t\t\t\t// compute size differences\n\t\t\t\tconst originalFileSize = new Blob([asset.source]).size / 1000;\n\t\t\t\tconst finalFileSize = new Blob([result.css]).size / 1000;\n\t\t\t\tconst stat = {\n\t\t\t\t\tfilename: log.colorFile(filename),\n\t\t\t\t\toriginal: originalFileSize.toFixed(2),\n\t\t\t\t\tfinal: finalFileSize.toFixed(2),\n\t\t\t\t};\n\t\t\t\tstats.push(stat);\n\n\t\t\t\t// overwrite the contents of the stylesheet\n\t\t\t\tasset.source = result.css;\n\t\t\t}\n\n\t\t\t// print savings\n\t\t\tlog.info(`Calculating bundle size savings: ${color.gray(`(not minified)`)}`);\n\t\t\tconst finalSizes = stats.map((stat) => stat.final.length);\n\t\t\tconst originalSizes = stats.map((stat) => stat.original.length);\n\t\t\tconst nameSizes = stats.map((stat) => stat.filename.length);\n\t\t\t// padding\n\t\t\tconst namePadding = Math.max(...nameSizes);\n\t\t\tconst finalPadding = Math.max(...finalSizes);\n\t\t\tconst originalPadding = Math.max(...originalSizes);\n\t\t\tfor (const { filename, final, original } of stats) {\n\t\t\t\tconst fp = log.colorFile(filename).padEnd(namePadding + 25);\n\t\t\t\tconst og = original.padStart(originalPadding) + ' kB';\n\t\t\t\t// color the result if the size changed\n\t\t\t\tconst changed = original !== final;\n\t\t\t\tconst result = changed\n\t\t\t\t\t? color.green(final.padStart(finalPadding) + ' kB')\n\t\t\t\t\t: final.padStart(finalPadding) + ' kB';\n\t\t\t\tconst sizes = color.bold.gray(`${og}  ->  ${result}`);\n\t\t\t\t// log results\n\t\t\t\tviteConfig.logger.info(fp + sizes);\n\t\t\t}\n\t\t\tviteConfig.logger.info('\\n');\n\t\t},\n\t};\n}\n\nfunction unescapeCSS(str: string, options = { slashZero: true }) {\n\tconst string = options?.slashZero ? str.replaceAll('�', '\\0') : str;\n\treturn string.replaceAll(/\\\\([\\dA-Fa-f]{1,6}[\\t\\n\\f\\r ]?|[\\S\\s])/g, (match) => {\n\t\treturn match.length > 2\n\t\t\t? String.fromCodePoint(Number.parseInt(match.slice(1).trim(), 16))\n\t\t\t: match[1];\n\t});\n}\n\nexport default purgeCss;\nexport type { PurgeOptions };\n","import path from 'node:path';\nimport fs from 'node:fs';\nimport loadConfig from 'tailwindcss/loadConfig.js';\nimport resolveConfig from 'tailwindcss/resolveConfig.js';\nimport { defaultExtractor as createDefaultExtractor } from 'tailwindcss/lib/lib/defaultExtractor.js';\nimport ctxPkg from 'tailwindcss/lib/lib/setupContextUtils.js';\nimport type { Config as TWConfig } from 'tailwindcss';\nimport type { ContentConfig } from 'tailwindcss/types/config.js';\n\nconst defaultConfigFiles = [\n\t'tailwind.config.js',\n\t'tailwind.config.cjs',\n\t'tailwind.config.mjs',\n\t'tailwind.config.ts',\n];\n\nfunction resolveDefaultConfigPath(): string | null {\n\tfor (const configFile of defaultConfigFiles) {\n\t\ttry {\n\t\t\tconst configPath = path.resolve(configFile);\n\t\t\tfs.accessSync(configPath);\n\t\t\treturn configPath;\n\t\t} catch (err) {}\n\t}\n\n\treturn null;\n}\n\nfunction resolveTailwindConfigPath(configPath?: string): string | null {\n\tif (configPath === undefined) {\n\t\treturn resolveDefaultConfigPath();\n\t}\n\n\ttry {\n\t\tconst resolvedPath = path.resolve(configPath);\n\t\tfs.accessSync(resolvedPath);\n\t\treturn resolvedPath;\n\t} catch (err) {}\n\n\treturn null;\n}\n\nexport function resolveTailwindConfig(configPath?: string): TWConfig {\n\tconst resolvedConfigPath = resolveTailwindConfigPath(configPath);\n\tif (resolvedConfigPath === null)\n\t\tthrow new Error(\n\t\t\t'[vite-plugin-tailwind-purgecss]: Unable to find a tailwind config. Specify a path to the tailwind config in the plugin option `tailwindConfigPath`.'\n\t\t);\n\n\tconst loadedConfig = loadConfig(resolvedConfigPath);\n\tconst config = resolveConfig(loadedConfig);\n\n\treturn config as TWConfig;\n}\n\nconst { createContext: createTWContext } = ctxPkg;\nexport function getTailwindClasses(config: TWConfig) {\n\tconst tailwindClasses = new Set<string>();\n\n\tconst ctx = createTWContext(config);\n\tconst classes = ctx.getClassList();\n\tfor (const className of classes) {\n\t\ttailwindClasses.add(className);\n\t}\n\n\treturn {\n\t\tclasses: tailwindClasses,\n\t\tisClass: (selector: string): boolean => {\n\t\t\t// strips the `!` modifier and splits into chunks\n\t\t\tconst parts = selector.replaceAll('!', '').split(config.separator!);\n\t\t\tconst className = parts.at(-1)!;\n\t\t\treturn tailwindClasses.has(className) || isArbitrary(className) || isColorOpacity(className);\n\t\t},\n\t};\n}\n\nconst ARBITRARY_CLASS_REGEX = /-\\[.+\\]$/i;\nfunction isArbitrary(selector: string): boolean {\n\treturn ARBITRARY_CLASS_REGEX.test(selector);\n}\n\nconst OPACITY_COLOR_CLASS_REGEX = /\\/(\\[.+\\]|\\d+)$/i;\nfunction isColorOpacity(selector: string): boolean {\n\treturn OPACITY_COLOR_CLASS_REGEX.test(selector);\n}\n\nexport function isTailwindClass(selector: string) {\n\tselector.split(selector);\n}\n\nexport const defaultExtractor = (tailwindConfig: TWConfig) =>\n\tcreateDefaultExtractor({ tailwindConfig });\n\n// split the content into file paths and raw\nexport function getContentPaths(config: ContentConfig): string[] {\n\tif (Array.isArray(config)) {\n\t\treturn config.filter((p): p is string => typeof p === 'string');\n\t}\n\treturn config.files.filter((p): p is string => typeof p === 'string');\n}\n\nexport function standardizeTWSafelist(tailwindConfig: TWConfig): (string | RegExp)[] {\n\treturn (\n\t\ttailwindConfig.safelist?.flatMap((item) => {\n\t\t\tif (typeof item === 'string') {\n\t\t\t\treturn item;\n\t\t\t}\n\t\t\tconst { pattern, variants } = item;\n\t\t\tif (variants === undefined) return pattern;\n\n\t\t\tconst flags = pattern.flags;\n\t\t\tconst stringifiedPattern = pattern\n\t\t\t\t.toString()\n\t\t\t\t// remove the flags\n\t\t\t\t.slice(0, flags.length * -1)\n\t\t\t\t// removes the starting and ending `/`\n\t\t\t\t.slice(1, -1);\n\t\t\tconst patterns = variants.map(\n\t\t\t\t(v) => new RegExp(v + tailwindConfig.separator + stringifiedPattern, flags)\n\t\t\t);\n\t\t\treturn patterns;\n\t\t}) ?? []\n\t);\n}\n","import color from 'chalk';\nimport path from 'node:path';\nimport type { ResolvedConfig } from 'vite';\n\nexport type Logger = ReturnType<typeof createLogger>;\n\nexport function createLogger(viteConfig: ResolvedConfig) {\n\tconst PREFIX = color.cyan('[vite-plugin-tailwind-purgecss]: ');\n\tconst logger = {\n\t\tinfo: (msg: string) => viteConfig.logger.info(PREFIX + msg),\n\t\twarn: (msg: string) => viteConfig.logger.warn(PREFIX + color.yellow(msg)),\n\t\terror: (msg: string) => viteConfig.logger.error(PREFIX + color.red(msg)),\n\t\tclear: () => viteConfig.logger.clearScreen('info'),\n\t\tcolorFile: (filepath: string) => {\n\t\t\tconst fp = path.parse(filepath);\n\t\t\tconst colored = color.gray(fp.dir + '/') + fp.base;\n\t\t\treturn colored;\n\t\t},\n\t};\n\n\treturn logger;\n}\n","export const getDefaultPurgeOptions = () => ({\n\tcss: [],\n\tcontent: [],\n\textractors: [],\n\tfontFace: false,\n\tkeyframes: false,\n\trejected: false,\n\trejectedCss: false,\n\tsourceMap: false,\n\tstdin: false,\n\tstdout: false,\n\tvariables: false,\n\tsafelist: {\n\t\tstandard: [],\n\t\tdeep: [],\n\t\tgreedy: [],\n\t\tvariables: [],\n\t\tkeyframes: [],\n\t},\n\tblocklist: [],\n\tskippedContentGlobs: [],\n\tdynamicAttributes: [],\n});\n"],"mappings":"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","names":["fs","path","color","path","_a","color","fs","path"]}