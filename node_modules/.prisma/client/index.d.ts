
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model cart_item
 * 
 */
export type cart_item = $Result.DefaultSelection<Prisma.$cart_itemPayload>
/**
 * Model liking_list
 * 
 */
export type liking_list = $Result.DefaultSelection<Prisma.$liking_listPayload>
/**
 * Model order_item
 * 
 */
export type order_item = $Result.DefaultSelection<Prisma.$order_itemPayload>
/**
 * Model orders
 * 
 */
export type orders = $Result.DefaultSelection<Prisma.$ordersPayload>
/**
 * Model paying
 * 
 */
export type paying = $Result.DefaultSelection<Prisma.$payingPayload>
/**
 * Model paying_info
 * 
 */
export type paying_info = $Result.DefaultSelection<Prisma.$paying_infoPayload>
/**
 * Model product
 * 
 */
export type product = $Result.DefaultSelection<Prisma.$productPayload>
/**
 * Model search_history
 * 
 */
export type search_history = $Result.DefaultSelection<Prisma.$search_historyPayload>
/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model user_phone
 * 
 */
export type user_phone = $Result.DefaultSelection<Prisma.$user_phonePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Cart_items
 * const cart_items = await prisma.cart_item.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Cart_items
   * const cart_items = await prisma.cart_item.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.cart_item`: Exposes CRUD operations for the **cart_item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cart_items
    * const cart_items = await prisma.cart_item.findMany()
    * ```
    */
  get cart_item(): Prisma.cart_itemDelegate<ExtArgs>;

  /**
   * `prisma.liking_list`: Exposes CRUD operations for the **liking_list** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Liking_lists
    * const liking_lists = await prisma.liking_list.findMany()
    * ```
    */
  get liking_list(): Prisma.liking_listDelegate<ExtArgs>;

  /**
   * `prisma.order_item`: Exposes CRUD operations for the **order_item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Order_items
    * const order_items = await prisma.order_item.findMany()
    * ```
    */
  get order_item(): Prisma.order_itemDelegate<ExtArgs>;

  /**
   * `prisma.orders`: Exposes CRUD operations for the **orders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.orders.findMany()
    * ```
    */
  get orders(): Prisma.ordersDelegate<ExtArgs>;

  /**
   * `prisma.paying`: Exposes CRUD operations for the **paying** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payings
    * const payings = await prisma.paying.findMany()
    * ```
    */
  get paying(): Prisma.payingDelegate<ExtArgs>;

  /**
   * `prisma.paying_info`: Exposes CRUD operations for the **paying_info** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Paying_infos
    * const paying_infos = await prisma.paying_info.findMany()
    * ```
    */
  get paying_info(): Prisma.paying_infoDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.productDelegate<ExtArgs>;

  /**
   * `prisma.search_history`: Exposes CRUD operations for the **search_history** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Search_histories
    * const search_histories = await prisma.search_history.findMany()
    * ```
    */
  get search_history(): Prisma.search_historyDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.user_phone`: Exposes CRUD operations for the **user_phone** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_phones
    * const user_phones = await prisma.user_phone.findMany()
    * ```
    */
  get user_phone(): Prisma.user_phoneDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    cart_item: 'cart_item',
    liking_list: 'liking_list',
    order_item: 'order_item',
    orders: 'orders',
    paying: 'paying',
    paying_info: 'paying_info',
    product: 'product',
    search_history: 'search_history',
    user: 'user',
    user_phone: 'user_phone'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'cart_item' | 'liking_list' | 'order_item' | 'orders' | 'paying' | 'paying_info' | 'product' | 'search_history' | 'user' | 'user_phone'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      cart_item: {
        payload: Prisma.$cart_itemPayload<ExtArgs>
        fields: Prisma.cart_itemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cart_itemFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cart_itemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cart_itemFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cart_itemPayload>
          }
          findFirst: {
            args: Prisma.cart_itemFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cart_itemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cart_itemFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cart_itemPayload>
          }
          findMany: {
            args: Prisma.cart_itemFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cart_itemPayload>[]
          }
          create: {
            args: Prisma.cart_itemCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cart_itemPayload>
          }
          createMany: {
            args: Prisma.cart_itemCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.cart_itemDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cart_itemPayload>
          }
          update: {
            args: Prisma.cart_itemUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cart_itemPayload>
          }
          deleteMany: {
            args: Prisma.cart_itemDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.cart_itemUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.cart_itemUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cart_itemPayload>
          }
          aggregate: {
            args: Prisma.Cart_itemAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCart_item>
          }
          groupBy: {
            args: Prisma.cart_itemGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Cart_itemGroupByOutputType>[]
          }
          count: {
            args: Prisma.cart_itemCountArgs<ExtArgs>,
            result: $Utils.Optional<Cart_itemCountAggregateOutputType> | number
          }
        }
      }
      liking_list: {
        payload: Prisma.$liking_listPayload<ExtArgs>
        fields: Prisma.liking_listFieldRefs
        operations: {
          findUnique: {
            args: Prisma.liking_listFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$liking_listPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.liking_listFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$liking_listPayload>
          }
          findFirst: {
            args: Prisma.liking_listFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$liking_listPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.liking_listFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$liking_listPayload>
          }
          findMany: {
            args: Prisma.liking_listFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$liking_listPayload>[]
          }
          create: {
            args: Prisma.liking_listCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$liking_listPayload>
          }
          createMany: {
            args: Prisma.liking_listCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.liking_listDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$liking_listPayload>
          }
          update: {
            args: Prisma.liking_listUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$liking_listPayload>
          }
          deleteMany: {
            args: Prisma.liking_listDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.liking_listUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.liking_listUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$liking_listPayload>
          }
          aggregate: {
            args: Prisma.Liking_listAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLiking_list>
          }
          groupBy: {
            args: Prisma.liking_listGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Liking_listGroupByOutputType>[]
          }
          count: {
            args: Prisma.liking_listCountArgs<ExtArgs>,
            result: $Utils.Optional<Liking_listCountAggregateOutputType> | number
          }
        }
      }
      order_item: {
        payload: Prisma.$order_itemPayload<ExtArgs>
        fields: Prisma.order_itemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.order_itemFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$order_itemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.order_itemFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$order_itemPayload>
          }
          findFirst: {
            args: Prisma.order_itemFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$order_itemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.order_itemFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$order_itemPayload>
          }
          findMany: {
            args: Prisma.order_itemFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$order_itemPayload>[]
          }
          create: {
            args: Prisma.order_itemCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$order_itemPayload>
          }
          createMany: {
            args: Prisma.order_itemCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.order_itemDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$order_itemPayload>
          }
          update: {
            args: Prisma.order_itemUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$order_itemPayload>
          }
          deleteMany: {
            args: Prisma.order_itemDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.order_itemUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.order_itemUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$order_itemPayload>
          }
          aggregate: {
            args: Prisma.Order_itemAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrder_item>
          }
          groupBy: {
            args: Prisma.order_itemGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Order_itemGroupByOutputType>[]
          }
          count: {
            args: Prisma.order_itemCountArgs<ExtArgs>,
            result: $Utils.Optional<Order_itemCountAggregateOutputType> | number
          }
        }
      }
      orders: {
        payload: Prisma.$ordersPayload<ExtArgs>
        fields: Prisma.ordersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ordersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ordersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          findFirst: {
            args: Prisma.ordersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ordersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          findMany: {
            args: Prisma.ordersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>[]
          }
          create: {
            args: Prisma.ordersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          createMany: {
            args: Prisma.ordersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ordersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          update: {
            args: Prisma.ordersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          deleteMany: {
            args: Prisma.ordersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ordersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ordersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          aggregate: {
            args: Prisma.OrdersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrders>
          }
          groupBy: {
            args: Prisma.ordersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrdersGroupByOutputType>[]
          }
          count: {
            args: Prisma.ordersCountArgs<ExtArgs>,
            result: $Utils.Optional<OrdersCountAggregateOutputType> | number
          }
        }
      }
      paying: {
        payload: Prisma.$payingPayload<ExtArgs>
        fields: Prisma.payingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.payingFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.payingFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payingPayload>
          }
          findFirst: {
            args: Prisma.payingFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.payingFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payingPayload>
          }
          findMany: {
            args: Prisma.payingFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payingPayload>[]
          }
          create: {
            args: Prisma.payingCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payingPayload>
          }
          createMany: {
            args: Prisma.payingCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.payingDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payingPayload>
          }
          update: {
            args: Prisma.payingUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payingPayload>
          }
          deleteMany: {
            args: Prisma.payingDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.payingUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.payingUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payingPayload>
          }
          aggregate: {
            args: Prisma.PayingAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePaying>
          }
          groupBy: {
            args: Prisma.payingGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PayingGroupByOutputType>[]
          }
          count: {
            args: Prisma.payingCountArgs<ExtArgs>,
            result: $Utils.Optional<PayingCountAggregateOutputType> | number
          }
        }
      }
      paying_info: {
        payload: Prisma.$paying_infoPayload<ExtArgs>
        fields: Prisma.paying_infoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.paying_infoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$paying_infoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.paying_infoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$paying_infoPayload>
          }
          findFirst: {
            args: Prisma.paying_infoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$paying_infoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.paying_infoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$paying_infoPayload>
          }
          findMany: {
            args: Prisma.paying_infoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$paying_infoPayload>[]
          }
          create: {
            args: Prisma.paying_infoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$paying_infoPayload>
          }
          createMany: {
            args: Prisma.paying_infoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.paying_infoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$paying_infoPayload>
          }
          update: {
            args: Prisma.paying_infoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$paying_infoPayload>
          }
          deleteMany: {
            args: Prisma.paying_infoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.paying_infoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.paying_infoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$paying_infoPayload>
          }
          aggregate: {
            args: Prisma.Paying_infoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePaying_info>
          }
          groupBy: {
            args: Prisma.paying_infoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Paying_infoGroupByOutputType>[]
          }
          count: {
            args: Prisma.paying_infoCountArgs<ExtArgs>,
            result: $Utils.Optional<Paying_infoCountAggregateOutputType> | number
          }
        }
      }
      product: {
        payload: Prisma.$productPayload<ExtArgs>
        fields: Prisma.productFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          findFirst: {
            args: Prisma.productFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          findMany: {
            args: Prisma.productFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productPayload>[]
          }
          create: {
            args: Prisma.productCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          createMany: {
            args: Prisma.productCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.productDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          update: {
            args: Prisma.productUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          deleteMany: {
            args: Prisma.productDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.productUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.productUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.productGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.productCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      search_history: {
        payload: Prisma.$search_historyPayload<ExtArgs>
        fields: Prisma.search_historyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.search_historyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$search_historyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.search_historyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$search_historyPayload>
          }
          findFirst: {
            args: Prisma.search_historyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$search_historyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.search_historyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$search_historyPayload>
          }
          findMany: {
            args: Prisma.search_historyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$search_historyPayload>[]
          }
          create: {
            args: Prisma.search_historyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$search_historyPayload>
          }
          createMany: {
            args: Prisma.search_historyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.search_historyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$search_historyPayload>
          }
          update: {
            args: Prisma.search_historyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$search_historyPayload>
          }
          deleteMany: {
            args: Prisma.search_historyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.search_historyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.search_historyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$search_historyPayload>
          }
          aggregate: {
            args: Prisma.Search_historyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSearch_history>
          }
          groupBy: {
            args: Prisma.search_historyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Search_historyGroupByOutputType>[]
          }
          count: {
            args: Prisma.search_historyCountArgs<ExtArgs>,
            result: $Utils.Optional<Search_historyCountAggregateOutputType> | number
          }
        }
      }
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      user_phone: {
        payload: Prisma.$user_phonePayload<ExtArgs>
        fields: Prisma.user_phoneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_phoneFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_phonePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_phoneFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_phonePayload>
          }
          findFirst: {
            args: Prisma.user_phoneFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_phonePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_phoneFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_phonePayload>
          }
          findMany: {
            args: Prisma.user_phoneFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_phonePayload>[]
          }
          create: {
            args: Prisma.user_phoneCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_phonePayload>
          }
          createMany: {
            args: Prisma.user_phoneCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.user_phoneDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_phonePayload>
          }
          update: {
            args: Prisma.user_phoneUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_phonePayload>
          }
          deleteMany: {
            args: Prisma.user_phoneDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.user_phoneUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.user_phoneUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_phonePayload>
          }
          aggregate: {
            args: Prisma.User_phoneAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser_phone>
          }
          groupBy: {
            args: Prisma.user_phoneGroupByArgs<ExtArgs>,
            result: $Utils.Optional<User_phoneGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_phoneCountArgs<ExtArgs>,
            result: $Utils.Optional<User_phoneCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type OrdersCountOutputType
   */

  export type OrdersCountOutputType = {
    order_item: number
    paying: number
  }

  export type OrdersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order_item?: boolean | OrdersCountOutputTypeCountOrder_itemArgs
    paying?: boolean | OrdersCountOutputTypeCountPayingArgs
  }

  // Custom InputTypes
  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersCountOutputType
     */
    select?: OrdersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeCountOrder_itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: order_itemWhereInput
  }

  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeCountPayingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payingWhereInput
  }


  /**
   * Count Type Paying_infoCountOutputType
   */

  export type Paying_infoCountOutputType = {
    paying: number
  }

  export type Paying_infoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paying?: boolean | Paying_infoCountOutputTypeCountPayingArgs
  }

  // Custom InputTypes
  /**
   * Paying_infoCountOutputType without action
   */
  export type Paying_infoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paying_infoCountOutputType
     */
    select?: Paying_infoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Paying_infoCountOutputType without action
   */
  export type Paying_infoCountOutputTypeCountPayingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payingWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    cart_item: number
    liking_list: number
    order_item: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cart_item?: boolean | ProductCountOutputTypeCountCart_itemArgs
    liking_list?: boolean | ProductCountOutputTypeCountLiking_listArgs
    order_item?: boolean | ProductCountOutputTypeCountOrder_itemArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountCart_itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cart_itemWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountLiking_listArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: liking_listWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountOrder_itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: order_itemWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    cart_item: number
    liking_list: number
    orders: number
    search_history: number
    user_phone: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cart_item?: boolean | UserCountOutputTypeCountCart_itemArgs
    liking_list?: boolean | UserCountOutputTypeCountLiking_listArgs
    orders?: boolean | UserCountOutputTypeCountOrdersArgs
    search_history?: boolean | UserCountOutputTypeCountSearch_historyArgs
    user_phone?: boolean | UserCountOutputTypeCountUser_phoneArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCart_itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cart_itemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLiking_listArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: liking_listWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSearch_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: search_historyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUser_phoneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_phoneWhereInput
  }


  /**
   * Models
   */

  /**
   * Model cart_item
   */

  export type AggregateCart_item = {
    _count: Cart_itemCountAggregateOutputType | null
    _avg: Cart_itemAvgAggregateOutputType | null
    _sum: Cart_itemSumAggregateOutputType | null
    _min: Cart_itemMinAggregateOutputType | null
    _max: Cart_itemMaxAggregateOutputType | null
  }

  export type Cart_itemAvgAggregateOutputType = {
    cart_ID: number | null
    product_ID: number | null
    quantity: number | null
    prices: Decimal | null
  }

  export type Cart_itemSumAggregateOutputType = {
    cart_ID: number | null
    product_ID: number | null
    quantity: number | null
    prices: Decimal | null
  }

  export type Cart_itemMinAggregateOutputType = {
    cart_ID: number | null
    product_ID: number | null
    quantity: number | null
    prices: Decimal | null
  }

  export type Cart_itemMaxAggregateOutputType = {
    cart_ID: number | null
    product_ID: number | null
    quantity: number | null
    prices: Decimal | null
  }

  export type Cart_itemCountAggregateOutputType = {
    cart_ID: number
    product_ID: number
    quantity: number
    prices: number
    _all: number
  }


  export type Cart_itemAvgAggregateInputType = {
    cart_ID?: true
    product_ID?: true
    quantity?: true
    prices?: true
  }

  export type Cart_itemSumAggregateInputType = {
    cart_ID?: true
    product_ID?: true
    quantity?: true
    prices?: true
  }

  export type Cart_itemMinAggregateInputType = {
    cart_ID?: true
    product_ID?: true
    quantity?: true
    prices?: true
  }

  export type Cart_itemMaxAggregateInputType = {
    cart_ID?: true
    product_ID?: true
    quantity?: true
    prices?: true
  }

  export type Cart_itemCountAggregateInputType = {
    cart_ID?: true
    product_ID?: true
    quantity?: true
    prices?: true
    _all?: true
  }

  export type Cart_itemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cart_item to aggregate.
     */
    where?: cart_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cart_items to fetch.
     */
    orderBy?: cart_itemOrderByWithRelationInput | cart_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cart_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cart_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cart_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cart_items
    **/
    _count?: true | Cart_itemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Cart_itemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Cart_itemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cart_itemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cart_itemMaxAggregateInputType
  }

  export type GetCart_itemAggregateType<T extends Cart_itemAggregateArgs> = {
        [P in keyof T & keyof AggregateCart_item]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCart_item[P]>
      : GetScalarType<T[P], AggregateCart_item[P]>
  }




  export type cart_itemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cart_itemWhereInput
    orderBy?: cart_itemOrderByWithAggregationInput | cart_itemOrderByWithAggregationInput[]
    by: Cart_itemScalarFieldEnum[] | Cart_itemScalarFieldEnum
    having?: cart_itemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cart_itemCountAggregateInputType | true
    _avg?: Cart_itemAvgAggregateInputType
    _sum?: Cart_itemSumAggregateInputType
    _min?: Cart_itemMinAggregateInputType
    _max?: Cart_itemMaxAggregateInputType
  }

  export type Cart_itemGroupByOutputType = {
    cart_ID: number
    product_ID: number
    quantity: number
    prices: Decimal | null
    _count: Cart_itemCountAggregateOutputType | null
    _avg: Cart_itemAvgAggregateOutputType | null
    _sum: Cart_itemSumAggregateOutputType | null
    _min: Cart_itemMinAggregateOutputType | null
    _max: Cart_itemMaxAggregateOutputType | null
  }

  type GetCart_itemGroupByPayload<T extends cart_itemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Cart_itemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cart_itemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cart_itemGroupByOutputType[P]>
            : GetScalarType<T[P], Cart_itemGroupByOutputType[P]>
        }
      >
    >


  export type cart_itemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cart_ID?: boolean
    product_ID?: boolean
    quantity?: boolean
    prices?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cart_item"]>

  export type cart_itemSelectScalar = {
    cart_ID?: boolean
    product_ID?: boolean
    quantity?: boolean
    prices?: boolean
  }


  export type cart_itemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }


  export type $cart_itemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cart_item"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      product: Prisma.$productPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      cart_ID: number
      product_ID: number
      quantity: number
      prices: Prisma.Decimal | null
    }, ExtArgs["result"]["cart_item"]>
    composites: {}
  }


  type cart_itemGetPayload<S extends boolean | null | undefined | cart_itemDefaultArgs> = $Result.GetResult<Prisma.$cart_itemPayload, S>

  type cart_itemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<cart_itemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Cart_itemCountAggregateInputType | true
    }

  export interface cart_itemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cart_item'], meta: { name: 'cart_item' } }
    /**
     * Find zero or one Cart_item that matches the filter.
     * @param {cart_itemFindUniqueArgs} args - Arguments to find a Cart_item
     * @example
     * // Get one Cart_item
     * const cart_item = await prisma.cart_item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cart_itemFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, cart_itemFindUniqueArgs<ExtArgs>>
    ): Prisma__cart_itemClient<$Result.GetResult<Prisma.$cart_itemPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cart_item that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {cart_itemFindUniqueOrThrowArgs} args - Arguments to find a Cart_item
     * @example
     * // Get one Cart_item
     * const cart_item = await prisma.cart_item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends cart_itemFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cart_itemFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__cart_itemClient<$Result.GetResult<Prisma.$cart_itemPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cart_item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cart_itemFindFirstArgs} args - Arguments to find a Cart_item
     * @example
     * // Get one Cart_item
     * const cart_item = await prisma.cart_item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cart_itemFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, cart_itemFindFirstArgs<ExtArgs>>
    ): Prisma__cart_itemClient<$Result.GetResult<Prisma.$cart_itemPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cart_item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cart_itemFindFirstOrThrowArgs} args - Arguments to find a Cart_item
     * @example
     * // Get one Cart_item
     * const cart_item = await prisma.cart_item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends cart_itemFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cart_itemFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__cart_itemClient<$Result.GetResult<Prisma.$cart_itemPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cart_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cart_itemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cart_items
     * const cart_items = await prisma.cart_item.findMany()
     * 
     * // Get first 10 Cart_items
     * const cart_items = await prisma.cart_item.findMany({ take: 10 })
     * 
     * // Only select the `cart_ID`
     * const cart_itemWithCart_IDOnly = await prisma.cart_item.findMany({ select: { cart_ID: true } })
     * 
    **/
    findMany<T extends cart_itemFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cart_itemFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cart_itemPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cart_item.
     * @param {cart_itemCreateArgs} args - Arguments to create a Cart_item.
     * @example
     * // Create one Cart_item
     * const Cart_item = await prisma.cart_item.create({
     *   data: {
     *     // ... data to create a Cart_item
     *   }
     * })
     * 
    **/
    create<T extends cart_itemCreateArgs<ExtArgs>>(
      args: SelectSubset<T, cart_itemCreateArgs<ExtArgs>>
    ): Prisma__cart_itemClient<$Result.GetResult<Prisma.$cart_itemPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Cart_items.
     * @param {cart_itemCreateManyArgs} args - Arguments to create many Cart_items.
     * @example
     * // Create many Cart_items
     * const cart_item = await prisma.cart_item.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends cart_itemCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cart_itemCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cart_item.
     * @param {cart_itemDeleteArgs} args - Arguments to delete one Cart_item.
     * @example
     * // Delete one Cart_item
     * const Cart_item = await prisma.cart_item.delete({
     *   where: {
     *     // ... filter to delete one Cart_item
     *   }
     * })
     * 
    **/
    delete<T extends cart_itemDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, cart_itemDeleteArgs<ExtArgs>>
    ): Prisma__cart_itemClient<$Result.GetResult<Prisma.$cart_itemPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cart_item.
     * @param {cart_itemUpdateArgs} args - Arguments to update one Cart_item.
     * @example
     * // Update one Cart_item
     * const cart_item = await prisma.cart_item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cart_itemUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, cart_itemUpdateArgs<ExtArgs>>
    ): Prisma__cart_itemClient<$Result.GetResult<Prisma.$cart_itemPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cart_items.
     * @param {cart_itemDeleteManyArgs} args - Arguments to filter Cart_items to delete.
     * @example
     * // Delete a few Cart_items
     * const { count } = await prisma.cart_item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cart_itemDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cart_itemDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cart_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cart_itemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cart_items
     * const cart_item = await prisma.cart_item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cart_itemUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, cart_itemUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cart_item.
     * @param {cart_itemUpsertArgs} args - Arguments to update or create a Cart_item.
     * @example
     * // Update or create a Cart_item
     * const cart_item = await prisma.cart_item.upsert({
     *   create: {
     *     // ... data to create a Cart_item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cart_item we want to update
     *   }
     * })
    **/
    upsert<T extends cart_itemUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, cart_itemUpsertArgs<ExtArgs>>
    ): Prisma__cart_itemClient<$Result.GetResult<Prisma.$cart_itemPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cart_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cart_itemCountArgs} args - Arguments to filter Cart_items to count.
     * @example
     * // Count the number of Cart_items
     * const count = await prisma.cart_item.count({
     *   where: {
     *     // ... the filter for the Cart_items we want to count
     *   }
     * })
    **/
    count<T extends cart_itemCountArgs>(
      args?: Subset<T, cart_itemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cart_itemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cart_item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cart_itemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cart_itemAggregateArgs>(args: Subset<T, Cart_itemAggregateArgs>): Prisma.PrismaPromise<GetCart_itemAggregateType<T>>

    /**
     * Group by Cart_item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cart_itemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cart_itemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cart_itemGroupByArgs['orderBy'] }
        : { orderBy?: cart_itemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cart_itemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCart_itemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cart_item model
   */
  readonly fields: cart_itemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cart_item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cart_itemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    product<T extends productDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productDefaultArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the cart_item model
   */ 
  interface cart_itemFieldRefs {
    readonly cart_ID: FieldRef<"cart_item", 'Int'>
    readonly product_ID: FieldRef<"cart_item", 'Int'>
    readonly quantity: FieldRef<"cart_item", 'Int'>
    readonly prices: FieldRef<"cart_item", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * cart_item findUnique
   */
  export type cart_itemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cart_item
     */
    select?: cart_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cart_itemInclude<ExtArgs> | null
    /**
     * Filter, which cart_item to fetch.
     */
    where: cart_itemWhereUniqueInput
  }

  /**
   * cart_item findUniqueOrThrow
   */
  export type cart_itemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cart_item
     */
    select?: cart_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cart_itemInclude<ExtArgs> | null
    /**
     * Filter, which cart_item to fetch.
     */
    where: cart_itemWhereUniqueInput
  }

  /**
   * cart_item findFirst
   */
  export type cart_itemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cart_item
     */
    select?: cart_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cart_itemInclude<ExtArgs> | null
    /**
     * Filter, which cart_item to fetch.
     */
    where?: cart_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cart_items to fetch.
     */
    orderBy?: cart_itemOrderByWithRelationInput | cart_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cart_items.
     */
    cursor?: cart_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cart_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cart_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cart_items.
     */
    distinct?: Cart_itemScalarFieldEnum | Cart_itemScalarFieldEnum[]
  }

  /**
   * cart_item findFirstOrThrow
   */
  export type cart_itemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cart_item
     */
    select?: cart_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cart_itemInclude<ExtArgs> | null
    /**
     * Filter, which cart_item to fetch.
     */
    where?: cart_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cart_items to fetch.
     */
    orderBy?: cart_itemOrderByWithRelationInput | cart_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cart_items.
     */
    cursor?: cart_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cart_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cart_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cart_items.
     */
    distinct?: Cart_itemScalarFieldEnum | Cart_itemScalarFieldEnum[]
  }

  /**
   * cart_item findMany
   */
  export type cart_itemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cart_item
     */
    select?: cart_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cart_itemInclude<ExtArgs> | null
    /**
     * Filter, which cart_items to fetch.
     */
    where?: cart_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cart_items to fetch.
     */
    orderBy?: cart_itemOrderByWithRelationInput | cart_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cart_items.
     */
    cursor?: cart_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cart_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cart_items.
     */
    skip?: number
    distinct?: Cart_itemScalarFieldEnum | Cart_itemScalarFieldEnum[]
  }

  /**
   * cart_item create
   */
  export type cart_itemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cart_item
     */
    select?: cart_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cart_itemInclude<ExtArgs> | null
    /**
     * The data needed to create a cart_item.
     */
    data: XOR<cart_itemCreateInput, cart_itemUncheckedCreateInput>
  }

  /**
   * cart_item createMany
   */
  export type cart_itemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cart_items.
     */
    data: cart_itemCreateManyInput | cart_itemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cart_item update
   */
  export type cart_itemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cart_item
     */
    select?: cart_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cart_itemInclude<ExtArgs> | null
    /**
     * The data needed to update a cart_item.
     */
    data: XOR<cart_itemUpdateInput, cart_itemUncheckedUpdateInput>
    /**
     * Choose, which cart_item to update.
     */
    where: cart_itemWhereUniqueInput
  }

  /**
   * cart_item updateMany
   */
  export type cart_itemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cart_items.
     */
    data: XOR<cart_itemUpdateManyMutationInput, cart_itemUncheckedUpdateManyInput>
    /**
     * Filter which cart_items to update
     */
    where?: cart_itemWhereInput
  }

  /**
   * cart_item upsert
   */
  export type cart_itemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cart_item
     */
    select?: cart_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cart_itemInclude<ExtArgs> | null
    /**
     * The filter to search for the cart_item to update in case it exists.
     */
    where: cart_itemWhereUniqueInput
    /**
     * In case the cart_item found by the `where` argument doesn't exist, create a new cart_item with this data.
     */
    create: XOR<cart_itemCreateInput, cart_itemUncheckedCreateInput>
    /**
     * In case the cart_item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cart_itemUpdateInput, cart_itemUncheckedUpdateInput>
  }

  /**
   * cart_item delete
   */
  export type cart_itemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cart_item
     */
    select?: cart_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cart_itemInclude<ExtArgs> | null
    /**
     * Filter which cart_item to delete.
     */
    where: cart_itemWhereUniqueInput
  }

  /**
   * cart_item deleteMany
   */
  export type cart_itemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cart_items to delete
     */
    where?: cart_itemWhereInput
  }

  /**
   * cart_item without action
   */
  export type cart_itemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cart_item
     */
    select?: cart_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cart_itemInclude<ExtArgs> | null
  }


  /**
   * Model liking_list
   */

  export type AggregateLiking_list = {
    _count: Liking_listCountAggregateOutputType | null
    _avg: Liking_listAvgAggregateOutputType | null
    _sum: Liking_listSumAggregateOutputType | null
    _min: Liking_listMinAggregateOutputType | null
    _max: Liking_listMaxAggregateOutputType | null
  }

  export type Liking_listAvgAggregateOutputType = {
    user_ID: number | null
    product_ID: number | null
  }

  export type Liking_listSumAggregateOutputType = {
    user_ID: number | null
    product_ID: number | null
  }

  export type Liking_listMinAggregateOutputType = {
    user_ID: number | null
    product_ID: number | null
  }

  export type Liking_listMaxAggregateOutputType = {
    user_ID: number | null
    product_ID: number | null
  }

  export type Liking_listCountAggregateOutputType = {
    user_ID: number
    product_ID: number
    _all: number
  }


  export type Liking_listAvgAggregateInputType = {
    user_ID?: true
    product_ID?: true
  }

  export type Liking_listSumAggregateInputType = {
    user_ID?: true
    product_ID?: true
  }

  export type Liking_listMinAggregateInputType = {
    user_ID?: true
    product_ID?: true
  }

  export type Liking_listMaxAggregateInputType = {
    user_ID?: true
    product_ID?: true
  }

  export type Liking_listCountAggregateInputType = {
    user_ID?: true
    product_ID?: true
    _all?: true
  }

  export type Liking_listAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which liking_list to aggregate.
     */
    where?: liking_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of liking_lists to fetch.
     */
    orderBy?: liking_listOrderByWithRelationInput | liking_listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: liking_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` liking_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` liking_lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned liking_lists
    **/
    _count?: true | Liking_listCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Liking_listAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Liking_listSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Liking_listMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Liking_listMaxAggregateInputType
  }

  export type GetLiking_listAggregateType<T extends Liking_listAggregateArgs> = {
        [P in keyof T & keyof AggregateLiking_list]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLiking_list[P]>
      : GetScalarType<T[P], AggregateLiking_list[P]>
  }




  export type liking_listGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: liking_listWhereInput
    orderBy?: liking_listOrderByWithAggregationInput | liking_listOrderByWithAggregationInput[]
    by: Liking_listScalarFieldEnum[] | Liking_listScalarFieldEnum
    having?: liking_listScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Liking_listCountAggregateInputType | true
    _avg?: Liking_listAvgAggregateInputType
    _sum?: Liking_listSumAggregateInputType
    _min?: Liking_listMinAggregateInputType
    _max?: Liking_listMaxAggregateInputType
  }

  export type Liking_listGroupByOutputType = {
    user_ID: number
    product_ID: number
    _count: Liking_listCountAggregateOutputType | null
    _avg: Liking_listAvgAggregateOutputType | null
    _sum: Liking_listSumAggregateOutputType | null
    _min: Liking_listMinAggregateOutputType | null
    _max: Liking_listMaxAggregateOutputType | null
  }

  type GetLiking_listGroupByPayload<T extends liking_listGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Liking_listGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Liking_listGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Liking_listGroupByOutputType[P]>
            : GetScalarType<T[P], Liking_listGroupByOutputType[P]>
        }
      >
    >


  export type liking_listSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_ID?: boolean
    product_ID?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["liking_list"]>

  export type liking_listSelectScalar = {
    user_ID?: boolean
    product_ID?: boolean
  }


  export type liking_listInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }


  export type $liking_listPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "liking_list"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      product: Prisma.$productPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      user_ID: number
      product_ID: number
    }, ExtArgs["result"]["liking_list"]>
    composites: {}
  }


  type liking_listGetPayload<S extends boolean | null | undefined | liking_listDefaultArgs> = $Result.GetResult<Prisma.$liking_listPayload, S>

  type liking_listCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<liking_listFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Liking_listCountAggregateInputType | true
    }

  export interface liking_listDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['liking_list'], meta: { name: 'liking_list' } }
    /**
     * Find zero or one Liking_list that matches the filter.
     * @param {liking_listFindUniqueArgs} args - Arguments to find a Liking_list
     * @example
     * // Get one Liking_list
     * const liking_list = await prisma.liking_list.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends liking_listFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, liking_listFindUniqueArgs<ExtArgs>>
    ): Prisma__liking_listClient<$Result.GetResult<Prisma.$liking_listPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Liking_list that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {liking_listFindUniqueOrThrowArgs} args - Arguments to find a Liking_list
     * @example
     * // Get one Liking_list
     * const liking_list = await prisma.liking_list.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends liking_listFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, liking_listFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__liking_listClient<$Result.GetResult<Prisma.$liking_listPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Liking_list that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {liking_listFindFirstArgs} args - Arguments to find a Liking_list
     * @example
     * // Get one Liking_list
     * const liking_list = await prisma.liking_list.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends liking_listFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, liking_listFindFirstArgs<ExtArgs>>
    ): Prisma__liking_listClient<$Result.GetResult<Prisma.$liking_listPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Liking_list that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {liking_listFindFirstOrThrowArgs} args - Arguments to find a Liking_list
     * @example
     * // Get one Liking_list
     * const liking_list = await prisma.liking_list.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends liking_listFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, liking_listFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__liking_listClient<$Result.GetResult<Prisma.$liking_listPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Liking_lists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {liking_listFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Liking_lists
     * const liking_lists = await prisma.liking_list.findMany()
     * 
     * // Get first 10 Liking_lists
     * const liking_lists = await prisma.liking_list.findMany({ take: 10 })
     * 
     * // Only select the `user_ID`
     * const liking_listWithUser_IDOnly = await prisma.liking_list.findMany({ select: { user_ID: true } })
     * 
    **/
    findMany<T extends liking_listFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, liking_listFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$liking_listPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Liking_list.
     * @param {liking_listCreateArgs} args - Arguments to create a Liking_list.
     * @example
     * // Create one Liking_list
     * const Liking_list = await prisma.liking_list.create({
     *   data: {
     *     // ... data to create a Liking_list
     *   }
     * })
     * 
    **/
    create<T extends liking_listCreateArgs<ExtArgs>>(
      args: SelectSubset<T, liking_listCreateArgs<ExtArgs>>
    ): Prisma__liking_listClient<$Result.GetResult<Prisma.$liking_listPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Liking_lists.
     * @param {liking_listCreateManyArgs} args - Arguments to create many Liking_lists.
     * @example
     * // Create many Liking_lists
     * const liking_list = await prisma.liking_list.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends liking_listCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, liking_listCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Liking_list.
     * @param {liking_listDeleteArgs} args - Arguments to delete one Liking_list.
     * @example
     * // Delete one Liking_list
     * const Liking_list = await prisma.liking_list.delete({
     *   where: {
     *     // ... filter to delete one Liking_list
     *   }
     * })
     * 
    **/
    delete<T extends liking_listDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, liking_listDeleteArgs<ExtArgs>>
    ): Prisma__liking_listClient<$Result.GetResult<Prisma.$liking_listPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Liking_list.
     * @param {liking_listUpdateArgs} args - Arguments to update one Liking_list.
     * @example
     * // Update one Liking_list
     * const liking_list = await prisma.liking_list.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends liking_listUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, liking_listUpdateArgs<ExtArgs>>
    ): Prisma__liking_listClient<$Result.GetResult<Prisma.$liking_listPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Liking_lists.
     * @param {liking_listDeleteManyArgs} args - Arguments to filter Liking_lists to delete.
     * @example
     * // Delete a few Liking_lists
     * const { count } = await prisma.liking_list.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends liking_listDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, liking_listDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Liking_lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {liking_listUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Liking_lists
     * const liking_list = await prisma.liking_list.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends liking_listUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, liking_listUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Liking_list.
     * @param {liking_listUpsertArgs} args - Arguments to update or create a Liking_list.
     * @example
     * // Update or create a Liking_list
     * const liking_list = await prisma.liking_list.upsert({
     *   create: {
     *     // ... data to create a Liking_list
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Liking_list we want to update
     *   }
     * })
    **/
    upsert<T extends liking_listUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, liking_listUpsertArgs<ExtArgs>>
    ): Prisma__liking_listClient<$Result.GetResult<Prisma.$liking_listPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Liking_lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {liking_listCountArgs} args - Arguments to filter Liking_lists to count.
     * @example
     * // Count the number of Liking_lists
     * const count = await prisma.liking_list.count({
     *   where: {
     *     // ... the filter for the Liking_lists we want to count
     *   }
     * })
    **/
    count<T extends liking_listCountArgs>(
      args?: Subset<T, liking_listCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Liking_listCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Liking_list.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Liking_listAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Liking_listAggregateArgs>(args: Subset<T, Liking_listAggregateArgs>): Prisma.PrismaPromise<GetLiking_listAggregateType<T>>

    /**
     * Group by Liking_list.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {liking_listGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends liking_listGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: liking_listGroupByArgs['orderBy'] }
        : { orderBy?: liking_listGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, liking_listGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLiking_listGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the liking_list model
   */
  readonly fields: liking_listFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for liking_list.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__liking_listClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    product<T extends productDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productDefaultArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the liking_list model
   */ 
  interface liking_listFieldRefs {
    readonly user_ID: FieldRef<"liking_list", 'Int'>
    readonly product_ID: FieldRef<"liking_list", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * liking_list findUnique
   */
  export type liking_listFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the liking_list
     */
    select?: liking_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: liking_listInclude<ExtArgs> | null
    /**
     * Filter, which liking_list to fetch.
     */
    where: liking_listWhereUniqueInput
  }

  /**
   * liking_list findUniqueOrThrow
   */
  export type liking_listFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the liking_list
     */
    select?: liking_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: liking_listInclude<ExtArgs> | null
    /**
     * Filter, which liking_list to fetch.
     */
    where: liking_listWhereUniqueInput
  }

  /**
   * liking_list findFirst
   */
  export type liking_listFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the liking_list
     */
    select?: liking_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: liking_listInclude<ExtArgs> | null
    /**
     * Filter, which liking_list to fetch.
     */
    where?: liking_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of liking_lists to fetch.
     */
    orderBy?: liking_listOrderByWithRelationInput | liking_listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for liking_lists.
     */
    cursor?: liking_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` liking_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` liking_lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of liking_lists.
     */
    distinct?: Liking_listScalarFieldEnum | Liking_listScalarFieldEnum[]
  }

  /**
   * liking_list findFirstOrThrow
   */
  export type liking_listFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the liking_list
     */
    select?: liking_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: liking_listInclude<ExtArgs> | null
    /**
     * Filter, which liking_list to fetch.
     */
    where?: liking_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of liking_lists to fetch.
     */
    orderBy?: liking_listOrderByWithRelationInput | liking_listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for liking_lists.
     */
    cursor?: liking_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` liking_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` liking_lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of liking_lists.
     */
    distinct?: Liking_listScalarFieldEnum | Liking_listScalarFieldEnum[]
  }

  /**
   * liking_list findMany
   */
  export type liking_listFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the liking_list
     */
    select?: liking_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: liking_listInclude<ExtArgs> | null
    /**
     * Filter, which liking_lists to fetch.
     */
    where?: liking_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of liking_lists to fetch.
     */
    orderBy?: liking_listOrderByWithRelationInput | liking_listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing liking_lists.
     */
    cursor?: liking_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` liking_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` liking_lists.
     */
    skip?: number
    distinct?: Liking_listScalarFieldEnum | Liking_listScalarFieldEnum[]
  }

  /**
   * liking_list create
   */
  export type liking_listCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the liking_list
     */
    select?: liking_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: liking_listInclude<ExtArgs> | null
    /**
     * The data needed to create a liking_list.
     */
    data: XOR<liking_listCreateInput, liking_listUncheckedCreateInput>
  }

  /**
   * liking_list createMany
   */
  export type liking_listCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many liking_lists.
     */
    data: liking_listCreateManyInput | liking_listCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * liking_list update
   */
  export type liking_listUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the liking_list
     */
    select?: liking_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: liking_listInclude<ExtArgs> | null
    /**
     * The data needed to update a liking_list.
     */
    data: XOR<liking_listUpdateInput, liking_listUncheckedUpdateInput>
    /**
     * Choose, which liking_list to update.
     */
    where: liking_listWhereUniqueInput
  }

  /**
   * liking_list updateMany
   */
  export type liking_listUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update liking_lists.
     */
    data: XOR<liking_listUpdateManyMutationInput, liking_listUncheckedUpdateManyInput>
    /**
     * Filter which liking_lists to update
     */
    where?: liking_listWhereInput
  }

  /**
   * liking_list upsert
   */
  export type liking_listUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the liking_list
     */
    select?: liking_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: liking_listInclude<ExtArgs> | null
    /**
     * The filter to search for the liking_list to update in case it exists.
     */
    where: liking_listWhereUniqueInput
    /**
     * In case the liking_list found by the `where` argument doesn't exist, create a new liking_list with this data.
     */
    create: XOR<liking_listCreateInput, liking_listUncheckedCreateInput>
    /**
     * In case the liking_list was found with the provided `where` argument, update it with this data.
     */
    update: XOR<liking_listUpdateInput, liking_listUncheckedUpdateInput>
  }

  /**
   * liking_list delete
   */
  export type liking_listDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the liking_list
     */
    select?: liking_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: liking_listInclude<ExtArgs> | null
    /**
     * Filter which liking_list to delete.
     */
    where: liking_listWhereUniqueInput
  }

  /**
   * liking_list deleteMany
   */
  export type liking_listDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which liking_lists to delete
     */
    where?: liking_listWhereInput
  }

  /**
   * liking_list without action
   */
  export type liking_listDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the liking_list
     */
    select?: liking_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: liking_listInclude<ExtArgs> | null
  }


  /**
   * Model order_item
   */

  export type AggregateOrder_item = {
    _count: Order_itemCountAggregateOutputType | null
    _avg: Order_itemAvgAggregateOutputType | null
    _sum: Order_itemSumAggregateOutputType | null
    _min: Order_itemMinAggregateOutputType | null
    _max: Order_itemMaxAggregateOutputType | null
  }

  export type Order_itemAvgAggregateOutputType = {
    order_ID: number | null
    product_ID: number | null
    quantity: number | null
    prices: Decimal | null
  }

  export type Order_itemSumAggregateOutputType = {
    order_ID: number | null
    product_ID: number | null
    quantity: number | null
    prices: Decimal | null
  }

  export type Order_itemMinAggregateOutputType = {
    order_ID: number | null
    product_ID: number | null
    quantity: number | null
    prices: Decimal | null
  }

  export type Order_itemMaxAggregateOutputType = {
    order_ID: number | null
    product_ID: number | null
    quantity: number | null
    prices: Decimal | null
  }

  export type Order_itemCountAggregateOutputType = {
    order_ID: number
    product_ID: number
    quantity: number
    prices: number
    _all: number
  }


  export type Order_itemAvgAggregateInputType = {
    order_ID?: true
    product_ID?: true
    quantity?: true
    prices?: true
  }

  export type Order_itemSumAggregateInputType = {
    order_ID?: true
    product_ID?: true
    quantity?: true
    prices?: true
  }

  export type Order_itemMinAggregateInputType = {
    order_ID?: true
    product_ID?: true
    quantity?: true
    prices?: true
  }

  export type Order_itemMaxAggregateInputType = {
    order_ID?: true
    product_ID?: true
    quantity?: true
    prices?: true
  }

  export type Order_itemCountAggregateInputType = {
    order_ID?: true
    product_ID?: true
    quantity?: true
    prices?: true
    _all?: true
  }

  export type Order_itemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which order_item to aggregate.
     */
    where?: order_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_items to fetch.
     */
    orderBy?: order_itemOrderByWithRelationInput | order_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: order_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned order_items
    **/
    _count?: true | Order_itemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Order_itemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Order_itemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Order_itemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Order_itemMaxAggregateInputType
  }

  export type GetOrder_itemAggregateType<T extends Order_itemAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder_item]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder_item[P]>
      : GetScalarType<T[P], AggregateOrder_item[P]>
  }




  export type order_itemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: order_itemWhereInput
    orderBy?: order_itemOrderByWithAggregationInput | order_itemOrderByWithAggregationInput[]
    by: Order_itemScalarFieldEnum[] | Order_itemScalarFieldEnum
    having?: order_itemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Order_itemCountAggregateInputType | true
    _avg?: Order_itemAvgAggregateInputType
    _sum?: Order_itemSumAggregateInputType
    _min?: Order_itemMinAggregateInputType
    _max?: Order_itemMaxAggregateInputType
  }

  export type Order_itemGroupByOutputType = {
    order_ID: number
    product_ID: number
    quantity: number
    prices: Decimal | null
    _count: Order_itemCountAggregateOutputType | null
    _avg: Order_itemAvgAggregateOutputType | null
    _sum: Order_itemSumAggregateOutputType | null
    _min: Order_itemMinAggregateOutputType | null
    _max: Order_itemMaxAggregateOutputType | null
  }

  type GetOrder_itemGroupByPayload<T extends order_itemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Order_itemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Order_itemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Order_itemGroupByOutputType[P]>
            : GetScalarType<T[P], Order_itemGroupByOutputType[P]>
        }
      >
    >


  export type order_itemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    order_ID?: boolean
    product_ID?: boolean
    quantity?: boolean
    prices?: boolean
    orders?: boolean | ordersDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order_item"]>

  export type order_itemSelectScalar = {
    order_ID?: boolean
    product_ID?: boolean
    quantity?: boolean
    prices?: boolean
  }


  export type order_itemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | ordersDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }


  export type $order_itemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "order_item"
    objects: {
      orders: Prisma.$ordersPayload<ExtArgs>
      product: Prisma.$productPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      order_ID: number
      product_ID: number
      quantity: number
      prices: Prisma.Decimal | null
    }, ExtArgs["result"]["order_item"]>
    composites: {}
  }


  type order_itemGetPayload<S extends boolean | null | undefined | order_itemDefaultArgs> = $Result.GetResult<Prisma.$order_itemPayload, S>

  type order_itemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<order_itemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Order_itemCountAggregateInputType | true
    }

  export interface order_itemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['order_item'], meta: { name: 'order_item' } }
    /**
     * Find zero or one Order_item that matches the filter.
     * @param {order_itemFindUniqueArgs} args - Arguments to find a Order_item
     * @example
     * // Get one Order_item
     * const order_item = await prisma.order_item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends order_itemFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, order_itemFindUniqueArgs<ExtArgs>>
    ): Prisma__order_itemClient<$Result.GetResult<Prisma.$order_itemPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Order_item that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {order_itemFindUniqueOrThrowArgs} args - Arguments to find a Order_item
     * @example
     * // Get one Order_item
     * const order_item = await prisma.order_item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends order_itemFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, order_itemFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__order_itemClient<$Result.GetResult<Prisma.$order_itemPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Order_item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_itemFindFirstArgs} args - Arguments to find a Order_item
     * @example
     * // Get one Order_item
     * const order_item = await prisma.order_item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends order_itemFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, order_itemFindFirstArgs<ExtArgs>>
    ): Prisma__order_itemClient<$Result.GetResult<Prisma.$order_itemPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Order_item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_itemFindFirstOrThrowArgs} args - Arguments to find a Order_item
     * @example
     * // Get one Order_item
     * const order_item = await prisma.order_item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends order_itemFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, order_itemFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__order_itemClient<$Result.GetResult<Prisma.$order_itemPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Order_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_itemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Order_items
     * const order_items = await prisma.order_item.findMany()
     * 
     * // Get first 10 Order_items
     * const order_items = await prisma.order_item.findMany({ take: 10 })
     * 
     * // Only select the `order_ID`
     * const order_itemWithOrder_IDOnly = await prisma.order_item.findMany({ select: { order_ID: true } })
     * 
    **/
    findMany<T extends order_itemFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, order_itemFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$order_itemPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Order_item.
     * @param {order_itemCreateArgs} args - Arguments to create a Order_item.
     * @example
     * // Create one Order_item
     * const Order_item = await prisma.order_item.create({
     *   data: {
     *     // ... data to create a Order_item
     *   }
     * })
     * 
    **/
    create<T extends order_itemCreateArgs<ExtArgs>>(
      args: SelectSubset<T, order_itemCreateArgs<ExtArgs>>
    ): Prisma__order_itemClient<$Result.GetResult<Prisma.$order_itemPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Order_items.
     * @param {order_itemCreateManyArgs} args - Arguments to create many Order_items.
     * @example
     * // Create many Order_items
     * const order_item = await prisma.order_item.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends order_itemCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, order_itemCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Order_item.
     * @param {order_itemDeleteArgs} args - Arguments to delete one Order_item.
     * @example
     * // Delete one Order_item
     * const Order_item = await prisma.order_item.delete({
     *   where: {
     *     // ... filter to delete one Order_item
     *   }
     * })
     * 
    **/
    delete<T extends order_itemDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, order_itemDeleteArgs<ExtArgs>>
    ): Prisma__order_itemClient<$Result.GetResult<Prisma.$order_itemPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Order_item.
     * @param {order_itemUpdateArgs} args - Arguments to update one Order_item.
     * @example
     * // Update one Order_item
     * const order_item = await prisma.order_item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends order_itemUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, order_itemUpdateArgs<ExtArgs>>
    ): Prisma__order_itemClient<$Result.GetResult<Prisma.$order_itemPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Order_items.
     * @param {order_itemDeleteManyArgs} args - Arguments to filter Order_items to delete.
     * @example
     * // Delete a few Order_items
     * const { count } = await prisma.order_item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends order_itemDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, order_itemDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Order_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_itemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Order_items
     * const order_item = await prisma.order_item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends order_itemUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, order_itemUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order_item.
     * @param {order_itemUpsertArgs} args - Arguments to update or create a Order_item.
     * @example
     * // Update or create a Order_item
     * const order_item = await prisma.order_item.upsert({
     *   create: {
     *     // ... data to create a Order_item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order_item we want to update
     *   }
     * })
    **/
    upsert<T extends order_itemUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, order_itemUpsertArgs<ExtArgs>>
    ): Prisma__order_itemClient<$Result.GetResult<Prisma.$order_itemPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Order_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_itemCountArgs} args - Arguments to filter Order_items to count.
     * @example
     * // Count the number of Order_items
     * const count = await prisma.order_item.count({
     *   where: {
     *     // ... the filter for the Order_items we want to count
     *   }
     * })
    **/
    count<T extends order_itemCountArgs>(
      args?: Subset<T, order_itemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Order_itemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order_item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_itemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Order_itemAggregateArgs>(args: Subset<T, Order_itemAggregateArgs>): Prisma.PrismaPromise<GetOrder_itemAggregateType<T>>

    /**
     * Group by Order_item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_itemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends order_itemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: order_itemGroupByArgs['orderBy'] }
        : { orderBy?: order_itemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, order_itemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrder_itemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the order_item model
   */
  readonly fields: order_itemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for order_item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__order_itemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    orders<T extends ordersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ordersDefaultArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    product<T extends productDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productDefaultArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the order_item model
   */ 
  interface order_itemFieldRefs {
    readonly order_ID: FieldRef<"order_item", 'Int'>
    readonly product_ID: FieldRef<"order_item", 'Int'>
    readonly quantity: FieldRef<"order_item", 'Int'>
    readonly prices: FieldRef<"order_item", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * order_item findUnique
   */
  export type order_itemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_item
     */
    select?: order_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemInclude<ExtArgs> | null
    /**
     * Filter, which order_item to fetch.
     */
    where: order_itemWhereUniqueInput
  }

  /**
   * order_item findUniqueOrThrow
   */
  export type order_itemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_item
     */
    select?: order_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemInclude<ExtArgs> | null
    /**
     * Filter, which order_item to fetch.
     */
    where: order_itemWhereUniqueInput
  }

  /**
   * order_item findFirst
   */
  export type order_itemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_item
     */
    select?: order_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemInclude<ExtArgs> | null
    /**
     * Filter, which order_item to fetch.
     */
    where?: order_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_items to fetch.
     */
    orderBy?: order_itemOrderByWithRelationInput | order_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for order_items.
     */
    cursor?: order_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of order_items.
     */
    distinct?: Order_itemScalarFieldEnum | Order_itemScalarFieldEnum[]
  }

  /**
   * order_item findFirstOrThrow
   */
  export type order_itemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_item
     */
    select?: order_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemInclude<ExtArgs> | null
    /**
     * Filter, which order_item to fetch.
     */
    where?: order_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_items to fetch.
     */
    orderBy?: order_itemOrderByWithRelationInput | order_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for order_items.
     */
    cursor?: order_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of order_items.
     */
    distinct?: Order_itemScalarFieldEnum | Order_itemScalarFieldEnum[]
  }

  /**
   * order_item findMany
   */
  export type order_itemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_item
     */
    select?: order_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemInclude<ExtArgs> | null
    /**
     * Filter, which order_items to fetch.
     */
    where?: order_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_items to fetch.
     */
    orderBy?: order_itemOrderByWithRelationInput | order_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing order_items.
     */
    cursor?: order_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_items.
     */
    skip?: number
    distinct?: Order_itemScalarFieldEnum | Order_itemScalarFieldEnum[]
  }

  /**
   * order_item create
   */
  export type order_itemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_item
     */
    select?: order_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemInclude<ExtArgs> | null
    /**
     * The data needed to create a order_item.
     */
    data: XOR<order_itemCreateInput, order_itemUncheckedCreateInput>
  }

  /**
   * order_item createMany
   */
  export type order_itemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many order_items.
     */
    data: order_itemCreateManyInput | order_itemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * order_item update
   */
  export type order_itemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_item
     */
    select?: order_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemInclude<ExtArgs> | null
    /**
     * The data needed to update a order_item.
     */
    data: XOR<order_itemUpdateInput, order_itemUncheckedUpdateInput>
    /**
     * Choose, which order_item to update.
     */
    where: order_itemWhereUniqueInput
  }

  /**
   * order_item updateMany
   */
  export type order_itemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update order_items.
     */
    data: XOR<order_itemUpdateManyMutationInput, order_itemUncheckedUpdateManyInput>
    /**
     * Filter which order_items to update
     */
    where?: order_itemWhereInput
  }

  /**
   * order_item upsert
   */
  export type order_itemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_item
     */
    select?: order_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemInclude<ExtArgs> | null
    /**
     * The filter to search for the order_item to update in case it exists.
     */
    where: order_itemWhereUniqueInput
    /**
     * In case the order_item found by the `where` argument doesn't exist, create a new order_item with this data.
     */
    create: XOR<order_itemCreateInput, order_itemUncheckedCreateInput>
    /**
     * In case the order_item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<order_itemUpdateInput, order_itemUncheckedUpdateInput>
  }

  /**
   * order_item delete
   */
  export type order_itemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_item
     */
    select?: order_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemInclude<ExtArgs> | null
    /**
     * Filter which order_item to delete.
     */
    where: order_itemWhereUniqueInput
  }

  /**
   * order_item deleteMany
   */
  export type order_itemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which order_items to delete
     */
    where?: order_itemWhereInput
  }

  /**
   * order_item without action
   */
  export type order_itemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_item
     */
    select?: order_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemInclude<ExtArgs> | null
  }


  /**
   * Model orders
   */

  export type AggregateOrders = {
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  export type OrdersAvgAggregateOutputType = {
    order_ID: number | null
    user_ID: number | null
    status: number | null
  }

  export type OrdersSumAggregateOutputType = {
    order_ID: number | null
    user_ID: number | null
    status: number | null
  }

  export type OrdersMinAggregateOutputType = {
    order_ID: number | null
    user_ID: number | null
    status: number | null
  }

  export type OrdersMaxAggregateOutputType = {
    order_ID: number | null
    user_ID: number | null
    status: number | null
  }

  export type OrdersCountAggregateOutputType = {
    order_ID: number
    user_ID: number
    status: number
    _all: number
  }


  export type OrdersAvgAggregateInputType = {
    order_ID?: true
    user_ID?: true
    status?: true
  }

  export type OrdersSumAggregateInputType = {
    order_ID?: true
    user_ID?: true
    status?: true
  }

  export type OrdersMinAggregateInputType = {
    order_ID?: true
    user_ID?: true
    status?: true
  }

  export type OrdersMaxAggregateInputType = {
    order_ID?: true
    user_ID?: true
    status?: true
  }

  export type OrdersCountAggregateInputType = {
    order_ID?: true
    user_ID?: true
    status?: true
    _all?: true
  }

  export type OrdersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to aggregate.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orders
    **/
    _count?: true | OrdersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrdersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrdersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdersMaxAggregateInputType
  }

  export type GetOrdersAggregateType<T extends OrdersAggregateArgs> = {
        [P in keyof T & keyof AggregateOrders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrders[P]>
      : GetScalarType<T[P], AggregateOrders[P]>
  }




  export type ordersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithAggregationInput | ordersOrderByWithAggregationInput[]
    by: OrdersScalarFieldEnum[] | OrdersScalarFieldEnum
    having?: ordersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdersCountAggregateInputType | true
    _avg?: OrdersAvgAggregateInputType
    _sum?: OrdersSumAggregateInputType
    _min?: OrdersMinAggregateInputType
    _max?: OrdersMaxAggregateInputType
  }

  export type OrdersGroupByOutputType = {
    order_ID: number
    user_ID: number
    status: number | null
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  type GetOrdersGroupByPayload<T extends ordersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrdersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdersGroupByOutputType[P]>
            : GetScalarType<T[P], OrdersGroupByOutputType[P]>
        }
      >
    >


  export type ordersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    order_ID?: boolean
    user_ID?: boolean
    status?: boolean
    order_item?: boolean | orders$order_itemArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
    paying?: boolean | orders$payingArgs<ExtArgs>
    _count?: boolean | OrdersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orders"]>

  export type ordersSelectScalar = {
    order_ID?: boolean
    user_ID?: boolean
    status?: boolean
  }


  export type ordersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order_item?: boolean | orders$order_itemArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
    paying?: boolean | orders$payingArgs<ExtArgs>
    _count?: boolean | OrdersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ordersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "orders"
    objects: {
      order_item: Prisma.$order_itemPayload<ExtArgs>[]
      user: Prisma.$userPayload<ExtArgs>
      paying: Prisma.$payingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      order_ID: number
      user_ID: number
      status: number | null
    }, ExtArgs["result"]["orders"]>
    composites: {}
  }


  type ordersGetPayload<S extends boolean | null | undefined | ordersDefaultArgs> = $Result.GetResult<Prisma.$ordersPayload, S>

  type ordersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ordersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrdersCountAggregateInputType | true
    }

  export interface ordersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['orders'], meta: { name: 'orders' } }
    /**
     * Find zero or one Orders that matches the filter.
     * @param {ordersFindUniqueArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ordersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ordersFindUniqueArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Orders that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ordersFindUniqueOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ordersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ordersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersFindFirstArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Orders that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ordersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.orders.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.orders.findMany({ take: 10 })
     * 
     * // Only select the `order_ID`
     * const ordersWithOrder_IDOnly = await prisma.orders.findMany({ select: { order_ID: true } })
     * 
    **/
    findMany<T extends ordersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Orders.
     * @param {ordersCreateArgs} args - Arguments to create a Orders.
     * @example
     * // Create one Orders
     * const Orders = await prisma.orders.create({
     *   data: {
     *     // ... data to create a Orders
     *   }
     * })
     * 
    **/
    create<T extends ordersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ordersCreateArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Orders.
     * @param {ordersCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const orders = await prisma.orders.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ordersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Orders.
     * @param {ordersDeleteArgs} args - Arguments to delete one Orders.
     * @example
     * // Delete one Orders
     * const Orders = await prisma.orders.delete({
     *   where: {
     *     // ... filter to delete one Orders
     *   }
     * })
     * 
    **/
    delete<T extends ordersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ordersDeleteArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Orders.
     * @param {ordersUpdateArgs} args - Arguments to update one Orders.
     * @example
     * // Update one Orders
     * const orders = await prisma.orders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ordersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ordersUpdateArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {ordersDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.orders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ordersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const orders = await prisma.orders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ordersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ordersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orders.
     * @param {ordersUpsertArgs} args - Arguments to update or create a Orders.
     * @example
     * // Update or create a Orders
     * const orders = await prisma.orders.upsert({
     *   create: {
     *     // ... data to create a Orders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orders we want to update
     *   }
     * })
    **/
    upsert<T extends ordersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ordersUpsertArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.orders.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends ordersCountArgs>(
      args?: Subset<T, ordersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdersAggregateArgs>(args: Subset<T, OrdersAggregateArgs>): Prisma.PrismaPromise<GetOrdersAggregateType<T>>

    /**
     * Group by Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ordersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ordersGroupByArgs['orderBy'] }
        : { orderBy?: ordersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ordersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the orders model
   */
  readonly fields: ordersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for orders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ordersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    order_item<T extends orders$order_itemArgs<ExtArgs> = {}>(args?: Subset<T, orders$order_itemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$order_itemPayload<ExtArgs>, T, 'findMany'> | Null>;

    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    paying<T extends orders$payingArgs<ExtArgs> = {}>(args?: Subset<T, orders$payingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payingPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the orders model
   */ 
  interface ordersFieldRefs {
    readonly order_ID: FieldRef<"orders", 'Int'>
    readonly user_ID: FieldRef<"orders", 'Int'>
    readonly status: FieldRef<"orders", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * orders findUnique
   */
  export type ordersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders findUniqueOrThrow
   */
  export type ordersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders findFirst
   */
  export type ordersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders findFirstOrThrow
   */
  export type ordersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders findMany
   */
  export type ordersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders create
   */
  export type ordersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The data needed to create a orders.
     */
    data: XOR<ordersCreateInput, ordersUncheckedCreateInput>
  }

  /**
   * orders createMany
   */
  export type ordersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many orders.
     */
    data: ordersCreateManyInput | ordersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * orders update
   */
  export type ordersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The data needed to update a orders.
     */
    data: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
    /**
     * Choose, which orders to update.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders updateMany
   */
  export type ordersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update orders.
     */
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyInput>
    /**
     * Filter which orders to update
     */
    where?: ordersWhereInput
  }

  /**
   * orders upsert
   */
  export type ordersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The filter to search for the orders to update in case it exists.
     */
    where: ordersWhereUniqueInput
    /**
     * In case the orders found by the `where` argument doesn't exist, create a new orders with this data.
     */
    create: XOR<ordersCreateInput, ordersUncheckedCreateInput>
    /**
     * In case the orders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
  }

  /**
   * orders delete
   */
  export type ordersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter which orders to delete.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders deleteMany
   */
  export type ordersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to delete
     */
    where?: ordersWhereInput
  }

  /**
   * orders.order_item
   */
  export type orders$order_itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_item
     */
    select?: order_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemInclude<ExtArgs> | null
    where?: order_itemWhereInput
    orderBy?: order_itemOrderByWithRelationInput | order_itemOrderByWithRelationInput[]
    cursor?: order_itemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Order_itemScalarFieldEnum | Order_itemScalarFieldEnum[]
  }

  /**
   * orders.paying
   */
  export type orders$payingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying
     */
    select?: payingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payingInclude<ExtArgs> | null
    where?: payingWhereInput
    orderBy?: payingOrderByWithRelationInput | payingOrderByWithRelationInput[]
    cursor?: payingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayingScalarFieldEnum | PayingScalarFieldEnum[]
  }

  /**
   * orders without action
   */
  export type ordersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
  }


  /**
   * Model paying
   */

  export type AggregatePaying = {
    _count: PayingCountAggregateOutputType | null
    _avg: PayingAvgAggregateOutputType | null
    _sum: PayingSumAggregateOutputType | null
    _min: PayingMinAggregateOutputType | null
    _max: PayingMaxAggregateOutputType | null
  }

  export type PayingAvgAggregateOutputType = {
    order_ID: number | null
    payment_ID: number | null
  }

  export type PayingSumAggregateOutputType = {
    order_ID: number | null
    payment_ID: number | null
  }

  export type PayingMinAggregateOutputType = {
    order_ID: number | null
    payment_ID: number | null
  }

  export type PayingMaxAggregateOutputType = {
    order_ID: number | null
    payment_ID: number | null
  }

  export type PayingCountAggregateOutputType = {
    order_ID: number
    payment_ID: number
    _all: number
  }


  export type PayingAvgAggregateInputType = {
    order_ID?: true
    payment_ID?: true
  }

  export type PayingSumAggregateInputType = {
    order_ID?: true
    payment_ID?: true
  }

  export type PayingMinAggregateInputType = {
    order_ID?: true
    payment_ID?: true
  }

  export type PayingMaxAggregateInputType = {
    order_ID?: true
    payment_ID?: true
  }

  export type PayingCountAggregateInputType = {
    order_ID?: true
    payment_ID?: true
    _all?: true
  }

  export type PayingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which paying to aggregate.
     */
    where?: payingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payings to fetch.
     */
    orderBy?: payingOrderByWithRelationInput | payingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: payingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned payings
    **/
    _count?: true | PayingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PayingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PayingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayingMaxAggregateInputType
  }

  export type GetPayingAggregateType<T extends PayingAggregateArgs> = {
        [P in keyof T & keyof AggregatePaying]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaying[P]>
      : GetScalarType<T[P], AggregatePaying[P]>
  }




  export type payingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payingWhereInput
    orderBy?: payingOrderByWithAggregationInput | payingOrderByWithAggregationInput[]
    by: PayingScalarFieldEnum[] | PayingScalarFieldEnum
    having?: payingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayingCountAggregateInputType | true
    _avg?: PayingAvgAggregateInputType
    _sum?: PayingSumAggregateInputType
    _min?: PayingMinAggregateInputType
    _max?: PayingMaxAggregateInputType
  }

  export type PayingGroupByOutputType = {
    order_ID: number
    payment_ID: number
    _count: PayingCountAggregateOutputType | null
    _avg: PayingAvgAggregateOutputType | null
    _sum: PayingSumAggregateOutputType | null
    _min: PayingMinAggregateOutputType | null
    _max: PayingMaxAggregateOutputType | null
  }

  type GetPayingGroupByPayload<T extends payingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayingGroupByOutputType[P]>
            : GetScalarType<T[P], PayingGroupByOutputType[P]>
        }
      >
    >


  export type payingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    order_ID?: boolean
    payment_ID?: boolean
    orders?: boolean | ordersDefaultArgs<ExtArgs>
    paying_info?: boolean | paying_infoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paying"]>

  export type payingSelectScalar = {
    order_ID?: boolean
    payment_ID?: boolean
  }


  export type payingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | ordersDefaultArgs<ExtArgs>
    paying_info?: boolean | paying_infoDefaultArgs<ExtArgs>
  }


  export type $payingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "paying"
    objects: {
      orders: Prisma.$ordersPayload<ExtArgs>
      paying_info: Prisma.$paying_infoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      order_ID: number
      payment_ID: number
    }, ExtArgs["result"]["paying"]>
    composites: {}
  }


  type payingGetPayload<S extends boolean | null | undefined | payingDefaultArgs> = $Result.GetResult<Prisma.$payingPayload, S>

  type payingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<payingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PayingCountAggregateInputType | true
    }

  export interface payingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['paying'], meta: { name: 'paying' } }
    /**
     * Find zero or one Paying that matches the filter.
     * @param {payingFindUniqueArgs} args - Arguments to find a Paying
     * @example
     * // Get one Paying
     * const paying = await prisma.paying.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends payingFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, payingFindUniqueArgs<ExtArgs>>
    ): Prisma__payingClient<$Result.GetResult<Prisma.$payingPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Paying that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {payingFindUniqueOrThrowArgs} args - Arguments to find a Paying
     * @example
     * // Get one Paying
     * const paying = await prisma.paying.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends payingFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, payingFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__payingClient<$Result.GetResult<Prisma.$payingPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Paying that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payingFindFirstArgs} args - Arguments to find a Paying
     * @example
     * // Get one Paying
     * const paying = await prisma.paying.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends payingFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, payingFindFirstArgs<ExtArgs>>
    ): Prisma__payingClient<$Result.GetResult<Prisma.$payingPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Paying that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payingFindFirstOrThrowArgs} args - Arguments to find a Paying
     * @example
     * // Get one Paying
     * const paying = await prisma.paying.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends payingFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, payingFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__payingClient<$Result.GetResult<Prisma.$payingPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Payings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payings
     * const payings = await prisma.paying.findMany()
     * 
     * // Get first 10 Payings
     * const payings = await prisma.paying.findMany({ take: 10 })
     * 
     * // Only select the `order_ID`
     * const payingWithOrder_IDOnly = await prisma.paying.findMany({ select: { order_ID: true } })
     * 
    **/
    findMany<T extends payingFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payingFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payingPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Paying.
     * @param {payingCreateArgs} args - Arguments to create a Paying.
     * @example
     * // Create one Paying
     * const Paying = await prisma.paying.create({
     *   data: {
     *     // ... data to create a Paying
     *   }
     * })
     * 
    **/
    create<T extends payingCreateArgs<ExtArgs>>(
      args: SelectSubset<T, payingCreateArgs<ExtArgs>>
    ): Prisma__payingClient<$Result.GetResult<Prisma.$payingPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Payings.
     * @param {payingCreateManyArgs} args - Arguments to create many Payings.
     * @example
     * // Create many Payings
     * const paying = await prisma.paying.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends payingCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payingCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Paying.
     * @param {payingDeleteArgs} args - Arguments to delete one Paying.
     * @example
     * // Delete one Paying
     * const Paying = await prisma.paying.delete({
     *   where: {
     *     // ... filter to delete one Paying
     *   }
     * })
     * 
    **/
    delete<T extends payingDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, payingDeleteArgs<ExtArgs>>
    ): Prisma__payingClient<$Result.GetResult<Prisma.$payingPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Paying.
     * @param {payingUpdateArgs} args - Arguments to update one Paying.
     * @example
     * // Update one Paying
     * const paying = await prisma.paying.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends payingUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, payingUpdateArgs<ExtArgs>>
    ): Prisma__payingClient<$Result.GetResult<Prisma.$payingPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Payings.
     * @param {payingDeleteManyArgs} args - Arguments to filter Payings to delete.
     * @example
     * // Delete a few Payings
     * const { count } = await prisma.paying.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends payingDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payingDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payings
     * const paying = await prisma.paying.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends payingUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, payingUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Paying.
     * @param {payingUpsertArgs} args - Arguments to update or create a Paying.
     * @example
     * // Update or create a Paying
     * const paying = await prisma.paying.upsert({
     *   create: {
     *     // ... data to create a Paying
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Paying we want to update
     *   }
     * })
    **/
    upsert<T extends payingUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, payingUpsertArgs<ExtArgs>>
    ): Prisma__payingClient<$Result.GetResult<Prisma.$payingPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Payings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payingCountArgs} args - Arguments to filter Payings to count.
     * @example
     * // Count the number of Payings
     * const count = await prisma.paying.count({
     *   where: {
     *     // ... the filter for the Payings we want to count
     *   }
     * })
    **/
    count<T extends payingCountArgs>(
      args?: Subset<T, payingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Paying.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayingAggregateArgs>(args: Subset<T, PayingAggregateArgs>): Prisma.PrismaPromise<GetPayingAggregateType<T>>

    /**
     * Group by Paying.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends payingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: payingGroupByArgs['orderBy'] }
        : { orderBy?: payingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, payingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the paying model
   */
  readonly fields: payingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for paying.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__payingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    orders<T extends ordersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ordersDefaultArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    paying_info<T extends paying_infoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, paying_infoDefaultArgs<ExtArgs>>): Prisma__paying_infoClient<$Result.GetResult<Prisma.$paying_infoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the paying model
   */ 
  interface payingFieldRefs {
    readonly order_ID: FieldRef<"paying", 'Int'>
    readonly payment_ID: FieldRef<"paying", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * paying findUnique
   */
  export type payingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying
     */
    select?: payingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payingInclude<ExtArgs> | null
    /**
     * Filter, which paying to fetch.
     */
    where: payingWhereUniqueInput
  }

  /**
   * paying findUniqueOrThrow
   */
  export type payingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying
     */
    select?: payingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payingInclude<ExtArgs> | null
    /**
     * Filter, which paying to fetch.
     */
    where: payingWhereUniqueInput
  }

  /**
   * paying findFirst
   */
  export type payingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying
     */
    select?: payingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payingInclude<ExtArgs> | null
    /**
     * Filter, which paying to fetch.
     */
    where?: payingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payings to fetch.
     */
    orderBy?: payingOrderByWithRelationInput | payingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payings.
     */
    cursor?: payingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payings.
     */
    distinct?: PayingScalarFieldEnum | PayingScalarFieldEnum[]
  }

  /**
   * paying findFirstOrThrow
   */
  export type payingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying
     */
    select?: payingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payingInclude<ExtArgs> | null
    /**
     * Filter, which paying to fetch.
     */
    where?: payingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payings to fetch.
     */
    orderBy?: payingOrderByWithRelationInput | payingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payings.
     */
    cursor?: payingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payings.
     */
    distinct?: PayingScalarFieldEnum | PayingScalarFieldEnum[]
  }

  /**
   * paying findMany
   */
  export type payingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying
     */
    select?: payingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payingInclude<ExtArgs> | null
    /**
     * Filter, which payings to fetch.
     */
    where?: payingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payings to fetch.
     */
    orderBy?: payingOrderByWithRelationInput | payingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing payings.
     */
    cursor?: payingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payings.
     */
    skip?: number
    distinct?: PayingScalarFieldEnum | PayingScalarFieldEnum[]
  }

  /**
   * paying create
   */
  export type payingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying
     */
    select?: payingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payingInclude<ExtArgs> | null
    /**
     * The data needed to create a paying.
     */
    data: XOR<payingCreateInput, payingUncheckedCreateInput>
  }

  /**
   * paying createMany
   */
  export type payingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many payings.
     */
    data: payingCreateManyInput | payingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * paying update
   */
  export type payingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying
     */
    select?: payingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payingInclude<ExtArgs> | null
    /**
     * The data needed to update a paying.
     */
    data: XOR<payingUpdateInput, payingUncheckedUpdateInput>
    /**
     * Choose, which paying to update.
     */
    where: payingWhereUniqueInput
  }

  /**
   * paying updateMany
   */
  export type payingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update payings.
     */
    data: XOR<payingUpdateManyMutationInput, payingUncheckedUpdateManyInput>
    /**
     * Filter which payings to update
     */
    where?: payingWhereInput
  }

  /**
   * paying upsert
   */
  export type payingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying
     */
    select?: payingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payingInclude<ExtArgs> | null
    /**
     * The filter to search for the paying to update in case it exists.
     */
    where: payingWhereUniqueInput
    /**
     * In case the paying found by the `where` argument doesn't exist, create a new paying with this data.
     */
    create: XOR<payingCreateInput, payingUncheckedCreateInput>
    /**
     * In case the paying was found with the provided `where` argument, update it with this data.
     */
    update: XOR<payingUpdateInput, payingUncheckedUpdateInput>
  }

  /**
   * paying delete
   */
  export type payingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying
     */
    select?: payingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payingInclude<ExtArgs> | null
    /**
     * Filter which paying to delete.
     */
    where: payingWhereUniqueInput
  }

  /**
   * paying deleteMany
   */
  export type payingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payings to delete
     */
    where?: payingWhereInput
  }

  /**
   * paying without action
   */
  export type payingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying
     */
    select?: payingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payingInclude<ExtArgs> | null
  }


  /**
   * Model paying_info
   */

  export type AggregatePaying_info = {
    _count: Paying_infoCountAggregateOutputType | null
    _avg: Paying_infoAvgAggregateOutputType | null
    _sum: Paying_infoSumAggregateOutputType | null
    _min: Paying_infoMinAggregateOutputType | null
    _max: Paying_infoMaxAggregateOutputType | null
  }

  export type Paying_infoAvgAggregateOutputType = {
    payment_ID: number | null
    total_price: Decimal | null
  }

  export type Paying_infoSumAggregateOutputType = {
    payment_ID: number | null
    total_price: Decimal | null
  }

  export type Paying_infoMinAggregateOutputType = {
    payment_ID: number | null
    bank_account: string | null
    bank_num: string | null
    delivering_address: string | null
    total_price: Decimal | null
    time_slot: Date | null
  }

  export type Paying_infoMaxAggregateOutputType = {
    payment_ID: number | null
    bank_account: string | null
    bank_num: string | null
    delivering_address: string | null
    total_price: Decimal | null
    time_slot: Date | null
  }

  export type Paying_infoCountAggregateOutputType = {
    payment_ID: number
    bank_account: number
    bank_num: number
    delivering_address: number
    total_price: number
    time_slot: number
    _all: number
  }


  export type Paying_infoAvgAggregateInputType = {
    payment_ID?: true
    total_price?: true
  }

  export type Paying_infoSumAggregateInputType = {
    payment_ID?: true
    total_price?: true
  }

  export type Paying_infoMinAggregateInputType = {
    payment_ID?: true
    bank_account?: true
    bank_num?: true
    delivering_address?: true
    total_price?: true
    time_slot?: true
  }

  export type Paying_infoMaxAggregateInputType = {
    payment_ID?: true
    bank_account?: true
    bank_num?: true
    delivering_address?: true
    total_price?: true
    time_slot?: true
  }

  export type Paying_infoCountAggregateInputType = {
    payment_ID?: true
    bank_account?: true
    bank_num?: true
    delivering_address?: true
    total_price?: true
    time_slot?: true
    _all?: true
  }

  export type Paying_infoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which paying_info to aggregate.
     */
    where?: paying_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of paying_infos to fetch.
     */
    orderBy?: paying_infoOrderByWithRelationInput | paying_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: paying_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` paying_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` paying_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned paying_infos
    **/
    _count?: true | Paying_infoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Paying_infoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Paying_infoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Paying_infoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Paying_infoMaxAggregateInputType
  }

  export type GetPaying_infoAggregateType<T extends Paying_infoAggregateArgs> = {
        [P in keyof T & keyof AggregatePaying_info]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaying_info[P]>
      : GetScalarType<T[P], AggregatePaying_info[P]>
  }




  export type paying_infoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: paying_infoWhereInput
    orderBy?: paying_infoOrderByWithAggregationInput | paying_infoOrderByWithAggregationInput[]
    by: Paying_infoScalarFieldEnum[] | Paying_infoScalarFieldEnum
    having?: paying_infoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Paying_infoCountAggregateInputType | true
    _avg?: Paying_infoAvgAggregateInputType
    _sum?: Paying_infoSumAggregateInputType
    _min?: Paying_infoMinAggregateInputType
    _max?: Paying_infoMaxAggregateInputType
  }

  export type Paying_infoGroupByOutputType = {
    payment_ID: number
    bank_account: string
    bank_num: string
    delivering_address: string
    total_price: Decimal | null
    time_slot: Date | null
    _count: Paying_infoCountAggregateOutputType | null
    _avg: Paying_infoAvgAggregateOutputType | null
    _sum: Paying_infoSumAggregateOutputType | null
    _min: Paying_infoMinAggregateOutputType | null
    _max: Paying_infoMaxAggregateOutputType | null
  }

  type GetPaying_infoGroupByPayload<T extends paying_infoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Paying_infoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Paying_infoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Paying_infoGroupByOutputType[P]>
            : GetScalarType<T[P], Paying_infoGroupByOutputType[P]>
        }
      >
    >


  export type paying_infoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    payment_ID?: boolean
    bank_account?: boolean
    bank_num?: boolean
    delivering_address?: boolean
    total_price?: boolean
    time_slot?: boolean
    paying?: boolean | paying_info$payingArgs<ExtArgs>
    _count?: boolean | Paying_infoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paying_info"]>

  export type paying_infoSelectScalar = {
    payment_ID?: boolean
    bank_account?: boolean
    bank_num?: boolean
    delivering_address?: boolean
    total_price?: boolean
    time_slot?: boolean
  }


  export type paying_infoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paying?: boolean | paying_info$payingArgs<ExtArgs>
    _count?: boolean | Paying_infoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $paying_infoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "paying_info"
    objects: {
      paying: Prisma.$payingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      payment_ID: number
      bank_account: string
      bank_num: string
      delivering_address: string
      total_price: Prisma.Decimal | null
      time_slot: Date | null
    }, ExtArgs["result"]["paying_info"]>
    composites: {}
  }


  type paying_infoGetPayload<S extends boolean | null | undefined | paying_infoDefaultArgs> = $Result.GetResult<Prisma.$paying_infoPayload, S>

  type paying_infoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<paying_infoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Paying_infoCountAggregateInputType | true
    }

  export interface paying_infoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['paying_info'], meta: { name: 'paying_info' } }
    /**
     * Find zero or one Paying_info that matches the filter.
     * @param {paying_infoFindUniqueArgs} args - Arguments to find a Paying_info
     * @example
     * // Get one Paying_info
     * const paying_info = await prisma.paying_info.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends paying_infoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, paying_infoFindUniqueArgs<ExtArgs>>
    ): Prisma__paying_infoClient<$Result.GetResult<Prisma.$paying_infoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Paying_info that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {paying_infoFindUniqueOrThrowArgs} args - Arguments to find a Paying_info
     * @example
     * // Get one Paying_info
     * const paying_info = await prisma.paying_info.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends paying_infoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, paying_infoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__paying_infoClient<$Result.GetResult<Prisma.$paying_infoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Paying_info that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paying_infoFindFirstArgs} args - Arguments to find a Paying_info
     * @example
     * // Get one Paying_info
     * const paying_info = await prisma.paying_info.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends paying_infoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, paying_infoFindFirstArgs<ExtArgs>>
    ): Prisma__paying_infoClient<$Result.GetResult<Prisma.$paying_infoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Paying_info that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paying_infoFindFirstOrThrowArgs} args - Arguments to find a Paying_info
     * @example
     * // Get one Paying_info
     * const paying_info = await prisma.paying_info.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends paying_infoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, paying_infoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__paying_infoClient<$Result.GetResult<Prisma.$paying_infoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Paying_infos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paying_infoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Paying_infos
     * const paying_infos = await prisma.paying_info.findMany()
     * 
     * // Get first 10 Paying_infos
     * const paying_infos = await prisma.paying_info.findMany({ take: 10 })
     * 
     * // Only select the `payment_ID`
     * const paying_infoWithPayment_IDOnly = await prisma.paying_info.findMany({ select: { payment_ID: true } })
     * 
    **/
    findMany<T extends paying_infoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, paying_infoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paying_infoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Paying_info.
     * @param {paying_infoCreateArgs} args - Arguments to create a Paying_info.
     * @example
     * // Create one Paying_info
     * const Paying_info = await prisma.paying_info.create({
     *   data: {
     *     // ... data to create a Paying_info
     *   }
     * })
     * 
    **/
    create<T extends paying_infoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, paying_infoCreateArgs<ExtArgs>>
    ): Prisma__paying_infoClient<$Result.GetResult<Prisma.$paying_infoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Paying_infos.
     * @param {paying_infoCreateManyArgs} args - Arguments to create many Paying_infos.
     * @example
     * // Create many Paying_infos
     * const paying_info = await prisma.paying_info.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends paying_infoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, paying_infoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Paying_info.
     * @param {paying_infoDeleteArgs} args - Arguments to delete one Paying_info.
     * @example
     * // Delete one Paying_info
     * const Paying_info = await prisma.paying_info.delete({
     *   where: {
     *     // ... filter to delete one Paying_info
     *   }
     * })
     * 
    **/
    delete<T extends paying_infoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, paying_infoDeleteArgs<ExtArgs>>
    ): Prisma__paying_infoClient<$Result.GetResult<Prisma.$paying_infoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Paying_info.
     * @param {paying_infoUpdateArgs} args - Arguments to update one Paying_info.
     * @example
     * // Update one Paying_info
     * const paying_info = await prisma.paying_info.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends paying_infoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, paying_infoUpdateArgs<ExtArgs>>
    ): Prisma__paying_infoClient<$Result.GetResult<Prisma.$paying_infoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Paying_infos.
     * @param {paying_infoDeleteManyArgs} args - Arguments to filter Paying_infos to delete.
     * @example
     * // Delete a few Paying_infos
     * const { count } = await prisma.paying_info.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends paying_infoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, paying_infoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Paying_infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paying_infoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Paying_infos
     * const paying_info = await prisma.paying_info.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends paying_infoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, paying_infoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Paying_info.
     * @param {paying_infoUpsertArgs} args - Arguments to update or create a Paying_info.
     * @example
     * // Update or create a Paying_info
     * const paying_info = await prisma.paying_info.upsert({
     *   create: {
     *     // ... data to create a Paying_info
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Paying_info we want to update
     *   }
     * })
    **/
    upsert<T extends paying_infoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, paying_infoUpsertArgs<ExtArgs>>
    ): Prisma__paying_infoClient<$Result.GetResult<Prisma.$paying_infoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Paying_infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paying_infoCountArgs} args - Arguments to filter Paying_infos to count.
     * @example
     * // Count the number of Paying_infos
     * const count = await prisma.paying_info.count({
     *   where: {
     *     // ... the filter for the Paying_infos we want to count
     *   }
     * })
    **/
    count<T extends paying_infoCountArgs>(
      args?: Subset<T, paying_infoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Paying_infoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Paying_info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Paying_infoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Paying_infoAggregateArgs>(args: Subset<T, Paying_infoAggregateArgs>): Prisma.PrismaPromise<GetPaying_infoAggregateType<T>>

    /**
     * Group by Paying_info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paying_infoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends paying_infoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: paying_infoGroupByArgs['orderBy'] }
        : { orderBy?: paying_infoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, paying_infoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaying_infoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the paying_info model
   */
  readonly fields: paying_infoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for paying_info.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__paying_infoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    paying<T extends paying_info$payingArgs<ExtArgs> = {}>(args?: Subset<T, paying_info$payingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payingPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the paying_info model
   */ 
  interface paying_infoFieldRefs {
    readonly payment_ID: FieldRef<"paying_info", 'Int'>
    readonly bank_account: FieldRef<"paying_info", 'String'>
    readonly bank_num: FieldRef<"paying_info", 'String'>
    readonly delivering_address: FieldRef<"paying_info", 'String'>
    readonly total_price: FieldRef<"paying_info", 'Decimal'>
    readonly time_slot: FieldRef<"paying_info", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * paying_info findUnique
   */
  export type paying_infoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying_info
     */
    select?: paying_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paying_infoInclude<ExtArgs> | null
    /**
     * Filter, which paying_info to fetch.
     */
    where: paying_infoWhereUniqueInput
  }

  /**
   * paying_info findUniqueOrThrow
   */
  export type paying_infoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying_info
     */
    select?: paying_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paying_infoInclude<ExtArgs> | null
    /**
     * Filter, which paying_info to fetch.
     */
    where: paying_infoWhereUniqueInput
  }

  /**
   * paying_info findFirst
   */
  export type paying_infoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying_info
     */
    select?: paying_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paying_infoInclude<ExtArgs> | null
    /**
     * Filter, which paying_info to fetch.
     */
    where?: paying_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of paying_infos to fetch.
     */
    orderBy?: paying_infoOrderByWithRelationInput | paying_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for paying_infos.
     */
    cursor?: paying_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` paying_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` paying_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of paying_infos.
     */
    distinct?: Paying_infoScalarFieldEnum | Paying_infoScalarFieldEnum[]
  }

  /**
   * paying_info findFirstOrThrow
   */
  export type paying_infoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying_info
     */
    select?: paying_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paying_infoInclude<ExtArgs> | null
    /**
     * Filter, which paying_info to fetch.
     */
    where?: paying_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of paying_infos to fetch.
     */
    orderBy?: paying_infoOrderByWithRelationInput | paying_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for paying_infos.
     */
    cursor?: paying_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` paying_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` paying_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of paying_infos.
     */
    distinct?: Paying_infoScalarFieldEnum | Paying_infoScalarFieldEnum[]
  }

  /**
   * paying_info findMany
   */
  export type paying_infoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying_info
     */
    select?: paying_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paying_infoInclude<ExtArgs> | null
    /**
     * Filter, which paying_infos to fetch.
     */
    where?: paying_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of paying_infos to fetch.
     */
    orderBy?: paying_infoOrderByWithRelationInput | paying_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing paying_infos.
     */
    cursor?: paying_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` paying_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` paying_infos.
     */
    skip?: number
    distinct?: Paying_infoScalarFieldEnum | Paying_infoScalarFieldEnum[]
  }

  /**
   * paying_info create
   */
  export type paying_infoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying_info
     */
    select?: paying_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paying_infoInclude<ExtArgs> | null
    /**
     * The data needed to create a paying_info.
     */
    data: XOR<paying_infoCreateInput, paying_infoUncheckedCreateInput>
  }

  /**
   * paying_info createMany
   */
  export type paying_infoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many paying_infos.
     */
    data: paying_infoCreateManyInput | paying_infoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * paying_info update
   */
  export type paying_infoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying_info
     */
    select?: paying_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paying_infoInclude<ExtArgs> | null
    /**
     * The data needed to update a paying_info.
     */
    data: XOR<paying_infoUpdateInput, paying_infoUncheckedUpdateInput>
    /**
     * Choose, which paying_info to update.
     */
    where: paying_infoWhereUniqueInput
  }

  /**
   * paying_info updateMany
   */
  export type paying_infoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update paying_infos.
     */
    data: XOR<paying_infoUpdateManyMutationInput, paying_infoUncheckedUpdateManyInput>
    /**
     * Filter which paying_infos to update
     */
    where?: paying_infoWhereInput
  }

  /**
   * paying_info upsert
   */
  export type paying_infoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying_info
     */
    select?: paying_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paying_infoInclude<ExtArgs> | null
    /**
     * The filter to search for the paying_info to update in case it exists.
     */
    where: paying_infoWhereUniqueInput
    /**
     * In case the paying_info found by the `where` argument doesn't exist, create a new paying_info with this data.
     */
    create: XOR<paying_infoCreateInput, paying_infoUncheckedCreateInput>
    /**
     * In case the paying_info was found with the provided `where` argument, update it with this data.
     */
    update: XOR<paying_infoUpdateInput, paying_infoUncheckedUpdateInput>
  }

  /**
   * paying_info delete
   */
  export type paying_infoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying_info
     */
    select?: paying_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paying_infoInclude<ExtArgs> | null
    /**
     * Filter which paying_info to delete.
     */
    where: paying_infoWhereUniqueInput
  }

  /**
   * paying_info deleteMany
   */
  export type paying_infoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which paying_infos to delete
     */
    where?: paying_infoWhereInput
  }

  /**
   * paying_info.paying
   */
  export type paying_info$payingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying
     */
    select?: payingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payingInclude<ExtArgs> | null
    where?: payingWhereInput
    orderBy?: payingOrderByWithRelationInput | payingOrderByWithRelationInput[]
    cursor?: payingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayingScalarFieldEnum | PayingScalarFieldEnum[]
  }

  /**
   * paying_info without action
   */
  export type paying_infoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paying_info
     */
    select?: paying_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paying_infoInclude<ExtArgs> | null
  }


  /**
   * Model product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    product_ID: number | null
    discount: number | null
    stock: number | null
    price: Decimal | null
    sales: number | null
    likes: number | null
    avg_score: number | null
  }

  export type ProductSumAggregateOutputType = {
    product_ID: number | null
    discount: number | null
    stock: number | null
    price: Decimal | null
    sales: number | null
    likes: number | null
    avg_score: number | null
  }

  export type ProductMinAggregateOutputType = {
    product_ID: number | null
    product_name: string | null
    discount: number | null
    stock: number | null
    price: Decimal | null
    tags: string | null
    sales: number | null
    likes: number | null
    avg_score: number | null
  }

  export type ProductMaxAggregateOutputType = {
    product_ID: number | null
    product_name: string | null
    discount: number | null
    stock: number | null
    price: Decimal | null
    tags: string | null
    sales: number | null
    likes: number | null
    avg_score: number | null
  }

  export type ProductCountAggregateOutputType = {
    product_ID: number
    product_name: number
    discount: number
    stock: number
    price: number
    tags: number
    sales: number
    likes: number
    avg_score: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    product_ID?: true
    discount?: true
    stock?: true
    price?: true
    sales?: true
    likes?: true
    avg_score?: true
  }

  export type ProductSumAggregateInputType = {
    product_ID?: true
    discount?: true
    stock?: true
    price?: true
    sales?: true
    likes?: true
    avg_score?: true
  }

  export type ProductMinAggregateInputType = {
    product_ID?: true
    product_name?: true
    discount?: true
    stock?: true
    price?: true
    tags?: true
    sales?: true
    likes?: true
    avg_score?: true
  }

  export type ProductMaxAggregateInputType = {
    product_ID?: true
    product_name?: true
    discount?: true
    stock?: true
    price?: true
    tags?: true
    sales?: true
    likes?: true
    avg_score?: true
  }

  export type ProductCountAggregateInputType = {
    product_ID?: true
    product_name?: true
    discount?: true
    stock?: true
    price?: true
    tags?: true
    sales?: true
    likes?: true
    avg_score?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product to aggregate.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type productGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productWhereInput
    orderBy?: productOrderByWithAggregationInput | productOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: productScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    product_ID: number
    product_name: string
    discount: number | null
    stock: number | null
    price: Decimal | null
    tags: string | null
    sales: number | null
    likes: number | null
    avg_score: number | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends productGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type productSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    product_ID?: boolean
    product_name?: boolean
    discount?: boolean
    stock?: boolean
    price?: boolean
    tags?: boolean
    sales?: boolean
    likes?: boolean
    avg_score?: boolean
    cart_item?: boolean | product$cart_itemArgs<ExtArgs>
    liking_list?: boolean | product$liking_listArgs<ExtArgs>
    order_item?: boolean | product$order_itemArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type productSelectScalar = {
    product_ID?: boolean
    product_name?: boolean
    discount?: boolean
    stock?: boolean
    price?: boolean
    tags?: boolean
    sales?: boolean
    likes?: boolean
    avg_score?: boolean
  }


  export type productInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cart_item?: boolean | product$cart_itemArgs<ExtArgs>
    liking_list?: boolean | product$liking_listArgs<ExtArgs>
    order_item?: boolean | product$order_itemArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $productPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "product"
    objects: {
      cart_item: Prisma.$cart_itemPayload<ExtArgs>[]
      liking_list: Prisma.$liking_listPayload<ExtArgs>[]
      order_item: Prisma.$order_itemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      product_ID: number
      product_name: string
      discount: number | null
      stock: number | null
      price: Prisma.Decimal | null
      tags: string | null
      sales: number | null
      likes: number | null
      avg_score: number | null
    }, ExtArgs["result"]["product"]>
    composites: {}
  }


  type productGetPayload<S extends boolean | null | undefined | productDefaultArgs> = $Result.GetResult<Prisma.$productPayload, S>

  type productCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<productFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface productDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product'], meta: { name: 'product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {productFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, productFindUniqueArgs<ExtArgs>>
    ): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {productFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, productFindFirstArgs<ExtArgs>>
    ): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `product_ID`
     * const productWithProduct_IDOnly = await prisma.product.findMany({ select: { product_ID: true } })
     * 
    **/
    findMany<T extends productFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product.
     * @param {productCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends productCreateArgs<ExtArgs>>(
      args: SelectSubset<T, productCreateArgs<ExtArgs>>
    ): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     * @param {productCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends productCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {productDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends productDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, productDeleteArgs<ExtArgs>>
    ): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product.
     * @param {productUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, productUpdateArgs<ExtArgs>>
    ): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {productDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, productUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {productUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends productUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, productUpsertArgs<ExtArgs>>
    ): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productCountArgs>(
      args?: Subset<T, productCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productGroupByArgs['orderBy'] }
        : { orderBy?: productGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the product model
   */
  readonly fields: productFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    cart_item<T extends product$cart_itemArgs<ExtArgs> = {}>(args?: Subset<T, product$cart_itemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cart_itemPayload<ExtArgs>, T, 'findMany'> | Null>;

    liking_list<T extends product$liking_listArgs<ExtArgs> = {}>(args?: Subset<T, product$liking_listArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$liking_listPayload<ExtArgs>, T, 'findMany'> | Null>;

    order_item<T extends product$order_itemArgs<ExtArgs> = {}>(args?: Subset<T, product$order_itemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$order_itemPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the product model
   */ 
  interface productFieldRefs {
    readonly product_ID: FieldRef<"product", 'Int'>
    readonly product_name: FieldRef<"product", 'String'>
    readonly discount: FieldRef<"product", 'Float'>
    readonly stock: FieldRef<"product", 'Int'>
    readonly price: FieldRef<"product", 'Decimal'>
    readonly tags: FieldRef<"product", 'String'>
    readonly sales: FieldRef<"product", 'Int'>
    readonly likes: FieldRef<"product", 'Int'>
    readonly avg_score: FieldRef<"product", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * product findUnique
   */
  export type productFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where: productWhereUniqueInput
  }

  /**
   * product findUniqueOrThrow
   */
  export type productFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where: productWhereUniqueInput
  }

  /**
   * product findFirst
   */
  export type productFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product findFirstOrThrow
   */
  export type productFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product findMany
   */
  export type productFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product create
   */
  export type productCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The data needed to create a product.
     */
    data: XOR<productCreateInput, productUncheckedCreateInput>
  }

  /**
   * product createMany
   */
  export type productCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many products.
     */
    data: productCreateManyInput | productCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * product update
   */
  export type productUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The data needed to update a product.
     */
    data: XOR<productUpdateInput, productUncheckedUpdateInput>
    /**
     * Choose, which product to update.
     */
    where: productWhereUniqueInput
  }

  /**
   * product updateMany
   */
  export type productUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update products.
     */
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productWhereInput
  }

  /**
   * product upsert
   */
  export type productUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The filter to search for the product to update in case it exists.
     */
    where: productWhereUniqueInput
    /**
     * In case the product found by the `where` argument doesn't exist, create a new product with this data.
     */
    create: XOR<productCreateInput, productUncheckedCreateInput>
    /**
     * In case the product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productUpdateInput, productUncheckedUpdateInput>
  }

  /**
   * product delete
   */
  export type productDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter which product to delete.
     */
    where: productWhereUniqueInput
  }

  /**
   * product deleteMany
   */
  export type productDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to delete
     */
    where?: productWhereInput
  }

  /**
   * product.cart_item
   */
  export type product$cart_itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cart_item
     */
    select?: cart_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cart_itemInclude<ExtArgs> | null
    where?: cart_itemWhereInput
    orderBy?: cart_itemOrderByWithRelationInput | cart_itemOrderByWithRelationInput[]
    cursor?: cart_itemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Cart_itemScalarFieldEnum | Cart_itemScalarFieldEnum[]
  }

  /**
   * product.liking_list
   */
  export type product$liking_listArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the liking_list
     */
    select?: liking_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: liking_listInclude<ExtArgs> | null
    where?: liking_listWhereInput
    orderBy?: liking_listOrderByWithRelationInput | liking_listOrderByWithRelationInput[]
    cursor?: liking_listWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Liking_listScalarFieldEnum | Liking_listScalarFieldEnum[]
  }

  /**
   * product.order_item
   */
  export type product$order_itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_item
     */
    select?: order_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemInclude<ExtArgs> | null
    where?: order_itemWhereInput
    orderBy?: order_itemOrderByWithRelationInput | order_itemOrderByWithRelationInput[]
    cursor?: order_itemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Order_itemScalarFieldEnum | Order_itemScalarFieldEnum[]
  }

  /**
   * product without action
   */
  export type productDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
  }


  /**
   * Model search_history
   */

  export type AggregateSearch_history = {
    _count: Search_historyCountAggregateOutputType | null
    _avg: Search_historyAvgAggregateOutputType | null
    _sum: Search_historySumAggregateOutputType | null
    _min: Search_historyMinAggregateOutputType | null
    _max: Search_historyMaxAggregateOutputType | null
  }

  export type Search_historyAvgAggregateOutputType = {
    user_ID: number | null
  }

  export type Search_historySumAggregateOutputType = {
    user_ID: number | null
  }

  export type Search_historyMinAggregateOutputType = {
    user_ID: number | null
    keyword: string | null
  }

  export type Search_historyMaxAggregateOutputType = {
    user_ID: number | null
    keyword: string | null
  }

  export type Search_historyCountAggregateOutputType = {
    user_ID: number
    keyword: number
    _all: number
  }


  export type Search_historyAvgAggregateInputType = {
    user_ID?: true
  }

  export type Search_historySumAggregateInputType = {
    user_ID?: true
  }

  export type Search_historyMinAggregateInputType = {
    user_ID?: true
    keyword?: true
  }

  export type Search_historyMaxAggregateInputType = {
    user_ID?: true
    keyword?: true
  }

  export type Search_historyCountAggregateInputType = {
    user_ID?: true
    keyword?: true
    _all?: true
  }

  export type Search_historyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which search_history to aggregate.
     */
    where?: search_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of search_histories to fetch.
     */
    orderBy?: search_historyOrderByWithRelationInput | search_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: search_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` search_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` search_histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned search_histories
    **/
    _count?: true | Search_historyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Search_historyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Search_historySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Search_historyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Search_historyMaxAggregateInputType
  }

  export type GetSearch_historyAggregateType<T extends Search_historyAggregateArgs> = {
        [P in keyof T & keyof AggregateSearch_history]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSearch_history[P]>
      : GetScalarType<T[P], AggregateSearch_history[P]>
  }




  export type search_historyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: search_historyWhereInput
    orderBy?: search_historyOrderByWithAggregationInput | search_historyOrderByWithAggregationInput[]
    by: Search_historyScalarFieldEnum[] | Search_historyScalarFieldEnum
    having?: search_historyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Search_historyCountAggregateInputType | true
    _avg?: Search_historyAvgAggregateInputType
    _sum?: Search_historySumAggregateInputType
    _min?: Search_historyMinAggregateInputType
    _max?: Search_historyMaxAggregateInputType
  }

  export type Search_historyGroupByOutputType = {
    user_ID: number
    keyword: string
    _count: Search_historyCountAggregateOutputType | null
    _avg: Search_historyAvgAggregateOutputType | null
    _sum: Search_historySumAggregateOutputType | null
    _min: Search_historyMinAggregateOutputType | null
    _max: Search_historyMaxAggregateOutputType | null
  }

  type GetSearch_historyGroupByPayload<T extends search_historyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Search_historyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Search_historyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Search_historyGroupByOutputType[P]>
            : GetScalarType<T[P], Search_historyGroupByOutputType[P]>
        }
      >
    >


  export type search_historySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_ID?: boolean
    keyword?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["search_history"]>

  export type search_historySelectScalar = {
    user_ID?: boolean
    keyword?: boolean
  }


  export type search_historyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }


  export type $search_historyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "search_history"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      user_ID: number
      keyword: string
    }, ExtArgs["result"]["search_history"]>
    composites: {}
  }


  type search_historyGetPayload<S extends boolean | null | undefined | search_historyDefaultArgs> = $Result.GetResult<Prisma.$search_historyPayload, S>

  type search_historyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<search_historyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Search_historyCountAggregateInputType | true
    }

  export interface search_historyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['search_history'], meta: { name: 'search_history' } }
    /**
     * Find zero or one Search_history that matches the filter.
     * @param {search_historyFindUniqueArgs} args - Arguments to find a Search_history
     * @example
     * // Get one Search_history
     * const search_history = await prisma.search_history.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends search_historyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, search_historyFindUniqueArgs<ExtArgs>>
    ): Prisma__search_historyClient<$Result.GetResult<Prisma.$search_historyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Search_history that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {search_historyFindUniqueOrThrowArgs} args - Arguments to find a Search_history
     * @example
     * // Get one Search_history
     * const search_history = await prisma.search_history.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends search_historyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, search_historyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__search_historyClient<$Result.GetResult<Prisma.$search_historyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Search_history that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {search_historyFindFirstArgs} args - Arguments to find a Search_history
     * @example
     * // Get one Search_history
     * const search_history = await prisma.search_history.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends search_historyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, search_historyFindFirstArgs<ExtArgs>>
    ): Prisma__search_historyClient<$Result.GetResult<Prisma.$search_historyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Search_history that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {search_historyFindFirstOrThrowArgs} args - Arguments to find a Search_history
     * @example
     * // Get one Search_history
     * const search_history = await prisma.search_history.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends search_historyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, search_historyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__search_historyClient<$Result.GetResult<Prisma.$search_historyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Search_histories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {search_historyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Search_histories
     * const search_histories = await prisma.search_history.findMany()
     * 
     * // Get first 10 Search_histories
     * const search_histories = await prisma.search_history.findMany({ take: 10 })
     * 
     * // Only select the `user_ID`
     * const search_historyWithUser_IDOnly = await prisma.search_history.findMany({ select: { user_ID: true } })
     * 
    **/
    findMany<T extends search_historyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, search_historyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$search_historyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Search_history.
     * @param {search_historyCreateArgs} args - Arguments to create a Search_history.
     * @example
     * // Create one Search_history
     * const Search_history = await prisma.search_history.create({
     *   data: {
     *     // ... data to create a Search_history
     *   }
     * })
     * 
    **/
    create<T extends search_historyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, search_historyCreateArgs<ExtArgs>>
    ): Prisma__search_historyClient<$Result.GetResult<Prisma.$search_historyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Search_histories.
     * @param {search_historyCreateManyArgs} args - Arguments to create many Search_histories.
     * @example
     * // Create many Search_histories
     * const search_history = await prisma.search_history.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends search_historyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, search_historyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Search_history.
     * @param {search_historyDeleteArgs} args - Arguments to delete one Search_history.
     * @example
     * // Delete one Search_history
     * const Search_history = await prisma.search_history.delete({
     *   where: {
     *     // ... filter to delete one Search_history
     *   }
     * })
     * 
    **/
    delete<T extends search_historyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, search_historyDeleteArgs<ExtArgs>>
    ): Prisma__search_historyClient<$Result.GetResult<Prisma.$search_historyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Search_history.
     * @param {search_historyUpdateArgs} args - Arguments to update one Search_history.
     * @example
     * // Update one Search_history
     * const search_history = await prisma.search_history.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends search_historyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, search_historyUpdateArgs<ExtArgs>>
    ): Prisma__search_historyClient<$Result.GetResult<Prisma.$search_historyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Search_histories.
     * @param {search_historyDeleteManyArgs} args - Arguments to filter Search_histories to delete.
     * @example
     * // Delete a few Search_histories
     * const { count } = await prisma.search_history.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends search_historyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, search_historyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Search_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {search_historyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Search_histories
     * const search_history = await prisma.search_history.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends search_historyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, search_historyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Search_history.
     * @param {search_historyUpsertArgs} args - Arguments to update or create a Search_history.
     * @example
     * // Update or create a Search_history
     * const search_history = await prisma.search_history.upsert({
     *   create: {
     *     // ... data to create a Search_history
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Search_history we want to update
     *   }
     * })
    **/
    upsert<T extends search_historyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, search_historyUpsertArgs<ExtArgs>>
    ): Prisma__search_historyClient<$Result.GetResult<Prisma.$search_historyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Search_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {search_historyCountArgs} args - Arguments to filter Search_histories to count.
     * @example
     * // Count the number of Search_histories
     * const count = await prisma.search_history.count({
     *   where: {
     *     // ... the filter for the Search_histories we want to count
     *   }
     * })
    **/
    count<T extends search_historyCountArgs>(
      args?: Subset<T, search_historyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Search_historyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Search_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Search_historyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Search_historyAggregateArgs>(args: Subset<T, Search_historyAggregateArgs>): Prisma.PrismaPromise<GetSearch_historyAggregateType<T>>

    /**
     * Group by Search_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {search_historyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends search_historyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: search_historyGroupByArgs['orderBy'] }
        : { orderBy?: search_historyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, search_historyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSearch_historyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the search_history model
   */
  readonly fields: search_historyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for search_history.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__search_historyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the search_history model
   */ 
  interface search_historyFieldRefs {
    readonly user_ID: FieldRef<"search_history", 'Int'>
    readonly keyword: FieldRef<"search_history", 'String'>
  }
    

  // Custom InputTypes
  /**
   * search_history findUnique
   */
  export type search_historyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the search_history
     */
    select?: search_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: search_historyInclude<ExtArgs> | null
    /**
     * Filter, which search_history to fetch.
     */
    where: search_historyWhereUniqueInput
  }

  /**
   * search_history findUniqueOrThrow
   */
  export type search_historyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the search_history
     */
    select?: search_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: search_historyInclude<ExtArgs> | null
    /**
     * Filter, which search_history to fetch.
     */
    where: search_historyWhereUniqueInput
  }

  /**
   * search_history findFirst
   */
  export type search_historyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the search_history
     */
    select?: search_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: search_historyInclude<ExtArgs> | null
    /**
     * Filter, which search_history to fetch.
     */
    where?: search_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of search_histories to fetch.
     */
    orderBy?: search_historyOrderByWithRelationInput | search_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for search_histories.
     */
    cursor?: search_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` search_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` search_histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of search_histories.
     */
    distinct?: Search_historyScalarFieldEnum | Search_historyScalarFieldEnum[]
  }

  /**
   * search_history findFirstOrThrow
   */
  export type search_historyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the search_history
     */
    select?: search_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: search_historyInclude<ExtArgs> | null
    /**
     * Filter, which search_history to fetch.
     */
    where?: search_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of search_histories to fetch.
     */
    orderBy?: search_historyOrderByWithRelationInput | search_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for search_histories.
     */
    cursor?: search_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` search_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` search_histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of search_histories.
     */
    distinct?: Search_historyScalarFieldEnum | Search_historyScalarFieldEnum[]
  }

  /**
   * search_history findMany
   */
  export type search_historyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the search_history
     */
    select?: search_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: search_historyInclude<ExtArgs> | null
    /**
     * Filter, which search_histories to fetch.
     */
    where?: search_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of search_histories to fetch.
     */
    orderBy?: search_historyOrderByWithRelationInput | search_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing search_histories.
     */
    cursor?: search_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` search_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` search_histories.
     */
    skip?: number
    distinct?: Search_historyScalarFieldEnum | Search_historyScalarFieldEnum[]
  }

  /**
   * search_history create
   */
  export type search_historyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the search_history
     */
    select?: search_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: search_historyInclude<ExtArgs> | null
    /**
     * The data needed to create a search_history.
     */
    data: XOR<search_historyCreateInput, search_historyUncheckedCreateInput>
  }

  /**
   * search_history createMany
   */
  export type search_historyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many search_histories.
     */
    data: search_historyCreateManyInput | search_historyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * search_history update
   */
  export type search_historyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the search_history
     */
    select?: search_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: search_historyInclude<ExtArgs> | null
    /**
     * The data needed to update a search_history.
     */
    data: XOR<search_historyUpdateInput, search_historyUncheckedUpdateInput>
    /**
     * Choose, which search_history to update.
     */
    where: search_historyWhereUniqueInput
  }

  /**
   * search_history updateMany
   */
  export type search_historyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update search_histories.
     */
    data: XOR<search_historyUpdateManyMutationInput, search_historyUncheckedUpdateManyInput>
    /**
     * Filter which search_histories to update
     */
    where?: search_historyWhereInput
  }

  /**
   * search_history upsert
   */
  export type search_historyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the search_history
     */
    select?: search_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: search_historyInclude<ExtArgs> | null
    /**
     * The filter to search for the search_history to update in case it exists.
     */
    where: search_historyWhereUniqueInput
    /**
     * In case the search_history found by the `where` argument doesn't exist, create a new search_history with this data.
     */
    create: XOR<search_historyCreateInput, search_historyUncheckedCreateInput>
    /**
     * In case the search_history was found with the provided `where` argument, update it with this data.
     */
    update: XOR<search_historyUpdateInput, search_historyUncheckedUpdateInput>
  }

  /**
   * search_history delete
   */
  export type search_historyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the search_history
     */
    select?: search_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: search_historyInclude<ExtArgs> | null
    /**
     * Filter which search_history to delete.
     */
    where: search_historyWhereUniqueInput
  }

  /**
   * search_history deleteMany
   */
  export type search_historyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which search_histories to delete
     */
    where?: search_historyWhereInput
  }

  /**
   * search_history without action
   */
  export type search_historyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the search_history
     */
    select?: search_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: search_historyInclude<ExtArgs> | null
  }


  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    user_ID: number | null
    age: number | null
  }

  export type UserSumAggregateOutputType = {
    user_ID: number | null
    age: number | null
  }

  export type UserMinAggregateOutputType = {
    user_ID: number | null
    account: string | null
    password: string | null
    enrollment_date: Date | null
    address: string | null
    email_address: string | null
    birthdate: Date | null
    age: number | null
  }

  export type UserMaxAggregateOutputType = {
    user_ID: number | null
    account: string | null
    password: string | null
    enrollment_date: Date | null
    address: string | null
    email_address: string | null
    birthdate: Date | null
    age: number | null
  }

  export type UserCountAggregateOutputType = {
    user_ID: number
    account: number
    password: number
    enrollment_date: number
    address: number
    email_address: number
    birthdate: number
    age: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    user_ID?: true
    age?: true
  }

  export type UserSumAggregateInputType = {
    user_ID?: true
    age?: true
  }

  export type UserMinAggregateInputType = {
    user_ID?: true
    account?: true
    password?: true
    enrollment_date?: true
    address?: true
    email_address?: true
    birthdate?: true
    age?: true
  }

  export type UserMaxAggregateInputType = {
    user_ID?: true
    account?: true
    password?: true
    enrollment_date?: true
    address?: true
    email_address?: true
    birthdate?: true
    age?: true
  }

  export type UserCountAggregateInputType = {
    user_ID?: true
    account?: true
    password?: true
    enrollment_date?: true
    address?: true
    email_address?: true
    birthdate?: true
    age?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    user_ID: number
    account: string
    password: string
    enrollment_date: Date | null
    address: string
    email_address: string
    birthdate: Date
    age: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_ID?: boolean
    account?: boolean
    password?: boolean
    enrollment_date?: boolean
    address?: boolean
    email_address?: boolean
    birthdate?: boolean
    age?: boolean
    cart_item?: boolean | user$cart_itemArgs<ExtArgs>
    liking_list?: boolean | user$liking_listArgs<ExtArgs>
    orders?: boolean | user$ordersArgs<ExtArgs>
    search_history?: boolean | user$search_historyArgs<ExtArgs>
    user_phone?: boolean | user$user_phoneArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    user_ID?: boolean
    account?: boolean
    password?: boolean
    enrollment_date?: boolean
    address?: boolean
    email_address?: boolean
    birthdate?: boolean
    age?: boolean
  }


  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cart_item?: boolean | user$cart_itemArgs<ExtArgs>
    liking_list?: boolean | user$liking_listArgs<ExtArgs>
    orders?: boolean | user$ordersArgs<ExtArgs>
    search_history?: boolean | user$search_historyArgs<ExtArgs>
    user_phone?: boolean | user$user_phoneArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      cart_item: Prisma.$cart_itemPayload<ExtArgs>[]
      liking_list: Prisma.$liking_listPayload<ExtArgs>[]
      orders: Prisma.$ordersPayload<ExtArgs>[]
      search_history: Prisma.$search_historyPayload<ExtArgs>[]
      user_phone: Prisma.$user_phonePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_ID: number
      account: string
      password: string
      enrollment_date: Date | null
      address: string
      email_address: string
      birthdate: Date
      age: number | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_ID`
     * const userWithUser_IDOnly = await prisma.user.findMany({ select: { user_ID: true } })
     * 
    **/
    findMany<T extends userFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs<ExtArgs>>(
      args: SelectSubset<T, userCreateArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends userCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, userDeleteArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, userUpsertArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    cart_item<T extends user$cart_itemArgs<ExtArgs> = {}>(args?: Subset<T, user$cart_itemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cart_itemPayload<ExtArgs>, T, 'findMany'> | Null>;

    liking_list<T extends user$liking_listArgs<ExtArgs> = {}>(args?: Subset<T, user$liking_listArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$liking_listPayload<ExtArgs>, T, 'findMany'> | Null>;

    orders<T extends user$ordersArgs<ExtArgs> = {}>(args?: Subset<T, user$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findMany'> | Null>;

    search_history<T extends user$search_historyArgs<ExtArgs> = {}>(args?: Subset<T, user$search_historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$search_historyPayload<ExtArgs>, T, 'findMany'> | Null>;

    user_phone<T extends user$user_phoneArgs<ExtArgs> = {}>(args?: Subset<T, user$user_phoneArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_phonePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly user_ID: FieldRef<"user", 'Int'>
    readonly account: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly enrollment_date: FieldRef<"user", 'DateTime'>
    readonly address: FieldRef<"user", 'String'>
    readonly email_address: FieldRef<"user", 'String'>
    readonly birthdate: FieldRef<"user", 'DateTime'>
    readonly age: FieldRef<"user", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }

  /**
   * user.cart_item
   */
  export type user$cart_itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cart_item
     */
    select?: cart_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cart_itemInclude<ExtArgs> | null
    where?: cart_itemWhereInput
    orderBy?: cart_itemOrderByWithRelationInput | cart_itemOrderByWithRelationInput[]
    cursor?: cart_itemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Cart_itemScalarFieldEnum | Cart_itemScalarFieldEnum[]
  }

  /**
   * user.liking_list
   */
  export type user$liking_listArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the liking_list
     */
    select?: liking_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: liking_listInclude<ExtArgs> | null
    where?: liking_listWhereInput
    orderBy?: liking_listOrderByWithRelationInput | liking_listOrderByWithRelationInput[]
    cursor?: liking_listWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Liking_listScalarFieldEnum | Liking_listScalarFieldEnum[]
  }

  /**
   * user.orders
   */
  export type user$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * user.search_history
   */
  export type user$search_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the search_history
     */
    select?: search_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: search_historyInclude<ExtArgs> | null
    where?: search_historyWhereInput
    orderBy?: search_historyOrderByWithRelationInput | search_historyOrderByWithRelationInput[]
    cursor?: search_historyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Search_historyScalarFieldEnum | Search_historyScalarFieldEnum[]
  }

  /**
   * user.user_phone
   */
  export type user$user_phoneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_phone
     */
    select?: user_phoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_phoneInclude<ExtArgs> | null
    where?: user_phoneWhereInput
    orderBy?: user_phoneOrderByWithRelationInput | user_phoneOrderByWithRelationInput[]
    cursor?: user_phoneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_phoneScalarFieldEnum | User_phoneScalarFieldEnum[]
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
  }


  /**
   * Model user_phone
   */

  export type AggregateUser_phone = {
    _count: User_phoneCountAggregateOutputType | null
    _avg: User_phoneAvgAggregateOutputType | null
    _sum: User_phoneSumAggregateOutputType | null
    _min: User_phoneMinAggregateOutputType | null
    _max: User_phoneMaxAggregateOutputType | null
  }

  export type User_phoneAvgAggregateOutputType = {
    user_ID: number | null
  }

  export type User_phoneSumAggregateOutputType = {
    user_ID: number | null
  }

  export type User_phoneMinAggregateOutputType = {
    user_ID: number | null
    phone_number: string | null
  }

  export type User_phoneMaxAggregateOutputType = {
    user_ID: number | null
    phone_number: string | null
  }

  export type User_phoneCountAggregateOutputType = {
    user_ID: number
    phone_number: number
    _all: number
  }


  export type User_phoneAvgAggregateInputType = {
    user_ID?: true
  }

  export type User_phoneSumAggregateInputType = {
    user_ID?: true
  }

  export type User_phoneMinAggregateInputType = {
    user_ID?: true
    phone_number?: true
  }

  export type User_phoneMaxAggregateInputType = {
    user_ID?: true
    phone_number?: true
  }

  export type User_phoneCountAggregateInputType = {
    user_ID?: true
    phone_number?: true
    _all?: true
  }

  export type User_phoneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_phone to aggregate.
     */
    where?: user_phoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_phones to fetch.
     */
    orderBy?: user_phoneOrderByWithRelationInput | user_phoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_phoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_phones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_phones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_phones
    **/
    _count?: true | User_phoneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_phoneAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_phoneSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_phoneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_phoneMaxAggregateInputType
  }

  export type GetUser_phoneAggregateType<T extends User_phoneAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_phone]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_phone[P]>
      : GetScalarType<T[P], AggregateUser_phone[P]>
  }




  export type user_phoneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_phoneWhereInput
    orderBy?: user_phoneOrderByWithAggregationInput | user_phoneOrderByWithAggregationInput[]
    by: User_phoneScalarFieldEnum[] | User_phoneScalarFieldEnum
    having?: user_phoneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_phoneCountAggregateInputType | true
    _avg?: User_phoneAvgAggregateInputType
    _sum?: User_phoneSumAggregateInputType
    _min?: User_phoneMinAggregateInputType
    _max?: User_phoneMaxAggregateInputType
  }

  export type User_phoneGroupByOutputType = {
    user_ID: number
    phone_number: string
    _count: User_phoneCountAggregateOutputType | null
    _avg: User_phoneAvgAggregateOutputType | null
    _sum: User_phoneSumAggregateOutputType | null
    _min: User_phoneMinAggregateOutputType | null
    _max: User_phoneMaxAggregateOutputType | null
  }

  type GetUser_phoneGroupByPayload<T extends user_phoneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_phoneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_phoneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_phoneGroupByOutputType[P]>
            : GetScalarType<T[P], User_phoneGroupByOutputType[P]>
        }
      >
    >


  export type user_phoneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_ID?: boolean
    phone_number?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_phone"]>

  export type user_phoneSelectScalar = {
    user_ID?: boolean
    phone_number?: boolean
  }


  export type user_phoneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }


  export type $user_phonePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_phone"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      user_ID: number
      phone_number: string
    }, ExtArgs["result"]["user_phone"]>
    composites: {}
  }


  type user_phoneGetPayload<S extends boolean | null | undefined | user_phoneDefaultArgs> = $Result.GetResult<Prisma.$user_phonePayload, S>

  type user_phoneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<user_phoneFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: User_phoneCountAggregateInputType | true
    }

  export interface user_phoneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_phone'], meta: { name: 'user_phone' } }
    /**
     * Find zero or one User_phone that matches the filter.
     * @param {user_phoneFindUniqueArgs} args - Arguments to find a User_phone
     * @example
     * // Get one User_phone
     * const user_phone = await prisma.user_phone.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_phoneFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, user_phoneFindUniqueArgs<ExtArgs>>
    ): Prisma__user_phoneClient<$Result.GetResult<Prisma.$user_phonePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User_phone that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {user_phoneFindUniqueOrThrowArgs} args - Arguments to find a User_phone
     * @example
     * // Get one User_phone
     * const user_phone = await prisma.user_phone.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends user_phoneFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, user_phoneFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__user_phoneClient<$Result.GetResult<Prisma.$user_phonePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User_phone that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_phoneFindFirstArgs} args - Arguments to find a User_phone
     * @example
     * // Get one User_phone
     * const user_phone = await prisma.user_phone.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_phoneFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, user_phoneFindFirstArgs<ExtArgs>>
    ): Prisma__user_phoneClient<$Result.GetResult<Prisma.$user_phonePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User_phone that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_phoneFindFirstOrThrowArgs} args - Arguments to find a User_phone
     * @example
     * // Get one User_phone
     * const user_phone = await prisma.user_phone.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends user_phoneFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, user_phoneFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__user_phoneClient<$Result.GetResult<Prisma.$user_phonePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more User_phones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_phoneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_phones
     * const user_phones = await prisma.user_phone.findMany()
     * 
     * // Get first 10 User_phones
     * const user_phones = await prisma.user_phone.findMany({ take: 10 })
     * 
     * // Only select the `user_ID`
     * const user_phoneWithUser_IDOnly = await prisma.user_phone.findMany({ select: { user_ID: true } })
     * 
    **/
    findMany<T extends user_phoneFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_phoneFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_phonePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User_phone.
     * @param {user_phoneCreateArgs} args - Arguments to create a User_phone.
     * @example
     * // Create one User_phone
     * const User_phone = await prisma.user_phone.create({
     *   data: {
     *     // ... data to create a User_phone
     *   }
     * })
     * 
    **/
    create<T extends user_phoneCreateArgs<ExtArgs>>(
      args: SelectSubset<T, user_phoneCreateArgs<ExtArgs>>
    ): Prisma__user_phoneClient<$Result.GetResult<Prisma.$user_phonePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many User_phones.
     * @param {user_phoneCreateManyArgs} args - Arguments to create many User_phones.
     * @example
     * // Create many User_phones
     * const user_phone = await prisma.user_phone.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends user_phoneCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_phoneCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User_phone.
     * @param {user_phoneDeleteArgs} args - Arguments to delete one User_phone.
     * @example
     * // Delete one User_phone
     * const User_phone = await prisma.user_phone.delete({
     *   where: {
     *     // ... filter to delete one User_phone
     *   }
     * })
     * 
    **/
    delete<T extends user_phoneDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, user_phoneDeleteArgs<ExtArgs>>
    ): Prisma__user_phoneClient<$Result.GetResult<Prisma.$user_phonePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User_phone.
     * @param {user_phoneUpdateArgs} args - Arguments to update one User_phone.
     * @example
     * // Update one User_phone
     * const user_phone = await prisma.user_phone.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_phoneUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, user_phoneUpdateArgs<ExtArgs>>
    ): Prisma__user_phoneClient<$Result.GetResult<Prisma.$user_phonePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more User_phones.
     * @param {user_phoneDeleteManyArgs} args - Arguments to filter User_phones to delete.
     * @example
     * // Delete a few User_phones
     * const { count } = await prisma.user_phone.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_phoneDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_phoneDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_phones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_phoneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_phones
     * const user_phone = await prisma.user_phone.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_phoneUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, user_phoneUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_phone.
     * @param {user_phoneUpsertArgs} args - Arguments to update or create a User_phone.
     * @example
     * // Update or create a User_phone
     * const user_phone = await prisma.user_phone.upsert({
     *   create: {
     *     // ... data to create a User_phone
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_phone we want to update
     *   }
     * })
    **/
    upsert<T extends user_phoneUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, user_phoneUpsertArgs<ExtArgs>>
    ): Prisma__user_phoneClient<$Result.GetResult<Prisma.$user_phonePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of User_phones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_phoneCountArgs} args - Arguments to filter User_phones to count.
     * @example
     * // Count the number of User_phones
     * const count = await prisma.user_phone.count({
     *   where: {
     *     // ... the filter for the User_phones we want to count
     *   }
     * })
    **/
    count<T extends user_phoneCountArgs>(
      args?: Subset<T, user_phoneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_phoneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_phone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_phoneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_phoneAggregateArgs>(args: Subset<T, User_phoneAggregateArgs>): Prisma.PrismaPromise<GetUser_phoneAggregateType<T>>

    /**
     * Group by User_phone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_phoneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_phoneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_phoneGroupByArgs['orderBy'] }
        : { orderBy?: user_phoneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_phoneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_phoneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_phone model
   */
  readonly fields: user_phoneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_phone.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_phoneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the user_phone model
   */ 
  interface user_phoneFieldRefs {
    readonly user_ID: FieldRef<"user_phone", 'Int'>
    readonly phone_number: FieldRef<"user_phone", 'String'>
  }
    

  // Custom InputTypes
  /**
   * user_phone findUnique
   */
  export type user_phoneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_phone
     */
    select?: user_phoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_phoneInclude<ExtArgs> | null
    /**
     * Filter, which user_phone to fetch.
     */
    where: user_phoneWhereUniqueInput
  }

  /**
   * user_phone findUniqueOrThrow
   */
  export type user_phoneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_phone
     */
    select?: user_phoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_phoneInclude<ExtArgs> | null
    /**
     * Filter, which user_phone to fetch.
     */
    where: user_phoneWhereUniqueInput
  }

  /**
   * user_phone findFirst
   */
  export type user_phoneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_phone
     */
    select?: user_phoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_phoneInclude<ExtArgs> | null
    /**
     * Filter, which user_phone to fetch.
     */
    where?: user_phoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_phones to fetch.
     */
    orderBy?: user_phoneOrderByWithRelationInput | user_phoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_phones.
     */
    cursor?: user_phoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_phones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_phones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_phones.
     */
    distinct?: User_phoneScalarFieldEnum | User_phoneScalarFieldEnum[]
  }

  /**
   * user_phone findFirstOrThrow
   */
  export type user_phoneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_phone
     */
    select?: user_phoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_phoneInclude<ExtArgs> | null
    /**
     * Filter, which user_phone to fetch.
     */
    where?: user_phoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_phones to fetch.
     */
    orderBy?: user_phoneOrderByWithRelationInput | user_phoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_phones.
     */
    cursor?: user_phoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_phones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_phones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_phones.
     */
    distinct?: User_phoneScalarFieldEnum | User_phoneScalarFieldEnum[]
  }

  /**
   * user_phone findMany
   */
  export type user_phoneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_phone
     */
    select?: user_phoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_phoneInclude<ExtArgs> | null
    /**
     * Filter, which user_phones to fetch.
     */
    where?: user_phoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_phones to fetch.
     */
    orderBy?: user_phoneOrderByWithRelationInput | user_phoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_phones.
     */
    cursor?: user_phoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_phones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_phones.
     */
    skip?: number
    distinct?: User_phoneScalarFieldEnum | User_phoneScalarFieldEnum[]
  }

  /**
   * user_phone create
   */
  export type user_phoneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_phone
     */
    select?: user_phoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_phoneInclude<ExtArgs> | null
    /**
     * The data needed to create a user_phone.
     */
    data: XOR<user_phoneCreateInput, user_phoneUncheckedCreateInput>
  }

  /**
   * user_phone createMany
   */
  export type user_phoneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_phones.
     */
    data: user_phoneCreateManyInput | user_phoneCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_phone update
   */
  export type user_phoneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_phone
     */
    select?: user_phoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_phoneInclude<ExtArgs> | null
    /**
     * The data needed to update a user_phone.
     */
    data: XOR<user_phoneUpdateInput, user_phoneUncheckedUpdateInput>
    /**
     * Choose, which user_phone to update.
     */
    where: user_phoneWhereUniqueInput
  }

  /**
   * user_phone updateMany
   */
  export type user_phoneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_phones.
     */
    data: XOR<user_phoneUpdateManyMutationInput, user_phoneUncheckedUpdateManyInput>
    /**
     * Filter which user_phones to update
     */
    where?: user_phoneWhereInput
  }

  /**
   * user_phone upsert
   */
  export type user_phoneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_phone
     */
    select?: user_phoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_phoneInclude<ExtArgs> | null
    /**
     * The filter to search for the user_phone to update in case it exists.
     */
    where: user_phoneWhereUniqueInput
    /**
     * In case the user_phone found by the `where` argument doesn't exist, create a new user_phone with this data.
     */
    create: XOR<user_phoneCreateInput, user_phoneUncheckedCreateInput>
    /**
     * In case the user_phone was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_phoneUpdateInput, user_phoneUncheckedUpdateInput>
  }

  /**
   * user_phone delete
   */
  export type user_phoneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_phone
     */
    select?: user_phoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_phoneInclude<ExtArgs> | null
    /**
     * Filter which user_phone to delete.
     */
    where: user_phoneWhereUniqueInput
  }

  /**
   * user_phone deleteMany
   */
  export type user_phoneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_phones to delete
     */
    where?: user_phoneWhereInput
  }

  /**
   * user_phone without action
   */
  export type user_phoneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_phone
     */
    select?: user_phoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_phoneInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Cart_itemScalarFieldEnum: {
    cart_ID: 'cart_ID',
    product_ID: 'product_ID',
    quantity: 'quantity',
    prices: 'prices'
  };

  export type Cart_itemScalarFieldEnum = (typeof Cart_itemScalarFieldEnum)[keyof typeof Cart_itemScalarFieldEnum]


  export const Liking_listScalarFieldEnum: {
    user_ID: 'user_ID',
    product_ID: 'product_ID'
  };

  export type Liking_listScalarFieldEnum = (typeof Liking_listScalarFieldEnum)[keyof typeof Liking_listScalarFieldEnum]


  export const Order_itemScalarFieldEnum: {
    order_ID: 'order_ID',
    product_ID: 'product_ID',
    quantity: 'quantity',
    prices: 'prices'
  };

  export type Order_itemScalarFieldEnum = (typeof Order_itemScalarFieldEnum)[keyof typeof Order_itemScalarFieldEnum]


  export const OrdersScalarFieldEnum: {
    order_ID: 'order_ID',
    user_ID: 'user_ID',
    status: 'status'
  };

  export type OrdersScalarFieldEnum = (typeof OrdersScalarFieldEnum)[keyof typeof OrdersScalarFieldEnum]


  export const PayingScalarFieldEnum: {
    order_ID: 'order_ID',
    payment_ID: 'payment_ID'
  };

  export type PayingScalarFieldEnum = (typeof PayingScalarFieldEnum)[keyof typeof PayingScalarFieldEnum]


  export const Paying_infoScalarFieldEnum: {
    payment_ID: 'payment_ID',
    bank_account: 'bank_account',
    bank_num: 'bank_num',
    delivering_address: 'delivering_address',
    total_price: 'total_price',
    time_slot: 'time_slot'
  };

  export type Paying_infoScalarFieldEnum = (typeof Paying_infoScalarFieldEnum)[keyof typeof Paying_infoScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    product_ID: 'product_ID',
    product_name: 'product_name',
    discount: 'discount',
    stock: 'stock',
    price: 'price',
    tags: 'tags',
    sales: 'sales',
    likes: 'likes',
    avg_score: 'avg_score'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const Search_historyScalarFieldEnum: {
    user_ID: 'user_ID',
    keyword: 'keyword'
  };

  export type Search_historyScalarFieldEnum = (typeof Search_historyScalarFieldEnum)[keyof typeof Search_historyScalarFieldEnum]


  export const UserScalarFieldEnum: {
    user_ID: 'user_ID',
    account: 'account',
    password: 'password',
    enrollment_date: 'enrollment_date',
    address: 'address',
    email_address: 'email_address',
    birthdate: 'birthdate',
    age: 'age'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const User_phoneScalarFieldEnum: {
    user_ID: 'user_ID',
    phone_number: 'phone_number'
  };

  export type User_phoneScalarFieldEnum = (typeof User_phoneScalarFieldEnum)[keyof typeof User_phoneScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type cart_itemWhereInput = {
    AND?: cart_itemWhereInput | cart_itemWhereInput[]
    OR?: cart_itemWhereInput[]
    NOT?: cart_itemWhereInput | cart_itemWhereInput[]
    cart_ID?: IntFilter<"cart_item"> | number
    product_ID?: IntFilter<"cart_item"> | number
    quantity?: IntFilter<"cart_item"> | number
    prices?: DecimalNullableFilter<"cart_item"> | Decimal | DecimalJsLike | number | string | null
    user?: XOR<UserRelationFilter, userWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
  }

  export type cart_itemOrderByWithRelationInput = {
    cart_ID?: SortOrder
    product_ID?: SortOrder
    quantity?: SortOrder
    prices?: SortOrderInput | SortOrder
    user?: userOrderByWithRelationInput
    product?: productOrderByWithRelationInput
  }

  export type cart_itemWhereUniqueInput = Prisma.AtLeast<{
    cart_ID_product_ID?: cart_itemCart_IDProduct_IDCompoundUniqueInput
    AND?: cart_itemWhereInput | cart_itemWhereInput[]
    OR?: cart_itemWhereInput[]
    NOT?: cart_itemWhereInput | cart_itemWhereInput[]
    cart_ID?: IntFilter<"cart_item"> | number
    product_ID?: IntFilter<"cart_item"> | number
    quantity?: IntFilter<"cart_item"> | number
    prices?: DecimalNullableFilter<"cart_item"> | Decimal | DecimalJsLike | number | string | null
    user?: XOR<UserRelationFilter, userWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
  }, "cart_ID_product_ID">

  export type cart_itemOrderByWithAggregationInput = {
    cart_ID?: SortOrder
    product_ID?: SortOrder
    quantity?: SortOrder
    prices?: SortOrderInput | SortOrder
    _count?: cart_itemCountOrderByAggregateInput
    _avg?: cart_itemAvgOrderByAggregateInput
    _max?: cart_itemMaxOrderByAggregateInput
    _min?: cart_itemMinOrderByAggregateInput
    _sum?: cart_itemSumOrderByAggregateInput
  }

  export type cart_itemScalarWhereWithAggregatesInput = {
    AND?: cart_itemScalarWhereWithAggregatesInput | cart_itemScalarWhereWithAggregatesInput[]
    OR?: cart_itemScalarWhereWithAggregatesInput[]
    NOT?: cart_itemScalarWhereWithAggregatesInput | cart_itemScalarWhereWithAggregatesInput[]
    cart_ID?: IntWithAggregatesFilter<"cart_item"> | number
    product_ID?: IntWithAggregatesFilter<"cart_item"> | number
    quantity?: IntWithAggregatesFilter<"cart_item"> | number
    prices?: DecimalNullableWithAggregatesFilter<"cart_item"> | Decimal | DecimalJsLike | number | string | null
  }

  export type liking_listWhereInput = {
    AND?: liking_listWhereInput | liking_listWhereInput[]
    OR?: liking_listWhereInput[]
    NOT?: liking_listWhereInput | liking_listWhereInput[]
    user_ID?: IntFilter<"liking_list"> | number
    product_ID?: IntFilter<"liking_list"> | number
    user?: XOR<UserRelationFilter, userWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
  }

  export type liking_listOrderByWithRelationInput = {
    user_ID?: SortOrder
    product_ID?: SortOrder
    user?: userOrderByWithRelationInput
    product?: productOrderByWithRelationInput
  }

  export type liking_listWhereUniqueInput = Prisma.AtLeast<{
    user_ID_product_ID?: liking_listUser_IDProduct_IDCompoundUniqueInput
    AND?: liking_listWhereInput | liking_listWhereInput[]
    OR?: liking_listWhereInput[]
    NOT?: liking_listWhereInput | liking_listWhereInput[]
    user_ID?: IntFilter<"liking_list"> | number
    product_ID?: IntFilter<"liking_list"> | number
    user?: XOR<UserRelationFilter, userWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
  }, "user_ID_product_ID">

  export type liking_listOrderByWithAggregationInput = {
    user_ID?: SortOrder
    product_ID?: SortOrder
    _count?: liking_listCountOrderByAggregateInput
    _avg?: liking_listAvgOrderByAggregateInput
    _max?: liking_listMaxOrderByAggregateInput
    _min?: liking_listMinOrderByAggregateInput
    _sum?: liking_listSumOrderByAggregateInput
  }

  export type liking_listScalarWhereWithAggregatesInput = {
    AND?: liking_listScalarWhereWithAggregatesInput | liking_listScalarWhereWithAggregatesInput[]
    OR?: liking_listScalarWhereWithAggregatesInput[]
    NOT?: liking_listScalarWhereWithAggregatesInput | liking_listScalarWhereWithAggregatesInput[]
    user_ID?: IntWithAggregatesFilter<"liking_list"> | number
    product_ID?: IntWithAggregatesFilter<"liking_list"> | number
  }

  export type order_itemWhereInput = {
    AND?: order_itemWhereInput | order_itemWhereInput[]
    OR?: order_itemWhereInput[]
    NOT?: order_itemWhereInput | order_itemWhereInput[]
    order_ID?: IntFilter<"order_item"> | number
    product_ID?: IntFilter<"order_item"> | number
    quantity?: IntFilter<"order_item"> | number
    prices?: DecimalNullableFilter<"order_item"> | Decimal | DecimalJsLike | number | string | null
    orders?: XOR<OrdersRelationFilter, ordersWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
  }

  export type order_itemOrderByWithRelationInput = {
    order_ID?: SortOrder
    product_ID?: SortOrder
    quantity?: SortOrder
    prices?: SortOrderInput | SortOrder
    orders?: ordersOrderByWithRelationInput
    product?: productOrderByWithRelationInput
  }

  export type order_itemWhereUniqueInput = Prisma.AtLeast<{
    order_ID_product_ID?: order_itemOrder_IDProduct_IDCompoundUniqueInput
    AND?: order_itemWhereInput | order_itemWhereInput[]
    OR?: order_itemWhereInput[]
    NOT?: order_itemWhereInput | order_itemWhereInput[]
    order_ID?: IntFilter<"order_item"> | number
    product_ID?: IntFilter<"order_item"> | number
    quantity?: IntFilter<"order_item"> | number
    prices?: DecimalNullableFilter<"order_item"> | Decimal | DecimalJsLike | number | string | null
    orders?: XOR<OrdersRelationFilter, ordersWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
  }, "order_ID_product_ID">

  export type order_itemOrderByWithAggregationInput = {
    order_ID?: SortOrder
    product_ID?: SortOrder
    quantity?: SortOrder
    prices?: SortOrderInput | SortOrder
    _count?: order_itemCountOrderByAggregateInput
    _avg?: order_itemAvgOrderByAggregateInput
    _max?: order_itemMaxOrderByAggregateInput
    _min?: order_itemMinOrderByAggregateInput
    _sum?: order_itemSumOrderByAggregateInput
  }

  export type order_itemScalarWhereWithAggregatesInput = {
    AND?: order_itemScalarWhereWithAggregatesInput | order_itemScalarWhereWithAggregatesInput[]
    OR?: order_itemScalarWhereWithAggregatesInput[]
    NOT?: order_itemScalarWhereWithAggregatesInput | order_itemScalarWhereWithAggregatesInput[]
    order_ID?: IntWithAggregatesFilter<"order_item"> | number
    product_ID?: IntWithAggregatesFilter<"order_item"> | number
    quantity?: IntWithAggregatesFilter<"order_item"> | number
    prices?: DecimalNullableWithAggregatesFilter<"order_item"> | Decimal | DecimalJsLike | number | string | null
  }

  export type ordersWhereInput = {
    AND?: ordersWhereInput | ordersWhereInput[]
    OR?: ordersWhereInput[]
    NOT?: ordersWhereInput | ordersWhereInput[]
    order_ID?: IntFilter<"orders"> | number
    user_ID?: IntFilter<"orders"> | number
    status?: IntNullableFilter<"orders"> | number | null
    order_item?: Order_itemListRelationFilter
    user?: XOR<UserRelationFilter, userWhereInput>
    paying?: PayingListRelationFilter
  }

  export type ordersOrderByWithRelationInput = {
    order_ID?: SortOrder
    user_ID?: SortOrder
    status?: SortOrderInput | SortOrder
    order_item?: order_itemOrderByRelationAggregateInput
    user?: userOrderByWithRelationInput
    paying?: payingOrderByRelationAggregateInput
  }

  export type ordersWhereUniqueInput = Prisma.AtLeast<{
    order_ID?: number
    user_ID?: number
    order_ID_user_ID?: ordersOrder_IDUser_IDCompoundUniqueInput
    AND?: ordersWhereInput | ordersWhereInput[]
    OR?: ordersWhereInput[]
    NOT?: ordersWhereInput | ordersWhereInput[]
    status?: IntNullableFilter<"orders"> | number | null
    order_item?: Order_itemListRelationFilter
    user?: XOR<UserRelationFilter, userWhereInput>
    paying?: PayingListRelationFilter
  }, "order_ID_user_ID" | "order_ID" | "user_ID">

  export type ordersOrderByWithAggregationInput = {
    order_ID?: SortOrder
    user_ID?: SortOrder
    status?: SortOrderInput | SortOrder
    _count?: ordersCountOrderByAggregateInput
    _avg?: ordersAvgOrderByAggregateInput
    _max?: ordersMaxOrderByAggregateInput
    _min?: ordersMinOrderByAggregateInput
    _sum?: ordersSumOrderByAggregateInput
  }

  export type ordersScalarWhereWithAggregatesInput = {
    AND?: ordersScalarWhereWithAggregatesInput | ordersScalarWhereWithAggregatesInput[]
    OR?: ordersScalarWhereWithAggregatesInput[]
    NOT?: ordersScalarWhereWithAggregatesInput | ordersScalarWhereWithAggregatesInput[]
    order_ID?: IntWithAggregatesFilter<"orders"> | number
    user_ID?: IntWithAggregatesFilter<"orders"> | number
    status?: IntNullableWithAggregatesFilter<"orders"> | number | null
  }

  export type payingWhereInput = {
    AND?: payingWhereInput | payingWhereInput[]
    OR?: payingWhereInput[]
    NOT?: payingWhereInput | payingWhereInput[]
    order_ID?: IntFilter<"paying"> | number
    payment_ID?: IntFilter<"paying"> | number
    orders?: XOR<OrdersRelationFilter, ordersWhereInput>
    paying_info?: XOR<Paying_infoRelationFilter, paying_infoWhereInput>
  }

  export type payingOrderByWithRelationInput = {
    order_ID?: SortOrder
    payment_ID?: SortOrder
    orders?: ordersOrderByWithRelationInput
    paying_info?: paying_infoOrderByWithRelationInput
  }

  export type payingWhereUniqueInput = Prisma.AtLeast<{
    order_ID_payment_ID?: payingOrder_IDPayment_IDCompoundUniqueInput
    AND?: payingWhereInput | payingWhereInput[]
    OR?: payingWhereInput[]
    NOT?: payingWhereInput | payingWhereInput[]
    order_ID?: IntFilter<"paying"> | number
    payment_ID?: IntFilter<"paying"> | number
    orders?: XOR<OrdersRelationFilter, ordersWhereInput>
    paying_info?: XOR<Paying_infoRelationFilter, paying_infoWhereInput>
  }, "order_ID_payment_ID">

  export type payingOrderByWithAggregationInput = {
    order_ID?: SortOrder
    payment_ID?: SortOrder
    _count?: payingCountOrderByAggregateInput
    _avg?: payingAvgOrderByAggregateInput
    _max?: payingMaxOrderByAggregateInput
    _min?: payingMinOrderByAggregateInput
    _sum?: payingSumOrderByAggregateInput
  }

  export type payingScalarWhereWithAggregatesInput = {
    AND?: payingScalarWhereWithAggregatesInput | payingScalarWhereWithAggregatesInput[]
    OR?: payingScalarWhereWithAggregatesInput[]
    NOT?: payingScalarWhereWithAggregatesInput | payingScalarWhereWithAggregatesInput[]
    order_ID?: IntWithAggregatesFilter<"paying"> | number
    payment_ID?: IntWithAggregatesFilter<"paying"> | number
  }

  export type paying_infoWhereInput = {
    AND?: paying_infoWhereInput | paying_infoWhereInput[]
    OR?: paying_infoWhereInput[]
    NOT?: paying_infoWhereInput | paying_infoWhereInput[]
    payment_ID?: IntFilter<"paying_info"> | number
    bank_account?: StringFilter<"paying_info"> | string
    bank_num?: StringFilter<"paying_info"> | string
    delivering_address?: StringFilter<"paying_info"> | string
    total_price?: DecimalNullableFilter<"paying_info"> | Decimal | DecimalJsLike | number | string | null
    time_slot?: DateTimeNullableFilter<"paying_info"> | Date | string | null
    paying?: PayingListRelationFilter
  }

  export type paying_infoOrderByWithRelationInput = {
    payment_ID?: SortOrder
    bank_account?: SortOrder
    bank_num?: SortOrder
    delivering_address?: SortOrder
    total_price?: SortOrderInput | SortOrder
    time_slot?: SortOrderInput | SortOrder
    paying?: payingOrderByRelationAggregateInput
  }

  export type paying_infoWhereUniqueInput = Prisma.AtLeast<{
    payment_ID?: number
    AND?: paying_infoWhereInput | paying_infoWhereInput[]
    OR?: paying_infoWhereInput[]
    NOT?: paying_infoWhereInput | paying_infoWhereInput[]
    bank_account?: StringFilter<"paying_info"> | string
    bank_num?: StringFilter<"paying_info"> | string
    delivering_address?: StringFilter<"paying_info"> | string
    total_price?: DecimalNullableFilter<"paying_info"> | Decimal | DecimalJsLike | number | string | null
    time_slot?: DateTimeNullableFilter<"paying_info"> | Date | string | null
    paying?: PayingListRelationFilter
  }, "payment_ID">

  export type paying_infoOrderByWithAggregationInput = {
    payment_ID?: SortOrder
    bank_account?: SortOrder
    bank_num?: SortOrder
    delivering_address?: SortOrder
    total_price?: SortOrderInput | SortOrder
    time_slot?: SortOrderInput | SortOrder
    _count?: paying_infoCountOrderByAggregateInput
    _avg?: paying_infoAvgOrderByAggregateInput
    _max?: paying_infoMaxOrderByAggregateInput
    _min?: paying_infoMinOrderByAggregateInput
    _sum?: paying_infoSumOrderByAggregateInput
  }

  export type paying_infoScalarWhereWithAggregatesInput = {
    AND?: paying_infoScalarWhereWithAggregatesInput | paying_infoScalarWhereWithAggregatesInput[]
    OR?: paying_infoScalarWhereWithAggregatesInput[]
    NOT?: paying_infoScalarWhereWithAggregatesInput | paying_infoScalarWhereWithAggregatesInput[]
    payment_ID?: IntWithAggregatesFilter<"paying_info"> | number
    bank_account?: StringWithAggregatesFilter<"paying_info"> | string
    bank_num?: StringWithAggregatesFilter<"paying_info"> | string
    delivering_address?: StringWithAggregatesFilter<"paying_info"> | string
    total_price?: DecimalNullableWithAggregatesFilter<"paying_info"> | Decimal | DecimalJsLike | number | string | null
    time_slot?: DateTimeNullableWithAggregatesFilter<"paying_info"> | Date | string | null
  }

  export type productWhereInput = {
    AND?: productWhereInput | productWhereInput[]
    OR?: productWhereInput[]
    NOT?: productWhereInput | productWhereInput[]
    product_ID?: IntFilter<"product"> | number
    product_name?: StringFilter<"product"> | string
    discount?: FloatNullableFilter<"product"> | number | null
    stock?: IntNullableFilter<"product"> | number | null
    price?: DecimalNullableFilter<"product"> | Decimal | DecimalJsLike | number | string | null
    tags?: StringNullableFilter<"product"> | string | null
    sales?: IntNullableFilter<"product"> | number | null
    likes?: IntNullableFilter<"product"> | number | null
    avg_score?: FloatNullableFilter<"product"> | number | null
    cart_item?: Cart_itemListRelationFilter
    liking_list?: Liking_listListRelationFilter
    order_item?: Order_itemListRelationFilter
  }

  export type productOrderByWithRelationInput = {
    product_ID?: SortOrder
    product_name?: SortOrder
    discount?: SortOrderInput | SortOrder
    stock?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    sales?: SortOrderInput | SortOrder
    likes?: SortOrderInput | SortOrder
    avg_score?: SortOrderInput | SortOrder
    cart_item?: cart_itemOrderByRelationAggregateInput
    liking_list?: liking_listOrderByRelationAggregateInput
    order_item?: order_itemOrderByRelationAggregateInput
  }

  export type productWhereUniqueInput = Prisma.AtLeast<{
    product_ID?: number
    AND?: productWhereInput | productWhereInput[]
    OR?: productWhereInput[]
    NOT?: productWhereInput | productWhereInput[]
    product_name?: StringFilter<"product"> | string
    discount?: FloatNullableFilter<"product"> | number | null
    stock?: IntNullableFilter<"product"> | number | null
    price?: DecimalNullableFilter<"product"> | Decimal | DecimalJsLike | number | string | null
    tags?: StringNullableFilter<"product"> | string | null
    sales?: IntNullableFilter<"product"> | number | null
    likes?: IntNullableFilter<"product"> | number | null
    avg_score?: FloatNullableFilter<"product"> | number | null
    cart_item?: Cart_itemListRelationFilter
    liking_list?: Liking_listListRelationFilter
    order_item?: Order_itemListRelationFilter
  }, "product_ID">

  export type productOrderByWithAggregationInput = {
    product_ID?: SortOrder
    product_name?: SortOrder
    discount?: SortOrderInput | SortOrder
    stock?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    sales?: SortOrderInput | SortOrder
    likes?: SortOrderInput | SortOrder
    avg_score?: SortOrderInput | SortOrder
    _count?: productCountOrderByAggregateInput
    _avg?: productAvgOrderByAggregateInput
    _max?: productMaxOrderByAggregateInput
    _min?: productMinOrderByAggregateInput
    _sum?: productSumOrderByAggregateInput
  }

  export type productScalarWhereWithAggregatesInput = {
    AND?: productScalarWhereWithAggregatesInput | productScalarWhereWithAggregatesInput[]
    OR?: productScalarWhereWithAggregatesInput[]
    NOT?: productScalarWhereWithAggregatesInput | productScalarWhereWithAggregatesInput[]
    product_ID?: IntWithAggregatesFilter<"product"> | number
    product_name?: StringWithAggregatesFilter<"product"> | string
    discount?: FloatNullableWithAggregatesFilter<"product"> | number | null
    stock?: IntNullableWithAggregatesFilter<"product"> | number | null
    price?: DecimalNullableWithAggregatesFilter<"product"> | Decimal | DecimalJsLike | number | string | null
    tags?: StringNullableWithAggregatesFilter<"product"> | string | null
    sales?: IntNullableWithAggregatesFilter<"product"> | number | null
    likes?: IntNullableWithAggregatesFilter<"product"> | number | null
    avg_score?: FloatNullableWithAggregatesFilter<"product"> | number | null
  }

  export type search_historyWhereInput = {
    AND?: search_historyWhereInput | search_historyWhereInput[]
    OR?: search_historyWhereInput[]
    NOT?: search_historyWhereInput | search_historyWhereInput[]
    user_ID?: IntFilter<"search_history"> | number
    keyword?: StringFilter<"search_history"> | string
    user?: XOR<UserRelationFilter, userWhereInput>
  }

  export type search_historyOrderByWithRelationInput = {
    user_ID?: SortOrder
    keyword?: SortOrder
    user?: userOrderByWithRelationInput
  }

  export type search_historyWhereUniqueInput = Prisma.AtLeast<{
    user_ID_keyword?: search_historyUser_IDKeywordCompoundUniqueInput
    AND?: search_historyWhereInput | search_historyWhereInput[]
    OR?: search_historyWhereInput[]
    NOT?: search_historyWhereInput | search_historyWhereInput[]
    user_ID?: IntFilter<"search_history"> | number
    keyword?: StringFilter<"search_history"> | string
    user?: XOR<UserRelationFilter, userWhereInput>
  }, "user_ID_keyword">

  export type search_historyOrderByWithAggregationInput = {
    user_ID?: SortOrder
    keyword?: SortOrder
    _count?: search_historyCountOrderByAggregateInput
    _avg?: search_historyAvgOrderByAggregateInput
    _max?: search_historyMaxOrderByAggregateInput
    _min?: search_historyMinOrderByAggregateInput
    _sum?: search_historySumOrderByAggregateInput
  }

  export type search_historyScalarWhereWithAggregatesInput = {
    AND?: search_historyScalarWhereWithAggregatesInput | search_historyScalarWhereWithAggregatesInput[]
    OR?: search_historyScalarWhereWithAggregatesInput[]
    NOT?: search_historyScalarWhereWithAggregatesInput | search_historyScalarWhereWithAggregatesInput[]
    user_ID?: IntWithAggregatesFilter<"search_history"> | number
    keyword?: StringWithAggregatesFilter<"search_history"> | string
  }

  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    user_ID?: IntFilter<"user"> | number
    account?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    enrollment_date?: DateTimeNullableFilter<"user"> | Date | string | null
    address?: StringFilter<"user"> | string
    email_address?: StringFilter<"user"> | string
    birthdate?: DateTimeFilter<"user"> | Date | string
    age?: IntNullableFilter<"user"> | number | null
    cart_item?: Cart_itemListRelationFilter
    liking_list?: Liking_listListRelationFilter
    orders?: OrdersListRelationFilter
    search_history?: Search_historyListRelationFilter
    user_phone?: User_phoneListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    user_ID?: SortOrder
    account?: SortOrder
    password?: SortOrder
    enrollment_date?: SortOrderInput | SortOrder
    address?: SortOrder
    email_address?: SortOrder
    birthdate?: SortOrder
    age?: SortOrderInput | SortOrder
    cart_item?: cart_itemOrderByRelationAggregateInput
    liking_list?: liking_listOrderByRelationAggregateInput
    orders?: ordersOrderByRelationAggregateInput
    search_history?: search_historyOrderByRelationAggregateInput
    user_phone?: user_phoneOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    user_ID?: number
    account?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    password?: StringFilter<"user"> | string
    enrollment_date?: DateTimeNullableFilter<"user"> | Date | string | null
    address?: StringFilter<"user"> | string
    email_address?: StringFilter<"user"> | string
    birthdate?: DateTimeFilter<"user"> | Date | string
    age?: IntNullableFilter<"user"> | number | null
    cart_item?: Cart_itemListRelationFilter
    liking_list?: Liking_listListRelationFilter
    orders?: OrdersListRelationFilter
    search_history?: Search_historyListRelationFilter
    user_phone?: User_phoneListRelationFilter
  }, "user_ID" | "account">

  export type userOrderByWithAggregationInput = {
    user_ID?: SortOrder
    account?: SortOrder
    password?: SortOrder
    enrollment_date?: SortOrderInput | SortOrder
    address?: SortOrder
    email_address?: SortOrder
    birthdate?: SortOrder
    age?: SortOrderInput | SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    user_ID?: IntWithAggregatesFilter<"user"> | number
    account?: StringWithAggregatesFilter<"user"> | string
    password?: StringWithAggregatesFilter<"user"> | string
    enrollment_date?: DateTimeNullableWithAggregatesFilter<"user"> | Date | string | null
    address?: StringWithAggregatesFilter<"user"> | string
    email_address?: StringWithAggregatesFilter<"user"> | string
    birthdate?: DateTimeWithAggregatesFilter<"user"> | Date | string
    age?: IntNullableWithAggregatesFilter<"user"> | number | null
  }

  export type user_phoneWhereInput = {
    AND?: user_phoneWhereInput | user_phoneWhereInput[]
    OR?: user_phoneWhereInput[]
    NOT?: user_phoneWhereInput | user_phoneWhereInput[]
    user_ID?: IntFilter<"user_phone"> | number
    phone_number?: StringFilter<"user_phone"> | string
    user?: XOR<UserRelationFilter, userWhereInput>
  }

  export type user_phoneOrderByWithRelationInput = {
    user_ID?: SortOrder
    phone_number?: SortOrder
    user?: userOrderByWithRelationInput
  }

  export type user_phoneWhereUniqueInput = Prisma.AtLeast<{
    user_ID_phone_number?: user_phoneUser_IDPhone_numberCompoundUniqueInput
    AND?: user_phoneWhereInput | user_phoneWhereInput[]
    OR?: user_phoneWhereInput[]
    NOT?: user_phoneWhereInput | user_phoneWhereInput[]
    user_ID?: IntFilter<"user_phone"> | number
    phone_number?: StringFilter<"user_phone"> | string
    user?: XOR<UserRelationFilter, userWhereInput>
  }, "user_ID_phone_number">

  export type user_phoneOrderByWithAggregationInput = {
    user_ID?: SortOrder
    phone_number?: SortOrder
    _count?: user_phoneCountOrderByAggregateInput
    _avg?: user_phoneAvgOrderByAggregateInput
    _max?: user_phoneMaxOrderByAggregateInput
    _min?: user_phoneMinOrderByAggregateInput
    _sum?: user_phoneSumOrderByAggregateInput
  }

  export type user_phoneScalarWhereWithAggregatesInput = {
    AND?: user_phoneScalarWhereWithAggregatesInput | user_phoneScalarWhereWithAggregatesInput[]
    OR?: user_phoneScalarWhereWithAggregatesInput[]
    NOT?: user_phoneScalarWhereWithAggregatesInput | user_phoneScalarWhereWithAggregatesInput[]
    user_ID?: IntWithAggregatesFilter<"user_phone"> | number
    phone_number?: StringWithAggregatesFilter<"user_phone"> | string
  }

  export type cart_itemCreateInput = {
    quantity: number
    prices?: Decimal | DecimalJsLike | number | string | null
    user: userCreateNestedOneWithoutCart_itemInput
    product: productCreateNestedOneWithoutCart_itemInput
  }

  export type cart_itemUncheckedCreateInput = {
    cart_ID: number
    product_ID: number
    quantity: number
    prices?: Decimal | DecimalJsLike | number | string | null
  }

  export type cart_itemUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    user?: userUpdateOneRequiredWithoutCart_itemNestedInput
    product?: productUpdateOneRequiredWithoutCart_itemNestedInput
  }

  export type cart_itemUncheckedUpdateInput = {
    cart_ID?: IntFieldUpdateOperationsInput | number
    product_ID?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type cart_itemCreateManyInput = {
    cart_ID: number
    product_ID: number
    quantity: number
    prices?: Decimal | DecimalJsLike | number | string | null
  }

  export type cart_itemUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type cart_itemUncheckedUpdateManyInput = {
    cart_ID?: IntFieldUpdateOperationsInput | number
    product_ID?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type liking_listCreateInput = {
    user: userCreateNestedOneWithoutLiking_listInput
    product: productCreateNestedOneWithoutLiking_listInput
  }

  export type liking_listUncheckedCreateInput = {
    user_ID: number
    product_ID: number
  }

  export type liking_listUpdateInput = {
    user?: userUpdateOneRequiredWithoutLiking_listNestedInput
    product?: productUpdateOneRequiredWithoutLiking_listNestedInput
  }

  export type liking_listUncheckedUpdateInput = {
    user_ID?: IntFieldUpdateOperationsInput | number
    product_ID?: IntFieldUpdateOperationsInput | number
  }

  export type liking_listCreateManyInput = {
    user_ID: number
    product_ID: number
  }

  export type liking_listUpdateManyMutationInput = {

  }

  export type liking_listUncheckedUpdateManyInput = {
    user_ID?: IntFieldUpdateOperationsInput | number
    product_ID?: IntFieldUpdateOperationsInput | number
  }

  export type order_itemCreateInput = {
    quantity: number
    prices?: Decimal | DecimalJsLike | number | string | null
    orders: ordersCreateNestedOneWithoutOrder_itemInput
    product: productCreateNestedOneWithoutOrder_itemInput
  }

  export type order_itemUncheckedCreateInput = {
    order_ID: number
    product_ID: number
    quantity: number
    prices?: Decimal | DecimalJsLike | number | string | null
  }

  export type order_itemUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    orders?: ordersUpdateOneRequiredWithoutOrder_itemNestedInput
    product?: productUpdateOneRequiredWithoutOrder_itemNestedInput
  }

  export type order_itemUncheckedUpdateInput = {
    order_ID?: IntFieldUpdateOperationsInput | number
    product_ID?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type order_itemCreateManyInput = {
    order_ID: number
    product_ID: number
    quantity: number
    prices?: Decimal | DecimalJsLike | number | string | null
  }

  export type order_itemUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type order_itemUncheckedUpdateManyInput = {
    order_ID?: IntFieldUpdateOperationsInput | number
    product_ID?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ordersCreateInput = {
    order_ID?: number
    status?: number | null
    order_item?: order_itemCreateNestedManyWithoutOrdersInput
    user: userCreateNestedOneWithoutOrdersInput
    paying?: payingCreateNestedManyWithoutOrdersInput
  }

  export type ordersUncheckedCreateInput = {
    order_ID?: number
    user_ID: number
    status?: number | null
    order_item?: order_itemUncheckedCreateNestedManyWithoutOrdersInput
    paying?: payingUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersUpdateInput = {
    status?: NullableIntFieldUpdateOperationsInput | number | null
    order_item?: order_itemUpdateManyWithoutOrdersNestedInput
    user?: userUpdateOneRequiredWithoutOrdersNestedInput
    paying?: payingUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateInput = {
    order_ID?: IntFieldUpdateOperationsInput | number
    user_ID?: IntFieldUpdateOperationsInput | number
    status?: NullableIntFieldUpdateOperationsInput | number | null
    order_item?: order_itemUncheckedUpdateManyWithoutOrdersNestedInput
    paying?: payingUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ordersCreateManyInput = {
    order_ID?: number
    user_ID: number
    status?: number | null
  }

  export type ordersUpdateManyMutationInput = {
    status?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ordersUncheckedUpdateManyInput = {
    order_ID?: IntFieldUpdateOperationsInput | number
    user_ID?: IntFieldUpdateOperationsInput | number
    status?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type payingCreateInput = {
    orders: ordersCreateNestedOneWithoutPayingInput
    paying_info: paying_infoCreateNestedOneWithoutPayingInput
  }

  export type payingUncheckedCreateInput = {
    order_ID: number
    payment_ID: number
  }

  export type payingUpdateInput = {
    orders?: ordersUpdateOneRequiredWithoutPayingNestedInput
    paying_info?: paying_infoUpdateOneRequiredWithoutPayingNestedInput
  }

  export type payingUncheckedUpdateInput = {
    order_ID?: IntFieldUpdateOperationsInput | number
    payment_ID?: IntFieldUpdateOperationsInput | number
  }

  export type payingCreateManyInput = {
    order_ID: number
    payment_ID: number
  }

  export type payingUpdateManyMutationInput = {

  }

  export type payingUncheckedUpdateManyInput = {
    order_ID?: IntFieldUpdateOperationsInput | number
    payment_ID?: IntFieldUpdateOperationsInput | number
  }

  export type paying_infoCreateInput = {
    bank_account: string
    bank_num: string
    delivering_address: string
    total_price?: Decimal | DecimalJsLike | number | string | null
    time_slot?: Date | string | null
    paying?: payingCreateNestedManyWithoutPaying_infoInput
  }

  export type paying_infoUncheckedCreateInput = {
    payment_ID?: number
    bank_account: string
    bank_num: string
    delivering_address: string
    total_price?: Decimal | DecimalJsLike | number | string | null
    time_slot?: Date | string | null
    paying?: payingUncheckedCreateNestedManyWithoutPaying_infoInput
  }

  export type paying_infoUpdateInput = {
    bank_account?: StringFieldUpdateOperationsInput | string
    bank_num?: StringFieldUpdateOperationsInput | string
    delivering_address?: StringFieldUpdateOperationsInput | string
    total_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    time_slot?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paying?: payingUpdateManyWithoutPaying_infoNestedInput
  }

  export type paying_infoUncheckedUpdateInput = {
    payment_ID?: IntFieldUpdateOperationsInput | number
    bank_account?: StringFieldUpdateOperationsInput | string
    bank_num?: StringFieldUpdateOperationsInput | string
    delivering_address?: StringFieldUpdateOperationsInput | string
    total_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    time_slot?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paying?: payingUncheckedUpdateManyWithoutPaying_infoNestedInput
  }

  export type paying_infoCreateManyInput = {
    payment_ID?: number
    bank_account: string
    bank_num: string
    delivering_address: string
    total_price?: Decimal | DecimalJsLike | number | string | null
    time_slot?: Date | string | null
  }

  export type paying_infoUpdateManyMutationInput = {
    bank_account?: StringFieldUpdateOperationsInput | string
    bank_num?: StringFieldUpdateOperationsInput | string
    delivering_address?: StringFieldUpdateOperationsInput | string
    total_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    time_slot?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type paying_infoUncheckedUpdateManyInput = {
    payment_ID?: IntFieldUpdateOperationsInput | number
    bank_account?: StringFieldUpdateOperationsInput | string
    bank_num?: StringFieldUpdateOperationsInput | string
    delivering_address?: StringFieldUpdateOperationsInput | string
    total_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    time_slot?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type productCreateInput = {
    product_name: string
    discount?: number | null
    stock?: number | null
    price?: Decimal | DecimalJsLike | number | string | null
    tags?: string | null
    sales?: number | null
    likes?: number | null
    avg_score?: number | null
    cart_item?: cart_itemCreateNestedManyWithoutProductInput
    liking_list?: liking_listCreateNestedManyWithoutProductInput
    order_item?: order_itemCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateInput = {
    product_ID?: number
    product_name: string
    discount?: number | null
    stock?: number | null
    price?: Decimal | DecimalJsLike | number | string | null
    tags?: string | null
    sales?: number | null
    likes?: number | null
    avg_score?: number | null
    cart_item?: cart_itemUncheckedCreateNestedManyWithoutProductInput
    liking_list?: liking_listUncheckedCreateNestedManyWithoutProductInput
    order_item?: order_itemUncheckedCreateNestedManyWithoutProductInput
  }

  export type productUpdateInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    sales?: NullableIntFieldUpdateOperationsInput | number | null
    likes?: NullableIntFieldUpdateOperationsInput | number | null
    avg_score?: NullableFloatFieldUpdateOperationsInput | number | null
    cart_item?: cart_itemUpdateManyWithoutProductNestedInput
    liking_list?: liking_listUpdateManyWithoutProductNestedInput
    order_item?: order_itemUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateInput = {
    product_ID?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    sales?: NullableIntFieldUpdateOperationsInput | number | null
    likes?: NullableIntFieldUpdateOperationsInput | number | null
    avg_score?: NullableFloatFieldUpdateOperationsInput | number | null
    cart_item?: cart_itemUncheckedUpdateManyWithoutProductNestedInput
    liking_list?: liking_listUncheckedUpdateManyWithoutProductNestedInput
    order_item?: order_itemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productCreateManyInput = {
    product_ID?: number
    product_name: string
    discount?: number | null
    stock?: number | null
    price?: Decimal | DecimalJsLike | number | string | null
    tags?: string | null
    sales?: number | null
    likes?: number | null
    avg_score?: number | null
  }

  export type productUpdateManyMutationInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    sales?: NullableIntFieldUpdateOperationsInput | number | null
    likes?: NullableIntFieldUpdateOperationsInput | number | null
    avg_score?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type productUncheckedUpdateManyInput = {
    product_ID?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    sales?: NullableIntFieldUpdateOperationsInput | number | null
    likes?: NullableIntFieldUpdateOperationsInput | number | null
    avg_score?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type search_historyCreateInput = {
    keyword: string
    user: userCreateNestedOneWithoutSearch_historyInput
  }

  export type search_historyUncheckedCreateInput = {
    user_ID: number
    keyword: string
  }

  export type search_historyUpdateInput = {
    keyword?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutSearch_historyNestedInput
  }

  export type search_historyUncheckedUpdateInput = {
    user_ID?: IntFieldUpdateOperationsInput | number
    keyword?: StringFieldUpdateOperationsInput | string
  }

  export type search_historyCreateManyInput = {
    user_ID: number
    keyword: string
  }

  export type search_historyUpdateManyMutationInput = {
    keyword?: StringFieldUpdateOperationsInput | string
  }

  export type search_historyUncheckedUpdateManyInput = {
    user_ID?: IntFieldUpdateOperationsInput | number
    keyword?: StringFieldUpdateOperationsInput | string
  }

  export type userCreateInput = {
    account: string
    password: string
    enrollment_date?: Date | string | null
    address: string
    email_address: string
    birthdate: Date | string
    age?: number | null
    cart_item?: cart_itemCreateNestedManyWithoutUserInput
    liking_list?: liking_listCreateNestedManyWithoutUserInput
    orders?: ordersCreateNestedManyWithoutUserInput
    search_history?: search_historyCreateNestedManyWithoutUserInput
    user_phone?: user_phoneCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    user_ID?: number
    account: string
    password: string
    enrollment_date?: Date | string | null
    address: string
    email_address: string
    birthdate: Date | string
    age?: number | null
    cart_item?: cart_itemUncheckedCreateNestedManyWithoutUserInput
    liking_list?: liking_listUncheckedCreateNestedManyWithoutUserInput
    orders?: ordersUncheckedCreateNestedManyWithoutUserInput
    search_history?: search_historyUncheckedCreateNestedManyWithoutUserInput
    user_phone?: user_phoneUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    account?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    email_address?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    cart_item?: cart_itemUpdateManyWithoutUserNestedInput
    liking_list?: liking_listUpdateManyWithoutUserNestedInput
    orders?: ordersUpdateManyWithoutUserNestedInput
    search_history?: search_historyUpdateManyWithoutUserNestedInput
    user_phone?: user_phoneUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    user_ID?: IntFieldUpdateOperationsInput | number
    account?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    email_address?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    cart_item?: cart_itemUncheckedUpdateManyWithoutUserNestedInput
    liking_list?: liking_listUncheckedUpdateManyWithoutUserNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUserNestedInput
    search_history?: search_historyUncheckedUpdateManyWithoutUserNestedInput
    user_phone?: user_phoneUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    user_ID?: number
    account: string
    password: string
    enrollment_date?: Date | string | null
    address: string
    email_address: string
    birthdate: Date | string
    age?: number | null
  }

  export type userUpdateManyMutationInput = {
    account?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    email_address?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type userUncheckedUpdateManyInput = {
    user_ID?: IntFieldUpdateOperationsInput | number
    account?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    email_address?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type user_phoneCreateInput = {
    phone_number: string
    user: userCreateNestedOneWithoutUser_phoneInput
  }

  export type user_phoneUncheckedCreateInput = {
    user_ID: number
    phone_number: string
  }

  export type user_phoneUpdateInput = {
    phone_number?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutUser_phoneNestedInput
  }

  export type user_phoneUncheckedUpdateInput = {
    user_ID?: IntFieldUpdateOperationsInput | number
    phone_number?: StringFieldUpdateOperationsInput | string
  }

  export type user_phoneCreateManyInput = {
    user_ID: number
    phone_number: string
  }

  export type user_phoneUpdateManyMutationInput = {
    phone_number?: StringFieldUpdateOperationsInput | string
  }

  export type user_phoneUncheckedUpdateManyInput = {
    user_ID?: IntFieldUpdateOperationsInput | number
    phone_number?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type ProductRelationFilter = {
    is?: productWhereInput
    isNot?: productWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type cart_itemCart_IDProduct_IDCompoundUniqueInput = {
    cart_ID: number
    product_ID: number
  }

  export type cart_itemCountOrderByAggregateInput = {
    cart_ID?: SortOrder
    product_ID?: SortOrder
    quantity?: SortOrder
    prices?: SortOrder
  }

  export type cart_itemAvgOrderByAggregateInput = {
    cart_ID?: SortOrder
    product_ID?: SortOrder
    quantity?: SortOrder
    prices?: SortOrder
  }

  export type cart_itemMaxOrderByAggregateInput = {
    cart_ID?: SortOrder
    product_ID?: SortOrder
    quantity?: SortOrder
    prices?: SortOrder
  }

  export type cart_itemMinOrderByAggregateInput = {
    cart_ID?: SortOrder
    product_ID?: SortOrder
    quantity?: SortOrder
    prices?: SortOrder
  }

  export type cart_itemSumOrderByAggregateInput = {
    cart_ID?: SortOrder
    product_ID?: SortOrder
    quantity?: SortOrder
    prices?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type liking_listUser_IDProduct_IDCompoundUniqueInput = {
    user_ID: number
    product_ID: number
  }

  export type liking_listCountOrderByAggregateInput = {
    user_ID?: SortOrder
    product_ID?: SortOrder
  }

  export type liking_listAvgOrderByAggregateInput = {
    user_ID?: SortOrder
    product_ID?: SortOrder
  }

  export type liking_listMaxOrderByAggregateInput = {
    user_ID?: SortOrder
    product_ID?: SortOrder
  }

  export type liking_listMinOrderByAggregateInput = {
    user_ID?: SortOrder
    product_ID?: SortOrder
  }

  export type liking_listSumOrderByAggregateInput = {
    user_ID?: SortOrder
    product_ID?: SortOrder
  }

  export type OrdersRelationFilter = {
    is?: ordersWhereInput
    isNot?: ordersWhereInput
  }

  export type order_itemOrder_IDProduct_IDCompoundUniqueInput = {
    order_ID: number
    product_ID: number
  }

  export type order_itemCountOrderByAggregateInput = {
    order_ID?: SortOrder
    product_ID?: SortOrder
    quantity?: SortOrder
    prices?: SortOrder
  }

  export type order_itemAvgOrderByAggregateInput = {
    order_ID?: SortOrder
    product_ID?: SortOrder
    quantity?: SortOrder
    prices?: SortOrder
  }

  export type order_itemMaxOrderByAggregateInput = {
    order_ID?: SortOrder
    product_ID?: SortOrder
    quantity?: SortOrder
    prices?: SortOrder
  }

  export type order_itemMinOrderByAggregateInput = {
    order_ID?: SortOrder
    product_ID?: SortOrder
    quantity?: SortOrder
    prices?: SortOrder
  }

  export type order_itemSumOrderByAggregateInput = {
    order_ID?: SortOrder
    product_ID?: SortOrder
    quantity?: SortOrder
    prices?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type Order_itemListRelationFilter = {
    every?: order_itemWhereInput
    some?: order_itemWhereInput
    none?: order_itemWhereInput
  }

  export type PayingListRelationFilter = {
    every?: payingWhereInput
    some?: payingWhereInput
    none?: payingWhereInput
  }

  export type order_itemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type payingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ordersOrder_IDUser_IDCompoundUniqueInput = {
    order_ID: number
    user_ID: number
  }

  export type ordersCountOrderByAggregateInput = {
    order_ID?: SortOrder
    user_ID?: SortOrder
    status?: SortOrder
  }

  export type ordersAvgOrderByAggregateInput = {
    order_ID?: SortOrder
    user_ID?: SortOrder
    status?: SortOrder
  }

  export type ordersMaxOrderByAggregateInput = {
    order_ID?: SortOrder
    user_ID?: SortOrder
    status?: SortOrder
  }

  export type ordersMinOrderByAggregateInput = {
    order_ID?: SortOrder
    user_ID?: SortOrder
    status?: SortOrder
  }

  export type ordersSumOrderByAggregateInput = {
    order_ID?: SortOrder
    user_ID?: SortOrder
    status?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type Paying_infoRelationFilter = {
    is?: paying_infoWhereInput
    isNot?: paying_infoWhereInput
  }

  export type payingOrder_IDPayment_IDCompoundUniqueInput = {
    order_ID: number
    payment_ID: number
  }

  export type payingCountOrderByAggregateInput = {
    order_ID?: SortOrder
    payment_ID?: SortOrder
  }

  export type payingAvgOrderByAggregateInput = {
    order_ID?: SortOrder
    payment_ID?: SortOrder
  }

  export type payingMaxOrderByAggregateInput = {
    order_ID?: SortOrder
    payment_ID?: SortOrder
  }

  export type payingMinOrderByAggregateInput = {
    order_ID?: SortOrder
    payment_ID?: SortOrder
  }

  export type payingSumOrderByAggregateInput = {
    order_ID?: SortOrder
    payment_ID?: SortOrder
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type paying_infoCountOrderByAggregateInput = {
    payment_ID?: SortOrder
    bank_account?: SortOrder
    bank_num?: SortOrder
    delivering_address?: SortOrder
    total_price?: SortOrder
    time_slot?: SortOrder
  }

  export type paying_infoAvgOrderByAggregateInput = {
    payment_ID?: SortOrder
    total_price?: SortOrder
  }

  export type paying_infoMaxOrderByAggregateInput = {
    payment_ID?: SortOrder
    bank_account?: SortOrder
    bank_num?: SortOrder
    delivering_address?: SortOrder
    total_price?: SortOrder
    time_slot?: SortOrder
  }

  export type paying_infoMinOrderByAggregateInput = {
    payment_ID?: SortOrder
    bank_account?: SortOrder
    bank_num?: SortOrder
    delivering_address?: SortOrder
    total_price?: SortOrder
    time_slot?: SortOrder
  }

  export type paying_infoSumOrderByAggregateInput = {
    payment_ID?: SortOrder
    total_price?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type Cart_itemListRelationFilter = {
    every?: cart_itemWhereInput
    some?: cart_itemWhereInput
    none?: cart_itemWhereInput
  }

  export type Liking_listListRelationFilter = {
    every?: liking_listWhereInput
    some?: liking_listWhereInput
    none?: liking_listWhereInput
  }

  export type cart_itemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type liking_listOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productCountOrderByAggregateInput = {
    product_ID?: SortOrder
    product_name?: SortOrder
    discount?: SortOrder
    stock?: SortOrder
    price?: SortOrder
    tags?: SortOrder
    sales?: SortOrder
    likes?: SortOrder
    avg_score?: SortOrder
  }

  export type productAvgOrderByAggregateInput = {
    product_ID?: SortOrder
    discount?: SortOrder
    stock?: SortOrder
    price?: SortOrder
    sales?: SortOrder
    likes?: SortOrder
    avg_score?: SortOrder
  }

  export type productMaxOrderByAggregateInput = {
    product_ID?: SortOrder
    product_name?: SortOrder
    discount?: SortOrder
    stock?: SortOrder
    price?: SortOrder
    tags?: SortOrder
    sales?: SortOrder
    likes?: SortOrder
    avg_score?: SortOrder
  }

  export type productMinOrderByAggregateInput = {
    product_ID?: SortOrder
    product_name?: SortOrder
    discount?: SortOrder
    stock?: SortOrder
    price?: SortOrder
    tags?: SortOrder
    sales?: SortOrder
    likes?: SortOrder
    avg_score?: SortOrder
  }

  export type productSumOrderByAggregateInput = {
    product_ID?: SortOrder
    discount?: SortOrder
    stock?: SortOrder
    price?: SortOrder
    sales?: SortOrder
    likes?: SortOrder
    avg_score?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type search_historyUser_IDKeywordCompoundUniqueInput = {
    user_ID: number
    keyword: string
  }

  export type search_historyCountOrderByAggregateInput = {
    user_ID?: SortOrder
    keyword?: SortOrder
  }

  export type search_historyAvgOrderByAggregateInput = {
    user_ID?: SortOrder
  }

  export type search_historyMaxOrderByAggregateInput = {
    user_ID?: SortOrder
    keyword?: SortOrder
  }

  export type search_historyMinOrderByAggregateInput = {
    user_ID?: SortOrder
    keyword?: SortOrder
  }

  export type search_historySumOrderByAggregateInput = {
    user_ID?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type OrdersListRelationFilter = {
    every?: ordersWhereInput
    some?: ordersWhereInput
    none?: ordersWhereInput
  }

  export type Search_historyListRelationFilter = {
    every?: search_historyWhereInput
    some?: search_historyWhereInput
    none?: search_historyWhereInput
  }

  export type User_phoneListRelationFilter = {
    every?: user_phoneWhereInput
    some?: user_phoneWhereInput
    none?: user_phoneWhereInput
  }

  export type ordersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type search_historyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_phoneOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    user_ID?: SortOrder
    account?: SortOrder
    password?: SortOrder
    enrollment_date?: SortOrder
    address?: SortOrder
    email_address?: SortOrder
    birthdate?: SortOrder
    age?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    user_ID?: SortOrder
    age?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    user_ID?: SortOrder
    account?: SortOrder
    password?: SortOrder
    enrollment_date?: SortOrder
    address?: SortOrder
    email_address?: SortOrder
    birthdate?: SortOrder
    age?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    user_ID?: SortOrder
    account?: SortOrder
    password?: SortOrder
    enrollment_date?: SortOrder
    address?: SortOrder
    email_address?: SortOrder
    birthdate?: SortOrder
    age?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    user_ID?: SortOrder
    age?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type user_phoneUser_IDPhone_numberCompoundUniqueInput = {
    user_ID: number
    phone_number: string
  }

  export type user_phoneCountOrderByAggregateInput = {
    user_ID?: SortOrder
    phone_number?: SortOrder
  }

  export type user_phoneAvgOrderByAggregateInput = {
    user_ID?: SortOrder
  }

  export type user_phoneMaxOrderByAggregateInput = {
    user_ID?: SortOrder
    phone_number?: SortOrder
  }

  export type user_phoneMinOrderByAggregateInput = {
    user_ID?: SortOrder
    phone_number?: SortOrder
  }

  export type user_phoneSumOrderByAggregateInput = {
    user_ID?: SortOrder
  }

  export type userCreateNestedOneWithoutCart_itemInput = {
    create?: XOR<userCreateWithoutCart_itemInput, userUncheckedCreateWithoutCart_itemInput>
    connectOrCreate?: userCreateOrConnectWithoutCart_itemInput
    connect?: userWhereUniqueInput
  }

  export type productCreateNestedOneWithoutCart_itemInput = {
    create?: XOR<productCreateWithoutCart_itemInput, productUncheckedCreateWithoutCart_itemInput>
    connectOrCreate?: productCreateOrConnectWithoutCart_itemInput
    connect?: productWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type userUpdateOneRequiredWithoutCart_itemNestedInput = {
    create?: XOR<userCreateWithoutCart_itemInput, userUncheckedCreateWithoutCart_itemInput>
    connectOrCreate?: userCreateOrConnectWithoutCart_itemInput
    upsert?: userUpsertWithoutCart_itemInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutCart_itemInput, userUpdateWithoutCart_itemInput>, userUncheckedUpdateWithoutCart_itemInput>
  }

  export type productUpdateOneRequiredWithoutCart_itemNestedInput = {
    create?: XOR<productCreateWithoutCart_itemInput, productUncheckedCreateWithoutCart_itemInput>
    connectOrCreate?: productCreateOrConnectWithoutCart_itemInput
    upsert?: productUpsertWithoutCart_itemInput
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutCart_itemInput, productUpdateWithoutCart_itemInput>, productUncheckedUpdateWithoutCart_itemInput>
  }

  export type userCreateNestedOneWithoutLiking_listInput = {
    create?: XOR<userCreateWithoutLiking_listInput, userUncheckedCreateWithoutLiking_listInput>
    connectOrCreate?: userCreateOrConnectWithoutLiking_listInput
    connect?: userWhereUniqueInput
  }

  export type productCreateNestedOneWithoutLiking_listInput = {
    create?: XOR<productCreateWithoutLiking_listInput, productUncheckedCreateWithoutLiking_listInput>
    connectOrCreate?: productCreateOrConnectWithoutLiking_listInput
    connect?: productWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutLiking_listNestedInput = {
    create?: XOR<userCreateWithoutLiking_listInput, userUncheckedCreateWithoutLiking_listInput>
    connectOrCreate?: userCreateOrConnectWithoutLiking_listInput
    upsert?: userUpsertWithoutLiking_listInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutLiking_listInput, userUpdateWithoutLiking_listInput>, userUncheckedUpdateWithoutLiking_listInput>
  }

  export type productUpdateOneRequiredWithoutLiking_listNestedInput = {
    create?: XOR<productCreateWithoutLiking_listInput, productUncheckedCreateWithoutLiking_listInput>
    connectOrCreate?: productCreateOrConnectWithoutLiking_listInput
    upsert?: productUpsertWithoutLiking_listInput
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutLiking_listInput, productUpdateWithoutLiking_listInput>, productUncheckedUpdateWithoutLiking_listInput>
  }

  export type ordersCreateNestedOneWithoutOrder_itemInput = {
    create?: XOR<ordersCreateWithoutOrder_itemInput, ordersUncheckedCreateWithoutOrder_itemInput>
    connectOrCreate?: ordersCreateOrConnectWithoutOrder_itemInput
    connect?: ordersWhereUniqueInput
  }

  export type productCreateNestedOneWithoutOrder_itemInput = {
    create?: XOR<productCreateWithoutOrder_itemInput, productUncheckedCreateWithoutOrder_itemInput>
    connectOrCreate?: productCreateOrConnectWithoutOrder_itemInput
    connect?: productWhereUniqueInput
  }

  export type ordersUpdateOneRequiredWithoutOrder_itemNestedInput = {
    create?: XOR<ordersCreateWithoutOrder_itemInput, ordersUncheckedCreateWithoutOrder_itemInput>
    connectOrCreate?: ordersCreateOrConnectWithoutOrder_itemInput
    upsert?: ordersUpsertWithoutOrder_itemInput
    connect?: ordersWhereUniqueInput
    update?: XOR<XOR<ordersUpdateToOneWithWhereWithoutOrder_itemInput, ordersUpdateWithoutOrder_itemInput>, ordersUncheckedUpdateWithoutOrder_itemInput>
  }

  export type productUpdateOneRequiredWithoutOrder_itemNestedInput = {
    create?: XOR<productCreateWithoutOrder_itemInput, productUncheckedCreateWithoutOrder_itemInput>
    connectOrCreate?: productCreateOrConnectWithoutOrder_itemInput
    upsert?: productUpsertWithoutOrder_itemInput
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutOrder_itemInput, productUpdateWithoutOrder_itemInput>, productUncheckedUpdateWithoutOrder_itemInput>
  }

  export type order_itemCreateNestedManyWithoutOrdersInput = {
    create?: XOR<order_itemCreateWithoutOrdersInput, order_itemUncheckedCreateWithoutOrdersInput> | order_itemCreateWithoutOrdersInput[] | order_itemUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: order_itemCreateOrConnectWithoutOrdersInput | order_itemCreateOrConnectWithoutOrdersInput[]
    createMany?: order_itemCreateManyOrdersInputEnvelope
    connect?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
  }

  export type userCreateNestedOneWithoutOrdersInput = {
    create?: XOR<userCreateWithoutOrdersInput, userUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: userCreateOrConnectWithoutOrdersInput
    connect?: userWhereUniqueInput
  }

  export type payingCreateNestedManyWithoutOrdersInput = {
    create?: XOR<payingCreateWithoutOrdersInput, payingUncheckedCreateWithoutOrdersInput> | payingCreateWithoutOrdersInput[] | payingUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: payingCreateOrConnectWithoutOrdersInput | payingCreateOrConnectWithoutOrdersInput[]
    createMany?: payingCreateManyOrdersInputEnvelope
    connect?: payingWhereUniqueInput | payingWhereUniqueInput[]
  }

  export type order_itemUncheckedCreateNestedManyWithoutOrdersInput = {
    create?: XOR<order_itemCreateWithoutOrdersInput, order_itemUncheckedCreateWithoutOrdersInput> | order_itemCreateWithoutOrdersInput[] | order_itemUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: order_itemCreateOrConnectWithoutOrdersInput | order_itemCreateOrConnectWithoutOrdersInput[]
    createMany?: order_itemCreateManyOrdersInputEnvelope
    connect?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
  }

  export type payingUncheckedCreateNestedManyWithoutOrdersInput = {
    create?: XOR<payingCreateWithoutOrdersInput, payingUncheckedCreateWithoutOrdersInput> | payingCreateWithoutOrdersInput[] | payingUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: payingCreateOrConnectWithoutOrdersInput | payingCreateOrConnectWithoutOrdersInput[]
    createMany?: payingCreateManyOrdersInputEnvelope
    connect?: payingWhereUniqueInput | payingWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type order_itemUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<order_itemCreateWithoutOrdersInput, order_itemUncheckedCreateWithoutOrdersInput> | order_itemCreateWithoutOrdersInput[] | order_itemUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: order_itemCreateOrConnectWithoutOrdersInput | order_itemCreateOrConnectWithoutOrdersInput[]
    upsert?: order_itemUpsertWithWhereUniqueWithoutOrdersInput | order_itemUpsertWithWhereUniqueWithoutOrdersInput[]
    createMany?: order_itemCreateManyOrdersInputEnvelope
    set?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
    disconnect?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
    delete?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
    connect?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
    update?: order_itemUpdateWithWhereUniqueWithoutOrdersInput | order_itemUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: order_itemUpdateManyWithWhereWithoutOrdersInput | order_itemUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: order_itemScalarWhereInput | order_itemScalarWhereInput[]
  }

  export type userUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<userCreateWithoutOrdersInput, userUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: userCreateOrConnectWithoutOrdersInput
    upsert?: userUpsertWithoutOrdersInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutOrdersInput, userUpdateWithoutOrdersInput>, userUncheckedUpdateWithoutOrdersInput>
  }

  export type payingUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<payingCreateWithoutOrdersInput, payingUncheckedCreateWithoutOrdersInput> | payingCreateWithoutOrdersInput[] | payingUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: payingCreateOrConnectWithoutOrdersInput | payingCreateOrConnectWithoutOrdersInput[]
    upsert?: payingUpsertWithWhereUniqueWithoutOrdersInput | payingUpsertWithWhereUniqueWithoutOrdersInput[]
    createMany?: payingCreateManyOrdersInputEnvelope
    set?: payingWhereUniqueInput | payingWhereUniqueInput[]
    disconnect?: payingWhereUniqueInput | payingWhereUniqueInput[]
    delete?: payingWhereUniqueInput | payingWhereUniqueInput[]
    connect?: payingWhereUniqueInput | payingWhereUniqueInput[]
    update?: payingUpdateWithWhereUniqueWithoutOrdersInput | payingUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: payingUpdateManyWithWhereWithoutOrdersInput | payingUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: payingScalarWhereInput | payingScalarWhereInput[]
  }

  export type order_itemUncheckedUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<order_itemCreateWithoutOrdersInput, order_itemUncheckedCreateWithoutOrdersInput> | order_itemCreateWithoutOrdersInput[] | order_itemUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: order_itemCreateOrConnectWithoutOrdersInput | order_itemCreateOrConnectWithoutOrdersInput[]
    upsert?: order_itemUpsertWithWhereUniqueWithoutOrdersInput | order_itemUpsertWithWhereUniqueWithoutOrdersInput[]
    createMany?: order_itemCreateManyOrdersInputEnvelope
    set?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
    disconnect?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
    delete?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
    connect?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
    update?: order_itemUpdateWithWhereUniqueWithoutOrdersInput | order_itemUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: order_itemUpdateManyWithWhereWithoutOrdersInput | order_itemUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: order_itemScalarWhereInput | order_itemScalarWhereInput[]
  }

  export type payingUncheckedUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<payingCreateWithoutOrdersInput, payingUncheckedCreateWithoutOrdersInput> | payingCreateWithoutOrdersInput[] | payingUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: payingCreateOrConnectWithoutOrdersInput | payingCreateOrConnectWithoutOrdersInput[]
    upsert?: payingUpsertWithWhereUniqueWithoutOrdersInput | payingUpsertWithWhereUniqueWithoutOrdersInput[]
    createMany?: payingCreateManyOrdersInputEnvelope
    set?: payingWhereUniqueInput | payingWhereUniqueInput[]
    disconnect?: payingWhereUniqueInput | payingWhereUniqueInput[]
    delete?: payingWhereUniqueInput | payingWhereUniqueInput[]
    connect?: payingWhereUniqueInput | payingWhereUniqueInput[]
    update?: payingUpdateWithWhereUniqueWithoutOrdersInput | payingUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: payingUpdateManyWithWhereWithoutOrdersInput | payingUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: payingScalarWhereInput | payingScalarWhereInput[]
  }

  export type ordersCreateNestedOneWithoutPayingInput = {
    create?: XOR<ordersCreateWithoutPayingInput, ordersUncheckedCreateWithoutPayingInput>
    connectOrCreate?: ordersCreateOrConnectWithoutPayingInput
    connect?: ordersWhereUniqueInput
  }

  export type paying_infoCreateNestedOneWithoutPayingInput = {
    create?: XOR<paying_infoCreateWithoutPayingInput, paying_infoUncheckedCreateWithoutPayingInput>
    connectOrCreate?: paying_infoCreateOrConnectWithoutPayingInput
    connect?: paying_infoWhereUniqueInput
  }

  export type ordersUpdateOneRequiredWithoutPayingNestedInput = {
    create?: XOR<ordersCreateWithoutPayingInput, ordersUncheckedCreateWithoutPayingInput>
    connectOrCreate?: ordersCreateOrConnectWithoutPayingInput
    upsert?: ordersUpsertWithoutPayingInput
    connect?: ordersWhereUniqueInput
    update?: XOR<XOR<ordersUpdateToOneWithWhereWithoutPayingInput, ordersUpdateWithoutPayingInput>, ordersUncheckedUpdateWithoutPayingInput>
  }

  export type paying_infoUpdateOneRequiredWithoutPayingNestedInput = {
    create?: XOR<paying_infoCreateWithoutPayingInput, paying_infoUncheckedCreateWithoutPayingInput>
    connectOrCreate?: paying_infoCreateOrConnectWithoutPayingInput
    upsert?: paying_infoUpsertWithoutPayingInput
    connect?: paying_infoWhereUniqueInput
    update?: XOR<XOR<paying_infoUpdateToOneWithWhereWithoutPayingInput, paying_infoUpdateWithoutPayingInput>, paying_infoUncheckedUpdateWithoutPayingInput>
  }

  export type payingCreateNestedManyWithoutPaying_infoInput = {
    create?: XOR<payingCreateWithoutPaying_infoInput, payingUncheckedCreateWithoutPaying_infoInput> | payingCreateWithoutPaying_infoInput[] | payingUncheckedCreateWithoutPaying_infoInput[]
    connectOrCreate?: payingCreateOrConnectWithoutPaying_infoInput | payingCreateOrConnectWithoutPaying_infoInput[]
    createMany?: payingCreateManyPaying_infoInputEnvelope
    connect?: payingWhereUniqueInput | payingWhereUniqueInput[]
  }

  export type payingUncheckedCreateNestedManyWithoutPaying_infoInput = {
    create?: XOR<payingCreateWithoutPaying_infoInput, payingUncheckedCreateWithoutPaying_infoInput> | payingCreateWithoutPaying_infoInput[] | payingUncheckedCreateWithoutPaying_infoInput[]
    connectOrCreate?: payingCreateOrConnectWithoutPaying_infoInput | payingCreateOrConnectWithoutPaying_infoInput[]
    createMany?: payingCreateManyPaying_infoInputEnvelope
    connect?: payingWhereUniqueInput | payingWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type payingUpdateManyWithoutPaying_infoNestedInput = {
    create?: XOR<payingCreateWithoutPaying_infoInput, payingUncheckedCreateWithoutPaying_infoInput> | payingCreateWithoutPaying_infoInput[] | payingUncheckedCreateWithoutPaying_infoInput[]
    connectOrCreate?: payingCreateOrConnectWithoutPaying_infoInput | payingCreateOrConnectWithoutPaying_infoInput[]
    upsert?: payingUpsertWithWhereUniqueWithoutPaying_infoInput | payingUpsertWithWhereUniqueWithoutPaying_infoInput[]
    createMany?: payingCreateManyPaying_infoInputEnvelope
    set?: payingWhereUniqueInput | payingWhereUniqueInput[]
    disconnect?: payingWhereUniqueInput | payingWhereUniqueInput[]
    delete?: payingWhereUniqueInput | payingWhereUniqueInput[]
    connect?: payingWhereUniqueInput | payingWhereUniqueInput[]
    update?: payingUpdateWithWhereUniqueWithoutPaying_infoInput | payingUpdateWithWhereUniqueWithoutPaying_infoInput[]
    updateMany?: payingUpdateManyWithWhereWithoutPaying_infoInput | payingUpdateManyWithWhereWithoutPaying_infoInput[]
    deleteMany?: payingScalarWhereInput | payingScalarWhereInput[]
  }

  export type payingUncheckedUpdateManyWithoutPaying_infoNestedInput = {
    create?: XOR<payingCreateWithoutPaying_infoInput, payingUncheckedCreateWithoutPaying_infoInput> | payingCreateWithoutPaying_infoInput[] | payingUncheckedCreateWithoutPaying_infoInput[]
    connectOrCreate?: payingCreateOrConnectWithoutPaying_infoInput | payingCreateOrConnectWithoutPaying_infoInput[]
    upsert?: payingUpsertWithWhereUniqueWithoutPaying_infoInput | payingUpsertWithWhereUniqueWithoutPaying_infoInput[]
    createMany?: payingCreateManyPaying_infoInputEnvelope
    set?: payingWhereUniqueInput | payingWhereUniqueInput[]
    disconnect?: payingWhereUniqueInput | payingWhereUniqueInput[]
    delete?: payingWhereUniqueInput | payingWhereUniqueInput[]
    connect?: payingWhereUniqueInput | payingWhereUniqueInput[]
    update?: payingUpdateWithWhereUniqueWithoutPaying_infoInput | payingUpdateWithWhereUniqueWithoutPaying_infoInput[]
    updateMany?: payingUpdateManyWithWhereWithoutPaying_infoInput | payingUpdateManyWithWhereWithoutPaying_infoInput[]
    deleteMany?: payingScalarWhereInput | payingScalarWhereInput[]
  }

  export type cart_itemCreateNestedManyWithoutProductInput = {
    create?: XOR<cart_itemCreateWithoutProductInput, cart_itemUncheckedCreateWithoutProductInput> | cart_itemCreateWithoutProductInput[] | cart_itemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: cart_itemCreateOrConnectWithoutProductInput | cart_itemCreateOrConnectWithoutProductInput[]
    createMany?: cart_itemCreateManyProductInputEnvelope
    connect?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
  }

  export type liking_listCreateNestedManyWithoutProductInput = {
    create?: XOR<liking_listCreateWithoutProductInput, liking_listUncheckedCreateWithoutProductInput> | liking_listCreateWithoutProductInput[] | liking_listUncheckedCreateWithoutProductInput[]
    connectOrCreate?: liking_listCreateOrConnectWithoutProductInput | liking_listCreateOrConnectWithoutProductInput[]
    createMany?: liking_listCreateManyProductInputEnvelope
    connect?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
  }

  export type order_itemCreateNestedManyWithoutProductInput = {
    create?: XOR<order_itemCreateWithoutProductInput, order_itemUncheckedCreateWithoutProductInput> | order_itemCreateWithoutProductInput[] | order_itemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: order_itemCreateOrConnectWithoutProductInput | order_itemCreateOrConnectWithoutProductInput[]
    createMany?: order_itemCreateManyProductInputEnvelope
    connect?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
  }

  export type cart_itemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<cart_itemCreateWithoutProductInput, cart_itemUncheckedCreateWithoutProductInput> | cart_itemCreateWithoutProductInput[] | cart_itemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: cart_itemCreateOrConnectWithoutProductInput | cart_itemCreateOrConnectWithoutProductInput[]
    createMany?: cart_itemCreateManyProductInputEnvelope
    connect?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
  }

  export type liking_listUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<liking_listCreateWithoutProductInput, liking_listUncheckedCreateWithoutProductInput> | liking_listCreateWithoutProductInput[] | liking_listUncheckedCreateWithoutProductInput[]
    connectOrCreate?: liking_listCreateOrConnectWithoutProductInput | liking_listCreateOrConnectWithoutProductInput[]
    createMany?: liking_listCreateManyProductInputEnvelope
    connect?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
  }

  export type order_itemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<order_itemCreateWithoutProductInput, order_itemUncheckedCreateWithoutProductInput> | order_itemCreateWithoutProductInput[] | order_itemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: order_itemCreateOrConnectWithoutProductInput | order_itemCreateOrConnectWithoutProductInput[]
    createMany?: order_itemCreateManyProductInputEnvelope
    connect?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type cart_itemUpdateManyWithoutProductNestedInput = {
    create?: XOR<cart_itemCreateWithoutProductInput, cart_itemUncheckedCreateWithoutProductInput> | cart_itemCreateWithoutProductInput[] | cart_itemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: cart_itemCreateOrConnectWithoutProductInput | cart_itemCreateOrConnectWithoutProductInput[]
    upsert?: cart_itemUpsertWithWhereUniqueWithoutProductInput | cart_itemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: cart_itemCreateManyProductInputEnvelope
    set?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
    disconnect?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
    delete?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
    connect?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
    update?: cart_itemUpdateWithWhereUniqueWithoutProductInput | cart_itemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: cart_itemUpdateManyWithWhereWithoutProductInput | cart_itemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: cart_itemScalarWhereInput | cart_itemScalarWhereInput[]
  }

  export type liking_listUpdateManyWithoutProductNestedInput = {
    create?: XOR<liking_listCreateWithoutProductInput, liking_listUncheckedCreateWithoutProductInput> | liking_listCreateWithoutProductInput[] | liking_listUncheckedCreateWithoutProductInput[]
    connectOrCreate?: liking_listCreateOrConnectWithoutProductInput | liking_listCreateOrConnectWithoutProductInput[]
    upsert?: liking_listUpsertWithWhereUniqueWithoutProductInput | liking_listUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: liking_listCreateManyProductInputEnvelope
    set?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
    disconnect?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
    delete?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
    connect?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
    update?: liking_listUpdateWithWhereUniqueWithoutProductInput | liking_listUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: liking_listUpdateManyWithWhereWithoutProductInput | liking_listUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: liking_listScalarWhereInput | liking_listScalarWhereInput[]
  }

  export type order_itemUpdateManyWithoutProductNestedInput = {
    create?: XOR<order_itemCreateWithoutProductInput, order_itemUncheckedCreateWithoutProductInput> | order_itemCreateWithoutProductInput[] | order_itemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: order_itemCreateOrConnectWithoutProductInput | order_itemCreateOrConnectWithoutProductInput[]
    upsert?: order_itemUpsertWithWhereUniqueWithoutProductInput | order_itemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: order_itemCreateManyProductInputEnvelope
    set?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
    disconnect?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
    delete?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
    connect?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
    update?: order_itemUpdateWithWhereUniqueWithoutProductInput | order_itemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: order_itemUpdateManyWithWhereWithoutProductInput | order_itemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: order_itemScalarWhereInput | order_itemScalarWhereInput[]
  }

  export type cart_itemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<cart_itemCreateWithoutProductInput, cart_itemUncheckedCreateWithoutProductInput> | cart_itemCreateWithoutProductInput[] | cart_itemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: cart_itemCreateOrConnectWithoutProductInput | cart_itemCreateOrConnectWithoutProductInput[]
    upsert?: cart_itemUpsertWithWhereUniqueWithoutProductInput | cart_itemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: cart_itemCreateManyProductInputEnvelope
    set?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
    disconnect?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
    delete?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
    connect?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
    update?: cart_itemUpdateWithWhereUniqueWithoutProductInput | cart_itemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: cart_itemUpdateManyWithWhereWithoutProductInput | cart_itemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: cart_itemScalarWhereInput | cart_itemScalarWhereInput[]
  }

  export type liking_listUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<liking_listCreateWithoutProductInput, liking_listUncheckedCreateWithoutProductInput> | liking_listCreateWithoutProductInput[] | liking_listUncheckedCreateWithoutProductInput[]
    connectOrCreate?: liking_listCreateOrConnectWithoutProductInput | liking_listCreateOrConnectWithoutProductInput[]
    upsert?: liking_listUpsertWithWhereUniqueWithoutProductInput | liking_listUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: liking_listCreateManyProductInputEnvelope
    set?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
    disconnect?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
    delete?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
    connect?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
    update?: liking_listUpdateWithWhereUniqueWithoutProductInput | liking_listUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: liking_listUpdateManyWithWhereWithoutProductInput | liking_listUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: liking_listScalarWhereInput | liking_listScalarWhereInput[]
  }

  export type order_itemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<order_itemCreateWithoutProductInput, order_itemUncheckedCreateWithoutProductInput> | order_itemCreateWithoutProductInput[] | order_itemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: order_itemCreateOrConnectWithoutProductInput | order_itemCreateOrConnectWithoutProductInput[]
    upsert?: order_itemUpsertWithWhereUniqueWithoutProductInput | order_itemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: order_itemCreateManyProductInputEnvelope
    set?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
    disconnect?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
    delete?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
    connect?: order_itemWhereUniqueInput | order_itemWhereUniqueInput[]
    update?: order_itemUpdateWithWhereUniqueWithoutProductInput | order_itemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: order_itemUpdateManyWithWhereWithoutProductInput | order_itemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: order_itemScalarWhereInput | order_itemScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutSearch_historyInput = {
    create?: XOR<userCreateWithoutSearch_historyInput, userUncheckedCreateWithoutSearch_historyInput>
    connectOrCreate?: userCreateOrConnectWithoutSearch_historyInput
    connect?: userWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutSearch_historyNestedInput = {
    create?: XOR<userCreateWithoutSearch_historyInput, userUncheckedCreateWithoutSearch_historyInput>
    connectOrCreate?: userCreateOrConnectWithoutSearch_historyInput
    upsert?: userUpsertWithoutSearch_historyInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutSearch_historyInput, userUpdateWithoutSearch_historyInput>, userUncheckedUpdateWithoutSearch_historyInput>
  }

  export type cart_itemCreateNestedManyWithoutUserInput = {
    create?: XOR<cart_itemCreateWithoutUserInput, cart_itemUncheckedCreateWithoutUserInput> | cart_itemCreateWithoutUserInput[] | cart_itemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: cart_itemCreateOrConnectWithoutUserInput | cart_itemCreateOrConnectWithoutUserInput[]
    createMany?: cart_itemCreateManyUserInputEnvelope
    connect?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
  }

  export type liking_listCreateNestedManyWithoutUserInput = {
    create?: XOR<liking_listCreateWithoutUserInput, liking_listUncheckedCreateWithoutUserInput> | liking_listCreateWithoutUserInput[] | liking_listUncheckedCreateWithoutUserInput[]
    connectOrCreate?: liking_listCreateOrConnectWithoutUserInput | liking_listCreateOrConnectWithoutUserInput[]
    createMany?: liking_listCreateManyUserInputEnvelope
    connect?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
  }

  export type ordersCreateNestedManyWithoutUserInput = {
    create?: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput> | ordersCreateWithoutUserInput[] | ordersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUserInput | ordersCreateOrConnectWithoutUserInput[]
    createMany?: ordersCreateManyUserInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type search_historyCreateNestedManyWithoutUserInput = {
    create?: XOR<search_historyCreateWithoutUserInput, search_historyUncheckedCreateWithoutUserInput> | search_historyCreateWithoutUserInput[] | search_historyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: search_historyCreateOrConnectWithoutUserInput | search_historyCreateOrConnectWithoutUserInput[]
    createMany?: search_historyCreateManyUserInputEnvelope
    connect?: search_historyWhereUniqueInput | search_historyWhereUniqueInput[]
  }

  export type user_phoneCreateNestedManyWithoutUserInput = {
    create?: XOR<user_phoneCreateWithoutUserInput, user_phoneUncheckedCreateWithoutUserInput> | user_phoneCreateWithoutUserInput[] | user_phoneUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_phoneCreateOrConnectWithoutUserInput | user_phoneCreateOrConnectWithoutUserInput[]
    createMany?: user_phoneCreateManyUserInputEnvelope
    connect?: user_phoneWhereUniqueInput | user_phoneWhereUniqueInput[]
  }

  export type cart_itemUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<cart_itemCreateWithoutUserInput, cart_itemUncheckedCreateWithoutUserInput> | cart_itemCreateWithoutUserInput[] | cart_itemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: cart_itemCreateOrConnectWithoutUserInput | cart_itemCreateOrConnectWithoutUserInput[]
    createMany?: cart_itemCreateManyUserInputEnvelope
    connect?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
  }

  export type liking_listUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<liking_listCreateWithoutUserInput, liking_listUncheckedCreateWithoutUserInput> | liking_listCreateWithoutUserInput[] | liking_listUncheckedCreateWithoutUserInput[]
    connectOrCreate?: liking_listCreateOrConnectWithoutUserInput | liking_listCreateOrConnectWithoutUserInput[]
    createMany?: liking_listCreateManyUserInputEnvelope
    connect?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
  }

  export type ordersUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput> | ordersCreateWithoutUserInput[] | ordersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUserInput | ordersCreateOrConnectWithoutUserInput[]
    createMany?: ordersCreateManyUserInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type search_historyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<search_historyCreateWithoutUserInput, search_historyUncheckedCreateWithoutUserInput> | search_historyCreateWithoutUserInput[] | search_historyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: search_historyCreateOrConnectWithoutUserInput | search_historyCreateOrConnectWithoutUserInput[]
    createMany?: search_historyCreateManyUserInputEnvelope
    connect?: search_historyWhereUniqueInput | search_historyWhereUniqueInput[]
  }

  export type user_phoneUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<user_phoneCreateWithoutUserInput, user_phoneUncheckedCreateWithoutUserInput> | user_phoneCreateWithoutUserInput[] | user_phoneUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_phoneCreateOrConnectWithoutUserInput | user_phoneCreateOrConnectWithoutUserInput[]
    createMany?: user_phoneCreateManyUserInputEnvelope
    connect?: user_phoneWhereUniqueInput | user_phoneWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type cart_itemUpdateManyWithoutUserNestedInput = {
    create?: XOR<cart_itemCreateWithoutUserInput, cart_itemUncheckedCreateWithoutUserInput> | cart_itemCreateWithoutUserInput[] | cart_itemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: cart_itemCreateOrConnectWithoutUserInput | cart_itemCreateOrConnectWithoutUserInput[]
    upsert?: cart_itemUpsertWithWhereUniqueWithoutUserInput | cart_itemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: cart_itemCreateManyUserInputEnvelope
    set?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
    disconnect?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
    delete?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
    connect?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
    update?: cart_itemUpdateWithWhereUniqueWithoutUserInput | cart_itemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: cart_itemUpdateManyWithWhereWithoutUserInput | cart_itemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: cart_itemScalarWhereInput | cart_itemScalarWhereInput[]
  }

  export type liking_listUpdateManyWithoutUserNestedInput = {
    create?: XOR<liking_listCreateWithoutUserInput, liking_listUncheckedCreateWithoutUserInput> | liking_listCreateWithoutUserInput[] | liking_listUncheckedCreateWithoutUserInput[]
    connectOrCreate?: liking_listCreateOrConnectWithoutUserInput | liking_listCreateOrConnectWithoutUserInput[]
    upsert?: liking_listUpsertWithWhereUniqueWithoutUserInput | liking_listUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: liking_listCreateManyUserInputEnvelope
    set?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
    disconnect?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
    delete?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
    connect?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
    update?: liking_listUpdateWithWhereUniqueWithoutUserInput | liking_listUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: liking_listUpdateManyWithWhereWithoutUserInput | liking_listUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: liking_listScalarWhereInput | liking_listScalarWhereInput[]
  }

  export type ordersUpdateManyWithoutUserNestedInput = {
    create?: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput> | ordersCreateWithoutUserInput[] | ordersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUserInput | ordersCreateOrConnectWithoutUserInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutUserInput | ordersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ordersCreateManyUserInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutUserInput | ordersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutUserInput | ordersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type search_historyUpdateManyWithoutUserNestedInput = {
    create?: XOR<search_historyCreateWithoutUserInput, search_historyUncheckedCreateWithoutUserInput> | search_historyCreateWithoutUserInput[] | search_historyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: search_historyCreateOrConnectWithoutUserInput | search_historyCreateOrConnectWithoutUserInput[]
    upsert?: search_historyUpsertWithWhereUniqueWithoutUserInput | search_historyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: search_historyCreateManyUserInputEnvelope
    set?: search_historyWhereUniqueInput | search_historyWhereUniqueInput[]
    disconnect?: search_historyWhereUniqueInput | search_historyWhereUniqueInput[]
    delete?: search_historyWhereUniqueInput | search_historyWhereUniqueInput[]
    connect?: search_historyWhereUniqueInput | search_historyWhereUniqueInput[]
    update?: search_historyUpdateWithWhereUniqueWithoutUserInput | search_historyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: search_historyUpdateManyWithWhereWithoutUserInput | search_historyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: search_historyScalarWhereInput | search_historyScalarWhereInput[]
  }

  export type user_phoneUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_phoneCreateWithoutUserInput, user_phoneUncheckedCreateWithoutUserInput> | user_phoneCreateWithoutUserInput[] | user_phoneUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_phoneCreateOrConnectWithoutUserInput | user_phoneCreateOrConnectWithoutUserInput[]
    upsert?: user_phoneUpsertWithWhereUniqueWithoutUserInput | user_phoneUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_phoneCreateManyUserInputEnvelope
    set?: user_phoneWhereUniqueInput | user_phoneWhereUniqueInput[]
    disconnect?: user_phoneWhereUniqueInput | user_phoneWhereUniqueInput[]
    delete?: user_phoneWhereUniqueInput | user_phoneWhereUniqueInput[]
    connect?: user_phoneWhereUniqueInput | user_phoneWhereUniqueInput[]
    update?: user_phoneUpdateWithWhereUniqueWithoutUserInput | user_phoneUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_phoneUpdateManyWithWhereWithoutUserInput | user_phoneUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_phoneScalarWhereInput | user_phoneScalarWhereInput[]
  }

  export type cart_itemUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<cart_itemCreateWithoutUserInput, cart_itemUncheckedCreateWithoutUserInput> | cart_itemCreateWithoutUserInput[] | cart_itemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: cart_itemCreateOrConnectWithoutUserInput | cart_itemCreateOrConnectWithoutUserInput[]
    upsert?: cart_itemUpsertWithWhereUniqueWithoutUserInput | cart_itemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: cart_itemCreateManyUserInputEnvelope
    set?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
    disconnect?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
    delete?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
    connect?: cart_itemWhereUniqueInput | cart_itemWhereUniqueInput[]
    update?: cart_itemUpdateWithWhereUniqueWithoutUserInput | cart_itemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: cart_itemUpdateManyWithWhereWithoutUserInput | cart_itemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: cart_itemScalarWhereInput | cart_itemScalarWhereInput[]
  }

  export type liking_listUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<liking_listCreateWithoutUserInput, liking_listUncheckedCreateWithoutUserInput> | liking_listCreateWithoutUserInput[] | liking_listUncheckedCreateWithoutUserInput[]
    connectOrCreate?: liking_listCreateOrConnectWithoutUserInput | liking_listCreateOrConnectWithoutUserInput[]
    upsert?: liking_listUpsertWithWhereUniqueWithoutUserInput | liking_listUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: liking_listCreateManyUserInputEnvelope
    set?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
    disconnect?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
    delete?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
    connect?: liking_listWhereUniqueInput | liking_listWhereUniqueInput[]
    update?: liking_listUpdateWithWhereUniqueWithoutUserInput | liking_listUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: liking_listUpdateManyWithWhereWithoutUserInput | liking_listUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: liking_listScalarWhereInput | liking_listScalarWhereInput[]
  }

  export type ordersUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput> | ordersCreateWithoutUserInput[] | ordersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUserInput | ordersCreateOrConnectWithoutUserInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutUserInput | ordersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ordersCreateManyUserInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutUserInput | ordersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutUserInput | ordersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type search_historyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<search_historyCreateWithoutUserInput, search_historyUncheckedCreateWithoutUserInput> | search_historyCreateWithoutUserInput[] | search_historyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: search_historyCreateOrConnectWithoutUserInput | search_historyCreateOrConnectWithoutUserInput[]
    upsert?: search_historyUpsertWithWhereUniqueWithoutUserInput | search_historyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: search_historyCreateManyUserInputEnvelope
    set?: search_historyWhereUniqueInput | search_historyWhereUniqueInput[]
    disconnect?: search_historyWhereUniqueInput | search_historyWhereUniqueInput[]
    delete?: search_historyWhereUniqueInput | search_historyWhereUniqueInput[]
    connect?: search_historyWhereUniqueInput | search_historyWhereUniqueInput[]
    update?: search_historyUpdateWithWhereUniqueWithoutUserInput | search_historyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: search_historyUpdateManyWithWhereWithoutUserInput | search_historyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: search_historyScalarWhereInput | search_historyScalarWhereInput[]
  }

  export type user_phoneUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_phoneCreateWithoutUserInput, user_phoneUncheckedCreateWithoutUserInput> | user_phoneCreateWithoutUserInput[] | user_phoneUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_phoneCreateOrConnectWithoutUserInput | user_phoneCreateOrConnectWithoutUserInput[]
    upsert?: user_phoneUpsertWithWhereUniqueWithoutUserInput | user_phoneUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_phoneCreateManyUserInputEnvelope
    set?: user_phoneWhereUniqueInput | user_phoneWhereUniqueInput[]
    disconnect?: user_phoneWhereUniqueInput | user_phoneWhereUniqueInput[]
    delete?: user_phoneWhereUniqueInput | user_phoneWhereUniqueInput[]
    connect?: user_phoneWhereUniqueInput | user_phoneWhereUniqueInput[]
    update?: user_phoneUpdateWithWhereUniqueWithoutUserInput | user_phoneUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_phoneUpdateManyWithWhereWithoutUserInput | user_phoneUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_phoneScalarWhereInput | user_phoneScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutUser_phoneInput = {
    create?: XOR<userCreateWithoutUser_phoneInput, userUncheckedCreateWithoutUser_phoneInput>
    connectOrCreate?: userCreateOrConnectWithoutUser_phoneInput
    connect?: userWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutUser_phoneNestedInput = {
    create?: XOR<userCreateWithoutUser_phoneInput, userUncheckedCreateWithoutUser_phoneInput>
    connectOrCreate?: userCreateOrConnectWithoutUser_phoneInput
    upsert?: userUpsertWithoutUser_phoneInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutUser_phoneInput, userUpdateWithoutUser_phoneInput>, userUncheckedUpdateWithoutUser_phoneInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type userCreateWithoutCart_itemInput = {
    account: string
    password: string
    enrollment_date?: Date | string | null
    address: string
    email_address: string
    birthdate: Date | string
    age?: number | null
    liking_list?: liking_listCreateNestedManyWithoutUserInput
    orders?: ordersCreateNestedManyWithoutUserInput
    search_history?: search_historyCreateNestedManyWithoutUserInput
    user_phone?: user_phoneCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutCart_itemInput = {
    user_ID?: number
    account: string
    password: string
    enrollment_date?: Date | string | null
    address: string
    email_address: string
    birthdate: Date | string
    age?: number | null
    liking_list?: liking_listUncheckedCreateNestedManyWithoutUserInput
    orders?: ordersUncheckedCreateNestedManyWithoutUserInput
    search_history?: search_historyUncheckedCreateNestedManyWithoutUserInput
    user_phone?: user_phoneUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutCart_itemInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutCart_itemInput, userUncheckedCreateWithoutCart_itemInput>
  }

  export type productCreateWithoutCart_itemInput = {
    product_name: string
    discount?: number | null
    stock?: number | null
    price?: Decimal | DecimalJsLike | number | string | null
    tags?: string | null
    sales?: number | null
    likes?: number | null
    avg_score?: number | null
    liking_list?: liking_listCreateNestedManyWithoutProductInput
    order_item?: order_itemCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutCart_itemInput = {
    product_ID?: number
    product_name: string
    discount?: number | null
    stock?: number | null
    price?: Decimal | DecimalJsLike | number | string | null
    tags?: string | null
    sales?: number | null
    likes?: number | null
    avg_score?: number | null
    liking_list?: liking_listUncheckedCreateNestedManyWithoutProductInput
    order_item?: order_itemUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutCart_itemInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutCart_itemInput, productUncheckedCreateWithoutCart_itemInput>
  }

  export type userUpsertWithoutCart_itemInput = {
    update: XOR<userUpdateWithoutCart_itemInput, userUncheckedUpdateWithoutCart_itemInput>
    create: XOR<userCreateWithoutCart_itemInput, userUncheckedCreateWithoutCart_itemInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutCart_itemInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutCart_itemInput, userUncheckedUpdateWithoutCart_itemInput>
  }

  export type userUpdateWithoutCart_itemInput = {
    account?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    email_address?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    liking_list?: liking_listUpdateManyWithoutUserNestedInput
    orders?: ordersUpdateManyWithoutUserNestedInput
    search_history?: search_historyUpdateManyWithoutUserNestedInput
    user_phone?: user_phoneUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutCart_itemInput = {
    user_ID?: IntFieldUpdateOperationsInput | number
    account?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    email_address?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    liking_list?: liking_listUncheckedUpdateManyWithoutUserNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUserNestedInput
    search_history?: search_historyUncheckedUpdateManyWithoutUserNestedInput
    user_phone?: user_phoneUncheckedUpdateManyWithoutUserNestedInput
  }

  export type productUpsertWithoutCart_itemInput = {
    update: XOR<productUpdateWithoutCart_itemInput, productUncheckedUpdateWithoutCart_itemInput>
    create: XOR<productCreateWithoutCart_itemInput, productUncheckedCreateWithoutCart_itemInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutCart_itemInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutCart_itemInput, productUncheckedUpdateWithoutCart_itemInput>
  }

  export type productUpdateWithoutCart_itemInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    sales?: NullableIntFieldUpdateOperationsInput | number | null
    likes?: NullableIntFieldUpdateOperationsInput | number | null
    avg_score?: NullableFloatFieldUpdateOperationsInput | number | null
    liking_list?: liking_listUpdateManyWithoutProductNestedInput
    order_item?: order_itemUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutCart_itemInput = {
    product_ID?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    sales?: NullableIntFieldUpdateOperationsInput | number | null
    likes?: NullableIntFieldUpdateOperationsInput | number | null
    avg_score?: NullableFloatFieldUpdateOperationsInput | number | null
    liking_list?: liking_listUncheckedUpdateManyWithoutProductNestedInput
    order_item?: order_itemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type userCreateWithoutLiking_listInput = {
    account: string
    password: string
    enrollment_date?: Date | string | null
    address: string
    email_address: string
    birthdate: Date | string
    age?: number | null
    cart_item?: cart_itemCreateNestedManyWithoutUserInput
    orders?: ordersCreateNestedManyWithoutUserInput
    search_history?: search_historyCreateNestedManyWithoutUserInput
    user_phone?: user_phoneCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutLiking_listInput = {
    user_ID?: number
    account: string
    password: string
    enrollment_date?: Date | string | null
    address: string
    email_address: string
    birthdate: Date | string
    age?: number | null
    cart_item?: cart_itemUncheckedCreateNestedManyWithoutUserInput
    orders?: ordersUncheckedCreateNestedManyWithoutUserInput
    search_history?: search_historyUncheckedCreateNestedManyWithoutUserInput
    user_phone?: user_phoneUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutLiking_listInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutLiking_listInput, userUncheckedCreateWithoutLiking_listInput>
  }

  export type productCreateWithoutLiking_listInput = {
    product_name: string
    discount?: number | null
    stock?: number | null
    price?: Decimal | DecimalJsLike | number | string | null
    tags?: string | null
    sales?: number | null
    likes?: number | null
    avg_score?: number | null
    cart_item?: cart_itemCreateNestedManyWithoutProductInput
    order_item?: order_itemCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutLiking_listInput = {
    product_ID?: number
    product_name: string
    discount?: number | null
    stock?: number | null
    price?: Decimal | DecimalJsLike | number | string | null
    tags?: string | null
    sales?: number | null
    likes?: number | null
    avg_score?: number | null
    cart_item?: cart_itemUncheckedCreateNestedManyWithoutProductInput
    order_item?: order_itemUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutLiking_listInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutLiking_listInput, productUncheckedCreateWithoutLiking_listInput>
  }

  export type userUpsertWithoutLiking_listInput = {
    update: XOR<userUpdateWithoutLiking_listInput, userUncheckedUpdateWithoutLiking_listInput>
    create: XOR<userCreateWithoutLiking_listInput, userUncheckedCreateWithoutLiking_listInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutLiking_listInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutLiking_listInput, userUncheckedUpdateWithoutLiking_listInput>
  }

  export type userUpdateWithoutLiking_listInput = {
    account?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    email_address?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    cart_item?: cart_itemUpdateManyWithoutUserNestedInput
    orders?: ordersUpdateManyWithoutUserNestedInput
    search_history?: search_historyUpdateManyWithoutUserNestedInput
    user_phone?: user_phoneUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutLiking_listInput = {
    user_ID?: IntFieldUpdateOperationsInput | number
    account?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    email_address?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    cart_item?: cart_itemUncheckedUpdateManyWithoutUserNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUserNestedInput
    search_history?: search_historyUncheckedUpdateManyWithoutUserNestedInput
    user_phone?: user_phoneUncheckedUpdateManyWithoutUserNestedInput
  }

  export type productUpsertWithoutLiking_listInput = {
    update: XOR<productUpdateWithoutLiking_listInput, productUncheckedUpdateWithoutLiking_listInput>
    create: XOR<productCreateWithoutLiking_listInput, productUncheckedCreateWithoutLiking_listInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutLiking_listInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutLiking_listInput, productUncheckedUpdateWithoutLiking_listInput>
  }

  export type productUpdateWithoutLiking_listInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    sales?: NullableIntFieldUpdateOperationsInput | number | null
    likes?: NullableIntFieldUpdateOperationsInput | number | null
    avg_score?: NullableFloatFieldUpdateOperationsInput | number | null
    cart_item?: cart_itemUpdateManyWithoutProductNestedInput
    order_item?: order_itemUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutLiking_listInput = {
    product_ID?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    sales?: NullableIntFieldUpdateOperationsInput | number | null
    likes?: NullableIntFieldUpdateOperationsInput | number | null
    avg_score?: NullableFloatFieldUpdateOperationsInput | number | null
    cart_item?: cart_itemUncheckedUpdateManyWithoutProductNestedInput
    order_item?: order_itemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ordersCreateWithoutOrder_itemInput = {
    order_ID?: number
    status?: number | null
    user: userCreateNestedOneWithoutOrdersInput
    paying?: payingCreateNestedManyWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutOrder_itemInput = {
    order_ID?: number
    user_ID: number
    status?: number | null
    paying?: payingUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersCreateOrConnectWithoutOrder_itemInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutOrder_itemInput, ordersUncheckedCreateWithoutOrder_itemInput>
  }

  export type productCreateWithoutOrder_itemInput = {
    product_name: string
    discount?: number | null
    stock?: number | null
    price?: Decimal | DecimalJsLike | number | string | null
    tags?: string | null
    sales?: number | null
    likes?: number | null
    avg_score?: number | null
    cart_item?: cart_itemCreateNestedManyWithoutProductInput
    liking_list?: liking_listCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutOrder_itemInput = {
    product_ID?: number
    product_name: string
    discount?: number | null
    stock?: number | null
    price?: Decimal | DecimalJsLike | number | string | null
    tags?: string | null
    sales?: number | null
    likes?: number | null
    avg_score?: number | null
    cart_item?: cart_itemUncheckedCreateNestedManyWithoutProductInput
    liking_list?: liking_listUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutOrder_itemInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutOrder_itemInput, productUncheckedCreateWithoutOrder_itemInput>
  }

  export type ordersUpsertWithoutOrder_itemInput = {
    update: XOR<ordersUpdateWithoutOrder_itemInput, ordersUncheckedUpdateWithoutOrder_itemInput>
    create: XOR<ordersCreateWithoutOrder_itemInput, ordersUncheckedCreateWithoutOrder_itemInput>
    where?: ordersWhereInput
  }

  export type ordersUpdateToOneWithWhereWithoutOrder_itemInput = {
    where?: ordersWhereInput
    data: XOR<ordersUpdateWithoutOrder_itemInput, ordersUncheckedUpdateWithoutOrder_itemInput>
  }

  export type ordersUpdateWithoutOrder_itemInput = {
    status?: NullableIntFieldUpdateOperationsInput | number | null
    user?: userUpdateOneRequiredWithoutOrdersNestedInput
    paying?: payingUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutOrder_itemInput = {
    order_ID?: IntFieldUpdateOperationsInput | number
    user_ID?: IntFieldUpdateOperationsInput | number
    status?: NullableIntFieldUpdateOperationsInput | number | null
    paying?: payingUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type productUpsertWithoutOrder_itemInput = {
    update: XOR<productUpdateWithoutOrder_itemInput, productUncheckedUpdateWithoutOrder_itemInput>
    create: XOR<productCreateWithoutOrder_itemInput, productUncheckedCreateWithoutOrder_itemInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutOrder_itemInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutOrder_itemInput, productUncheckedUpdateWithoutOrder_itemInput>
  }

  export type productUpdateWithoutOrder_itemInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    sales?: NullableIntFieldUpdateOperationsInput | number | null
    likes?: NullableIntFieldUpdateOperationsInput | number | null
    avg_score?: NullableFloatFieldUpdateOperationsInput | number | null
    cart_item?: cart_itemUpdateManyWithoutProductNestedInput
    liking_list?: liking_listUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutOrder_itemInput = {
    product_ID?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    sales?: NullableIntFieldUpdateOperationsInput | number | null
    likes?: NullableIntFieldUpdateOperationsInput | number | null
    avg_score?: NullableFloatFieldUpdateOperationsInput | number | null
    cart_item?: cart_itemUncheckedUpdateManyWithoutProductNestedInput
    liking_list?: liking_listUncheckedUpdateManyWithoutProductNestedInput
  }

  export type order_itemCreateWithoutOrdersInput = {
    quantity: number
    prices?: Decimal | DecimalJsLike | number | string | null
    product: productCreateNestedOneWithoutOrder_itemInput
  }

  export type order_itemUncheckedCreateWithoutOrdersInput = {
    product_ID: number
    quantity: number
    prices?: Decimal | DecimalJsLike | number | string | null
  }

  export type order_itemCreateOrConnectWithoutOrdersInput = {
    where: order_itemWhereUniqueInput
    create: XOR<order_itemCreateWithoutOrdersInput, order_itemUncheckedCreateWithoutOrdersInput>
  }

  export type order_itemCreateManyOrdersInputEnvelope = {
    data: order_itemCreateManyOrdersInput | order_itemCreateManyOrdersInput[]
    skipDuplicates?: boolean
  }

  export type userCreateWithoutOrdersInput = {
    account: string
    password: string
    enrollment_date?: Date | string | null
    address: string
    email_address: string
    birthdate: Date | string
    age?: number | null
    cart_item?: cart_itemCreateNestedManyWithoutUserInput
    liking_list?: liking_listCreateNestedManyWithoutUserInput
    search_history?: search_historyCreateNestedManyWithoutUserInput
    user_phone?: user_phoneCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutOrdersInput = {
    user_ID?: number
    account: string
    password: string
    enrollment_date?: Date | string | null
    address: string
    email_address: string
    birthdate: Date | string
    age?: number | null
    cart_item?: cart_itemUncheckedCreateNestedManyWithoutUserInput
    liking_list?: liking_listUncheckedCreateNestedManyWithoutUserInput
    search_history?: search_historyUncheckedCreateNestedManyWithoutUserInput
    user_phone?: user_phoneUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutOrdersInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutOrdersInput, userUncheckedCreateWithoutOrdersInput>
  }

  export type payingCreateWithoutOrdersInput = {
    paying_info: paying_infoCreateNestedOneWithoutPayingInput
  }

  export type payingUncheckedCreateWithoutOrdersInput = {
    payment_ID: number
  }

  export type payingCreateOrConnectWithoutOrdersInput = {
    where: payingWhereUniqueInput
    create: XOR<payingCreateWithoutOrdersInput, payingUncheckedCreateWithoutOrdersInput>
  }

  export type payingCreateManyOrdersInputEnvelope = {
    data: payingCreateManyOrdersInput | payingCreateManyOrdersInput[]
    skipDuplicates?: boolean
  }

  export type order_itemUpsertWithWhereUniqueWithoutOrdersInput = {
    where: order_itemWhereUniqueInput
    update: XOR<order_itemUpdateWithoutOrdersInput, order_itemUncheckedUpdateWithoutOrdersInput>
    create: XOR<order_itemCreateWithoutOrdersInput, order_itemUncheckedCreateWithoutOrdersInput>
  }

  export type order_itemUpdateWithWhereUniqueWithoutOrdersInput = {
    where: order_itemWhereUniqueInput
    data: XOR<order_itemUpdateWithoutOrdersInput, order_itemUncheckedUpdateWithoutOrdersInput>
  }

  export type order_itemUpdateManyWithWhereWithoutOrdersInput = {
    where: order_itemScalarWhereInput
    data: XOR<order_itemUpdateManyMutationInput, order_itemUncheckedUpdateManyWithoutOrdersInput>
  }

  export type order_itemScalarWhereInput = {
    AND?: order_itemScalarWhereInput | order_itemScalarWhereInput[]
    OR?: order_itemScalarWhereInput[]
    NOT?: order_itemScalarWhereInput | order_itemScalarWhereInput[]
    order_ID?: IntFilter<"order_item"> | number
    product_ID?: IntFilter<"order_item"> | number
    quantity?: IntFilter<"order_item"> | number
    prices?: DecimalNullableFilter<"order_item"> | Decimal | DecimalJsLike | number | string | null
  }

  export type userUpsertWithoutOrdersInput = {
    update: XOR<userUpdateWithoutOrdersInput, userUncheckedUpdateWithoutOrdersInput>
    create: XOR<userCreateWithoutOrdersInput, userUncheckedCreateWithoutOrdersInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutOrdersInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutOrdersInput, userUncheckedUpdateWithoutOrdersInput>
  }

  export type userUpdateWithoutOrdersInput = {
    account?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    email_address?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    cart_item?: cart_itemUpdateManyWithoutUserNestedInput
    liking_list?: liking_listUpdateManyWithoutUserNestedInput
    search_history?: search_historyUpdateManyWithoutUserNestedInput
    user_phone?: user_phoneUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutOrdersInput = {
    user_ID?: IntFieldUpdateOperationsInput | number
    account?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    email_address?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    cart_item?: cart_itemUncheckedUpdateManyWithoutUserNestedInput
    liking_list?: liking_listUncheckedUpdateManyWithoutUserNestedInput
    search_history?: search_historyUncheckedUpdateManyWithoutUserNestedInput
    user_phone?: user_phoneUncheckedUpdateManyWithoutUserNestedInput
  }

  export type payingUpsertWithWhereUniqueWithoutOrdersInput = {
    where: payingWhereUniqueInput
    update: XOR<payingUpdateWithoutOrdersInput, payingUncheckedUpdateWithoutOrdersInput>
    create: XOR<payingCreateWithoutOrdersInput, payingUncheckedCreateWithoutOrdersInput>
  }

  export type payingUpdateWithWhereUniqueWithoutOrdersInput = {
    where: payingWhereUniqueInput
    data: XOR<payingUpdateWithoutOrdersInput, payingUncheckedUpdateWithoutOrdersInput>
  }

  export type payingUpdateManyWithWhereWithoutOrdersInput = {
    where: payingScalarWhereInput
    data: XOR<payingUpdateManyMutationInput, payingUncheckedUpdateManyWithoutOrdersInput>
  }

  export type payingScalarWhereInput = {
    AND?: payingScalarWhereInput | payingScalarWhereInput[]
    OR?: payingScalarWhereInput[]
    NOT?: payingScalarWhereInput | payingScalarWhereInput[]
    order_ID?: IntFilter<"paying"> | number
    payment_ID?: IntFilter<"paying"> | number
  }

  export type ordersCreateWithoutPayingInput = {
    order_ID?: number
    status?: number | null
    order_item?: order_itemCreateNestedManyWithoutOrdersInput
    user: userCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutPayingInput = {
    order_ID?: number
    user_ID: number
    status?: number | null
    order_item?: order_itemUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersCreateOrConnectWithoutPayingInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutPayingInput, ordersUncheckedCreateWithoutPayingInput>
  }

  export type paying_infoCreateWithoutPayingInput = {
    bank_account: string
    bank_num: string
    delivering_address: string
    total_price?: Decimal | DecimalJsLike | number | string | null
    time_slot?: Date | string | null
  }

  export type paying_infoUncheckedCreateWithoutPayingInput = {
    payment_ID?: number
    bank_account: string
    bank_num: string
    delivering_address: string
    total_price?: Decimal | DecimalJsLike | number | string | null
    time_slot?: Date | string | null
  }

  export type paying_infoCreateOrConnectWithoutPayingInput = {
    where: paying_infoWhereUniqueInput
    create: XOR<paying_infoCreateWithoutPayingInput, paying_infoUncheckedCreateWithoutPayingInput>
  }

  export type ordersUpsertWithoutPayingInput = {
    update: XOR<ordersUpdateWithoutPayingInput, ordersUncheckedUpdateWithoutPayingInput>
    create: XOR<ordersCreateWithoutPayingInput, ordersUncheckedCreateWithoutPayingInput>
    where?: ordersWhereInput
  }

  export type ordersUpdateToOneWithWhereWithoutPayingInput = {
    where?: ordersWhereInput
    data: XOR<ordersUpdateWithoutPayingInput, ordersUncheckedUpdateWithoutPayingInput>
  }

  export type ordersUpdateWithoutPayingInput = {
    status?: NullableIntFieldUpdateOperationsInput | number | null
    order_item?: order_itemUpdateManyWithoutOrdersNestedInput
    user?: userUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutPayingInput = {
    order_ID?: IntFieldUpdateOperationsInput | number
    user_ID?: IntFieldUpdateOperationsInput | number
    status?: NullableIntFieldUpdateOperationsInput | number | null
    order_item?: order_itemUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type paying_infoUpsertWithoutPayingInput = {
    update: XOR<paying_infoUpdateWithoutPayingInput, paying_infoUncheckedUpdateWithoutPayingInput>
    create: XOR<paying_infoCreateWithoutPayingInput, paying_infoUncheckedCreateWithoutPayingInput>
    where?: paying_infoWhereInput
  }

  export type paying_infoUpdateToOneWithWhereWithoutPayingInput = {
    where?: paying_infoWhereInput
    data: XOR<paying_infoUpdateWithoutPayingInput, paying_infoUncheckedUpdateWithoutPayingInput>
  }

  export type paying_infoUpdateWithoutPayingInput = {
    bank_account?: StringFieldUpdateOperationsInput | string
    bank_num?: StringFieldUpdateOperationsInput | string
    delivering_address?: StringFieldUpdateOperationsInput | string
    total_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    time_slot?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type paying_infoUncheckedUpdateWithoutPayingInput = {
    payment_ID?: IntFieldUpdateOperationsInput | number
    bank_account?: StringFieldUpdateOperationsInput | string
    bank_num?: StringFieldUpdateOperationsInput | string
    delivering_address?: StringFieldUpdateOperationsInput | string
    total_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    time_slot?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type payingCreateWithoutPaying_infoInput = {
    orders: ordersCreateNestedOneWithoutPayingInput
  }

  export type payingUncheckedCreateWithoutPaying_infoInput = {
    order_ID: number
  }

  export type payingCreateOrConnectWithoutPaying_infoInput = {
    where: payingWhereUniqueInput
    create: XOR<payingCreateWithoutPaying_infoInput, payingUncheckedCreateWithoutPaying_infoInput>
  }

  export type payingCreateManyPaying_infoInputEnvelope = {
    data: payingCreateManyPaying_infoInput | payingCreateManyPaying_infoInput[]
    skipDuplicates?: boolean
  }

  export type payingUpsertWithWhereUniqueWithoutPaying_infoInput = {
    where: payingWhereUniqueInput
    update: XOR<payingUpdateWithoutPaying_infoInput, payingUncheckedUpdateWithoutPaying_infoInput>
    create: XOR<payingCreateWithoutPaying_infoInput, payingUncheckedCreateWithoutPaying_infoInput>
  }

  export type payingUpdateWithWhereUniqueWithoutPaying_infoInput = {
    where: payingWhereUniqueInput
    data: XOR<payingUpdateWithoutPaying_infoInput, payingUncheckedUpdateWithoutPaying_infoInput>
  }

  export type payingUpdateManyWithWhereWithoutPaying_infoInput = {
    where: payingScalarWhereInput
    data: XOR<payingUpdateManyMutationInput, payingUncheckedUpdateManyWithoutPaying_infoInput>
  }

  export type cart_itemCreateWithoutProductInput = {
    quantity: number
    prices?: Decimal | DecimalJsLike | number | string | null
    user: userCreateNestedOneWithoutCart_itemInput
  }

  export type cart_itemUncheckedCreateWithoutProductInput = {
    cart_ID: number
    quantity: number
    prices?: Decimal | DecimalJsLike | number | string | null
  }

  export type cart_itemCreateOrConnectWithoutProductInput = {
    where: cart_itemWhereUniqueInput
    create: XOR<cart_itemCreateWithoutProductInput, cart_itemUncheckedCreateWithoutProductInput>
  }

  export type cart_itemCreateManyProductInputEnvelope = {
    data: cart_itemCreateManyProductInput | cart_itemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type liking_listCreateWithoutProductInput = {
    user: userCreateNestedOneWithoutLiking_listInput
  }

  export type liking_listUncheckedCreateWithoutProductInput = {
    user_ID: number
  }

  export type liking_listCreateOrConnectWithoutProductInput = {
    where: liking_listWhereUniqueInput
    create: XOR<liking_listCreateWithoutProductInput, liking_listUncheckedCreateWithoutProductInput>
  }

  export type liking_listCreateManyProductInputEnvelope = {
    data: liking_listCreateManyProductInput | liking_listCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type order_itemCreateWithoutProductInput = {
    quantity: number
    prices?: Decimal | DecimalJsLike | number | string | null
    orders: ordersCreateNestedOneWithoutOrder_itemInput
  }

  export type order_itemUncheckedCreateWithoutProductInput = {
    order_ID: number
    quantity: number
    prices?: Decimal | DecimalJsLike | number | string | null
  }

  export type order_itemCreateOrConnectWithoutProductInput = {
    where: order_itemWhereUniqueInput
    create: XOR<order_itemCreateWithoutProductInput, order_itemUncheckedCreateWithoutProductInput>
  }

  export type order_itemCreateManyProductInputEnvelope = {
    data: order_itemCreateManyProductInput | order_itemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type cart_itemUpsertWithWhereUniqueWithoutProductInput = {
    where: cart_itemWhereUniqueInput
    update: XOR<cart_itemUpdateWithoutProductInput, cart_itemUncheckedUpdateWithoutProductInput>
    create: XOR<cart_itemCreateWithoutProductInput, cart_itemUncheckedCreateWithoutProductInput>
  }

  export type cart_itemUpdateWithWhereUniqueWithoutProductInput = {
    where: cart_itemWhereUniqueInput
    data: XOR<cart_itemUpdateWithoutProductInput, cart_itemUncheckedUpdateWithoutProductInput>
  }

  export type cart_itemUpdateManyWithWhereWithoutProductInput = {
    where: cart_itemScalarWhereInput
    data: XOR<cart_itemUpdateManyMutationInput, cart_itemUncheckedUpdateManyWithoutProductInput>
  }

  export type cart_itemScalarWhereInput = {
    AND?: cart_itemScalarWhereInput | cart_itemScalarWhereInput[]
    OR?: cart_itemScalarWhereInput[]
    NOT?: cart_itemScalarWhereInput | cart_itemScalarWhereInput[]
    cart_ID?: IntFilter<"cart_item"> | number
    product_ID?: IntFilter<"cart_item"> | number
    quantity?: IntFilter<"cart_item"> | number
    prices?: DecimalNullableFilter<"cart_item"> | Decimal | DecimalJsLike | number | string | null
  }

  export type liking_listUpsertWithWhereUniqueWithoutProductInput = {
    where: liking_listWhereUniqueInput
    update: XOR<liking_listUpdateWithoutProductInput, liking_listUncheckedUpdateWithoutProductInput>
    create: XOR<liking_listCreateWithoutProductInput, liking_listUncheckedCreateWithoutProductInput>
  }

  export type liking_listUpdateWithWhereUniqueWithoutProductInput = {
    where: liking_listWhereUniqueInput
    data: XOR<liking_listUpdateWithoutProductInput, liking_listUncheckedUpdateWithoutProductInput>
  }

  export type liking_listUpdateManyWithWhereWithoutProductInput = {
    where: liking_listScalarWhereInput
    data: XOR<liking_listUpdateManyMutationInput, liking_listUncheckedUpdateManyWithoutProductInput>
  }

  export type liking_listScalarWhereInput = {
    AND?: liking_listScalarWhereInput | liking_listScalarWhereInput[]
    OR?: liking_listScalarWhereInput[]
    NOT?: liking_listScalarWhereInput | liking_listScalarWhereInput[]
    user_ID?: IntFilter<"liking_list"> | number
    product_ID?: IntFilter<"liking_list"> | number
  }

  export type order_itemUpsertWithWhereUniqueWithoutProductInput = {
    where: order_itemWhereUniqueInput
    update: XOR<order_itemUpdateWithoutProductInput, order_itemUncheckedUpdateWithoutProductInput>
    create: XOR<order_itemCreateWithoutProductInput, order_itemUncheckedCreateWithoutProductInput>
  }

  export type order_itemUpdateWithWhereUniqueWithoutProductInput = {
    where: order_itemWhereUniqueInput
    data: XOR<order_itemUpdateWithoutProductInput, order_itemUncheckedUpdateWithoutProductInput>
  }

  export type order_itemUpdateManyWithWhereWithoutProductInput = {
    where: order_itemScalarWhereInput
    data: XOR<order_itemUpdateManyMutationInput, order_itemUncheckedUpdateManyWithoutProductInput>
  }

  export type userCreateWithoutSearch_historyInput = {
    account: string
    password: string
    enrollment_date?: Date | string | null
    address: string
    email_address: string
    birthdate: Date | string
    age?: number | null
    cart_item?: cart_itemCreateNestedManyWithoutUserInput
    liking_list?: liking_listCreateNestedManyWithoutUserInput
    orders?: ordersCreateNestedManyWithoutUserInput
    user_phone?: user_phoneCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutSearch_historyInput = {
    user_ID?: number
    account: string
    password: string
    enrollment_date?: Date | string | null
    address: string
    email_address: string
    birthdate: Date | string
    age?: number | null
    cart_item?: cart_itemUncheckedCreateNestedManyWithoutUserInput
    liking_list?: liking_listUncheckedCreateNestedManyWithoutUserInput
    orders?: ordersUncheckedCreateNestedManyWithoutUserInput
    user_phone?: user_phoneUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutSearch_historyInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutSearch_historyInput, userUncheckedCreateWithoutSearch_historyInput>
  }

  export type userUpsertWithoutSearch_historyInput = {
    update: XOR<userUpdateWithoutSearch_historyInput, userUncheckedUpdateWithoutSearch_historyInput>
    create: XOR<userCreateWithoutSearch_historyInput, userUncheckedCreateWithoutSearch_historyInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutSearch_historyInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutSearch_historyInput, userUncheckedUpdateWithoutSearch_historyInput>
  }

  export type userUpdateWithoutSearch_historyInput = {
    account?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    email_address?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    cart_item?: cart_itemUpdateManyWithoutUserNestedInput
    liking_list?: liking_listUpdateManyWithoutUserNestedInput
    orders?: ordersUpdateManyWithoutUserNestedInput
    user_phone?: user_phoneUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutSearch_historyInput = {
    user_ID?: IntFieldUpdateOperationsInput | number
    account?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    email_address?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    cart_item?: cart_itemUncheckedUpdateManyWithoutUserNestedInput
    liking_list?: liking_listUncheckedUpdateManyWithoutUserNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUserNestedInput
    user_phone?: user_phoneUncheckedUpdateManyWithoutUserNestedInput
  }

  export type cart_itemCreateWithoutUserInput = {
    quantity: number
    prices?: Decimal | DecimalJsLike | number | string | null
    product: productCreateNestedOneWithoutCart_itemInput
  }

  export type cart_itemUncheckedCreateWithoutUserInput = {
    product_ID: number
    quantity: number
    prices?: Decimal | DecimalJsLike | number | string | null
  }

  export type cart_itemCreateOrConnectWithoutUserInput = {
    where: cart_itemWhereUniqueInput
    create: XOR<cart_itemCreateWithoutUserInput, cart_itemUncheckedCreateWithoutUserInput>
  }

  export type cart_itemCreateManyUserInputEnvelope = {
    data: cart_itemCreateManyUserInput | cart_itemCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type liking_listCreateWithoutUserInput = {
    product: productCreateNestedOneWithoutLiking_listInput
  }

  export type liking_listUncheckedCreateWithoutUserInput = {
    product_ID: number
  }

  export type liking_listCreateOrConnectWithoutUserInput = {
    where: liking_listWhereUniqueInput
    create: XOR<liking_listCreateWithoutUserInput, liking_listUncheckedCreateWithoutUserInput>
  }

  export type liking_listCreateManyUserInputEnvelope = {
    data: liking_listCreateManyUserInput | liking_listCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ordersCreateWithoutUserInput = {
    order_ID?: number
    status?: number | null
    order_item?: order_itemCreateNestedManyWithoutOrdersInput
    paying?: payingCreateNestedManyWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutUserInput = {
    order_ID?: number
    status?: number | null
    order_item?: order_itemUncheckedCreateNestedManyWithoutOrdersInput
    paying?: payingUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersCreateOrConnectWithoutUserInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput>
  }

  export type ordersCreateManyUserInputEnvelope = {
    data: ordersCreateManyUserInput | ordersCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type search_historyCreateWithoutUserInput = {
    keyword: string
  }

  export type search_historyUncheckedCreateWithoutUserInput = {
    keyword: string
  }

  export type search_historyCreateOrConnectWithoutUserInput = {
    where: search_historyWhereUniqueInput
    create: XOR<search_historyCreateWithoutUserInput, search_historyUncheckedCreateWithoutUserInput>
  }

  export type search_historyCreateManyUserInputEnvelope = {
    data: search_historyCreateManyUserInput | search_historyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type user_phoneCreateWithoutUserInput = {
    phone_number: string
  }

  export type user_phoneUncheckedCreateWithoutUserInput = {
    phone_number: string
  }

  export type user_phoneCreateOrConnectWithoutUserInput = {
    where: user_phoneWhereUniqueInput
    create: XOR<user_phoneCreateWithoutUserInput, user_phoneUncheckedCreateWithoutUserInput>
  }

  export type user_phoneCreateManyUserInputEnvelope = {
    data: user_phoneCreateManyUserInput | user_phoneCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type cart_itemUpsertWithWhereUniqueWithoutUserInput = {
    where: cart_itemWhereUniqueInput
    update: XOR<cart_itemUpdateWithoutUserInput, cart_itemUncheckedUpdateWithoutUserInput>
    create: XOR<cart_itemCreateWithoutUserInput, cart_itemUncheckedCreateWithoutUserInput>
  }

  export type cart_itemUpdateWithWhereUniqueWithoutUserInput = {
    where: cart_itemWhereUniqueInput
    data: XOR<cart_itemUpdateWithoutUserInput, cart_itemUncheckedUpdateWithoutUserInput>
  }

  export type cart_itemUpdateManyWithWhereWithoutUserInput = {
    where: cart_itemScalarWhereInput
    data: XOR<cart_itemUpdateManyMutationInput, cart_itemUncheckedUpdateManyWithoutUserInput>
  }

  export type liking_listUpsertWithWhereUniqueWithoutUserInput = {
    where: liking_listWhereUniqueInput
    update: XOR<liking_listUpdateWithoutUserInput, liking_listUncheckedUpdateWithoutUserInput>
    create: XOR<liking_listCreateWithoutUserInput, liking_listUncheckedCreateWithoutUserInput>
  }

  export type liking_listUpdateWithWhereUniqueWithoutUserInput = {
    where: liking_listWhereUniqueInput
    data: XOR<liking_listUpdateWithoutUserInput, liking_listUncheckedUpdateWithoutUserInput>
  }

  export type liking_listUpdateManyWithWhereWithoutUserInput = {
    where: liking_listScalarWhereInput
    data: XOR<liking_listUpdateManyMutationInput, liking_listUncheckedUpdateManyWithoutUserInput>
  }

  export type ordersUpsertWithWhereUniqueWithoutUserInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutUserInput, ordersUncheckedUpdateWithoutUserInput>
    create: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutUserInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutUserInput, ordersUncheckedUpdateWithoutUserInput>
  }

  export type ordersUpdateManyWithWhereWithoutUserInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutUserInput>
  }

  export type ordersScalarWhereInput = {
    AND?: ordersScalarWhereInput | ordersScalarWhereInput[]
    OR?: ordersScalarWhereInput[]
    NOT?: ordersScalarWhereInput | ordersScalarWhereInput[]
    order_ID?: IntFilter<"orders"> | number
    user_ID?: IntFilter<"orders"> | number
    status?: IntNullableFilter<"orders"> | number | null
  }

  export type search_historyUpsertWithWhereUniqueWithoutUserInput = {
    where: search_historyWhereUniqueInput
    update: XOR<search_historyUpdateWithoutUserInput, search_historyUncheckedUpdateWithoutUserInput>
    create: XOR<search_historyCreateWithoutUserInput, search_historyUncheckedCreateWithoutUserInput>
  }

  export type search_historyUpdateWithWhereUniqueWithoutUserInput = {
    where: search_historyWhereUniqueInput
    data: XOR<search_historyUpdateWithoutUserInput, search_historyUncheckedUpdateWithoutUserInput>
  }

  export type search_historyUpdateManyWithWhereWithoutUserInput = {
    where: search_historyScalarWhereInput
    data: XOR<search_historyUpdateManyMutationInput, search_historyUncheckedUpdateManyWithoutUserInput>
  }

  export type search_historyScalarWhereInput = {
    AND?: search_historyScalarWhereInput | search_historyScalarWhereInput[]
    OR?: search_historyScalarWhereInput[]
    NOT?: search_historyScalarWhereInput | search_historyScalarWhereInput[]
    user_ID?: IntFilter<"search_history"> | number
    keyword?: StringFilter<"search_history"> | string
  }

  export type user_phoneUpsertWithWhereUniqueWithoutUserInput = {
    where: user_phoneWhereUniqueInput
    update: XOR<user_phoneUpdateWithoutUserInput, user_phoneUncheckedUpdateWithoutUserInput>
    create: XOR<user_phoneCreateWithoutUserInput, user_phoneUncheckedCreateWithoutUserInput>
  }

  export type user_phoneUpdateWithWhereUniqueWithoutUserInput = {
    where: user_phoneWhereUniqueInput
    data: XOR<user_phoneUpdateWithoutUserInput, user_phoneUncheckedUpdateWithoutUserInput>
  }

  export type user_phoneUpdateManyWithWhereWithoutUserInput = {
    where: user_phoneScalarWhereInput
    data: XOR<user_phoneUpdateManyMutationInput, user_phoneUncheckedUpdateManyWithoutUserInput>
  }

  export type user_phoneScalarWhereInput = {
    AND?: user_phoneScalarWhereInput | user_phoneScalarWhereInput[]
    OR?: user_phoneScalarWhereInput[]
    NOT?: user_phoneScalarWhereInput | user_phoneScalarWhereInput[]
    user_ID?: IntFilter<"user_phone"> | number
    phone_number?: StringFilter<"user_phone"> | string
  }

  export type userCreateWithoutUser_phoneInput = {
    account: string
    password: string
    enrollment_date?: Date | string | null
    address: string
    email_address: string
    birthdate: Date | string
    age?: number | null
    cart_item?: cart_itemCreateNestedManyWithoutUserInput
    liking_list?: liking_listCreateNestedManyWithoutUserInput
    orders?: ordersCreateNestedManyWithoutUserInput
    search_history?: search_historyCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutUser_phoneInput = {
    user_ID?: number
    account: string
    password: string
    enrollment_date?: Date | string | null
    address: string
    email_address: string
    birthdate: Date | string
    age?: number | null
    cart_item?: cart_itemUncheckedCreateNestedManyWithoutUserInput
    liking_list?: liking_listUncheckedCreateNestedManyWithoutUserInput
    orders?: ordersUncheckedCreateNestedManyWithoutUserInput
    search_history?: search_historyUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutUser_phoneInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutUser_phoneInput, userUncheckedCreateWithoutUser_phoneInput>
  }

  export type userUpsertWithoutUser_phoneInput = {
    update: XOR<userUpdateWithoutUser_phoneInput, userUncheckedUpdateWithoutUser_phoneInput>
    create: XOR<userCreateWithoutUser_phoneInput, userUncheckedCreateWithoutUser_phoneInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutUser_phoneInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutUser_phoneInput, userUncheckedUpdateWithoutUser_phoneInput>
  }

  export type userUpdateWithoutUser_phoneInput = {
    account?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    email_address?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    cart_item?: cart_itemUpdateManyWithoutUserNestedInput
    liking_list?: liking_listUpdateManyWithoutUserNestedInput
    orders?: ordersUpdateManyWithoutUserNestedInput
    search_history?: search_historyUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutUser_phoneInput = {
    user_ID?: IntFieldUpdateOperationsInput | number
    account?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    email_address?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    cart_item?: cart_itemUncheckedUpdateManyWithoutUserNestedInput
    liking_list?: liking_listUncheckedUpdateManyWithoutUserNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUserNestedInput
    search_history?: search_historyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type order_itemCreateManyOrdersInput = {
    product_ID: number
    quantity: number
    prices?: Decimal | DecimalJsLike | number | string | null
  }

  export type payingCreateManyOrdersInput = {
    payment_ID: number
  }

  export type order_itemUpdateWithoutOrdersInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    product?: productUpdateOneRequiredWithoutOrder_itemNestedInput
  }

  export type order_itemUncheckedUpdateWithoutOrdersInput = {
    product_ID?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type order_itemUncheckedUpdateManyWithoutOrdersInput = {
    product_ID?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type payingUpdateWithoutOrdersInput = {
    paying_info?: paying_infoUpdateOneRequiredWithoutPayingNestedInput
  }

  export type payingUncheckedUpdateWithoutOrdersInput = {
    payment_ID?: IntFieldUpdateOperationsInput | number
  }

  export type payingUncheckedUpdateManyWithoutOrdersInput = {
    payment_ID?: IntFieldUpdateOperationsInput | number
  }

  export type payingCreateManyPaying_infoInput = {
    order_ID: number
  }

  export type payingUpdateWithoutPaying_infoInput = {
    orders?: ordersUpdateOneRequiredWithoutPayingNestedInput
  }

  export type payingUncheckedUpdateWithoutPaying_infoInput = {
    order_ID?: IntFieldUpdateOperationsInput | number
  }

  export type payingUncheckedUpdateManyWithoutPaying_infoInput = {
    order_ID?: IntFieldUpdateOperationsInput | number
  }

  export type cart_itemCreateManyProductInput = {
    cart_ID: number
    quantity: number
    prices?: Decimal | DecimalJsLike | number | string | null
  }

  export type liking_listCreateManyProductInput = {
    user_ID: number
  }

  export type order_itemCreateManyProductInput = {
    order_ID: number
    quantity: number
    prices?: Decimal | DecimalJsLike | number | string | null
  }

  export type cart_itemUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    user?: userUpdateOneRequiredWithoutCart_itemNestedInput
  }

  export type cart_itemUncheckedUpdateWithoutProductInput = {
    cart_ID?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type cart_itemUncheckedUpdateManyWithoutProductInput = {
    cart_ID?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type liking_listUpdateWithoutProductInput = {
    user?: userUpdateOneRequiredWithoutLiking_listNestedInput
  }

  export type liking_listUncheckedUpdateWithoutProductInput = {
    user_ID?: IntFieldUpdateOperationsInput | number
  }

  export type liking_listUncheckedUpdateManyWithoutProductInput = {
    user_ID?: IntFieldUpdateOperationsInput | number
  }

  export type order_itemUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    orders?: ordersUpdateOneRequiredWithoutOrder_itemNestedInput
  }

  export type order_itemUncheckedUpdateWithoutProductInput = {
    order_ID?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type order_itemUncheckedUpdateManyWithoutProductInput = {
    order_ID?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type cart_itemCreateManyUserInput = {
    product_ID: number
    quantity: number
    prices?: Decimal | DecimalJsLike | number | string | null
  }

  export type liking_listCreateManyUserInput = {
    product_ID: number
  }

  export type ordersCreateManyUserInput = {
    order_ID?: number
    status?: number | null
  }

  export type search_historyCreateManyUserInput = {
    keyword: string
  }

  export type user_phoneCreateManyUserInput = {
    phone_number: string
  }

  export type cart_itemUpdateWithoutUserInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    product?: productUpdateOneRequiredWithoutCart_itemNestedInput
  }

  export type cart_itemUncheckedUpdateWithoutUserInput = {
    product_ID?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type cart_itemUncheckedUpdateManyWithoutUserInput = {
    product_ID?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    prices?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type liking_listUpdateWithoutUserInput = {
    product?: productUpdateOneRequiredWithoutLiking_listNestedInput
  }

  export type liking_listUncheckedUpdateWithoutUserInput = {
    product_ID?: IntFieldUpdateOperationsInput | number
  }

  export type liking_listUncheckedUpdateManyWithoutUserInput = {
    product_ID?: IntFieldUpdateOperationsInput | number
  }

  export type ordersUpdateWithoutUserInput = {
    status?: NullableIntFieldUpdateOperationsInput | number | null
    order_item?: order_itemUpdateManyWithoutOrdersNestedInput
    paying?: payingUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutUserInput = {
    order_ID?: IntFieldUpdateOperationsInput | number
    status?: NullableIntFieldUpdateOperationsInput | number | null
    order_item?: order_itemUncheckedUpdateManyWithoutOrdersNestedInput
    paying?: payingUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateManyWithoutUserInput = {
    order_ID?: IntFieldUpdateOperationsInput | number
    status?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type search_historyUpdateWithoutUserInput = {
    keyword?: StringFieldUpdateOperationsInput | string
  }

  export type search_historyUncheckedUpdateWithoutUserInput = {
    keyword?: StringFieldUpdateOperationsInput | string
  }

  export type search_historyUncheckedUpdateManyWithoutUserInput = {
    keyword?: StringFieldUpdateOperationsInput | string
  }

  export type user_phoneUpdateWithoutUserInput = {
    phone_number?: StringFieldUpdateOperationsInput | string
  }

  export type user_phoneUncheckedUpdateWithoutUserInput = {
    phone_number?: StringFieldUpdateOperationsInput | string
  }

  export type user_phoneUncheckedUpdateManyWithoutUserInput = {
    phone_number?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use OrdersCountOutputTypeDefaultArgs instead
     */
    export type OrdersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrdersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Paying_infoCountOutputTypeDefaultArgs instead
     */
    export type Paying_infoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Paying_infoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductCountOutputTypeDefaultArgs instead
     */
    export type ProductCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use cart_itemDefaultArgs instead
     */
    export type cart_itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = cart_itemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use liking_listDefaultArgs instead
     */
    export type liking_listArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = liking_listDefaultArgs<ExtArgs>
    /**
     * @deprecated Use order_itemDefaultArgs instead
     */
    export type order_itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = order_itemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ordersDefaultArgs instead
     */
    export type ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ordersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use payingDefaultArgs instead
     */
    export type payingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = payingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use paying_infoDefaultArgs instead
     */
    export type paying_infoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = paying_infoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use productDefaultArgs instead
     */
    export type productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = productDefaultArgs<ExtArgs>
    /**
     * @deprecated Use search_historyDefaultArgs instead
     */
    export type search_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = search_historyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use user_phoneDefaultArgs instead
     */
    export type user_phoneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = user_phoneDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}